package com.example.ThirdPartyReport;

import java.awt.Checkbox;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.Transaction;

import com.common.share.CommonButton;
import com.common.share.FocusMoveByEnter;
import com.common.share.ReportViewer;
import com.common.share.SessionBean;
import com.common.share.SessionFactoryUtil;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.InlineDateField;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Window.Notification;

public class RptThirdPartyItemInformation extends Window {

	private AbsoluteLayout mainLayout;
	private ComboBox  cmbCategoryName;
	private Label lblCategoryName;
	private Label lblPartyName;
	private ComboBox  cmbPartyName;
	private Label lblsubcategoryName;
	private ComboBox cmbsubcategoryName;
	private CheckBox chkAllsubcategory;
	private Label lblline;
	private NativeButton previewButton = new NativeButton("Preview");
	private NativeButton exitButton = new NativeButton("Exit");
	SessionBean sessionBean;
	private CheckBox chkAllCategory;
	private Label lblCategoryType=new Label();
	private ComboBox cmbCategoryType=new ComboBox();
	private CheckBox chkallCategoryType=new CheckBox();

	private PopupDateField asOnDate;
	private Label lblasOnDate;

	private CheckBox chkpdf,chkother;
	boolean type=true;

	public  RptThirdPartyItemInformation(SessionBean sessionBean,String str) {
		this.sessionBean = sessionBean;
		buildMainLayout();
		setContent(mainLayout);
		this.setResizable(false);
		this.setCaption("THIRD PARTY ITEM INFORMATION ::  "+ sessionBean.getCompany());
		cmbPartyName.focus();
		Component ob[]={cmbCategoryType,cmbCategoryName,cmbsubcategoryName,previewButton};
		new FocusMoveByEnter(this, ob);
		categoryType();
		allButtonAction();
		categoryData(); 
		partyNameDataload();
		cmbCategoryName.setEnabled(false);
		chkAllCategory.setEnabled(false);

		cmbsubcategoryName.setEnabled(false);
		chkAllsubcategory.setEnabled(false);

	}


	private void categoryData()
	{
		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();
		String categorytype="";
		String PartyName="";
		
		if(cmbPartyName.getValue()!=null)
		{
			PartyName=cmbPartyName.getValue().toString();
		}
		if(cmbCategoryType.getValue()!=null)
		{
			categorytype=cmbCategoryType.getValue().toString();
		}

		String query = " select Distinct vGroupId,vGroupName from tbThirdPartyItemInfo "
				+ " where vCategoryType like '"+categorytype+"' and vPartyId like '"+PartyName+"'";

		System.out.println(query);

		cmbCategoryName.removeAllItems();
		List list = session.createSQLQuery(query).list();		
		for(Iterator iter = list.iterator(); iter.hasNext();)
		{
			Object[] element = (Object[]) iter.next();
			cmbCategoryName.addItem(element[0]);
			cmbCategoryName.setItemCaption(element[0], element[1].toString());
		}
	}

	private void categoryType()
	{
		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();

		String query= "select Distinct vCategoryType,vCategoryType from tbThirdPartyItemInfo ";

		System.out.println(query);

		cmbCategoryName.removeAllItems();
		List list = session.createSQLQuery(query).list();		
		for(Iterator iter = list.iterator(); iter.hasNext();)
		{
			Object[] element = (Object[]) iter.next();
			cmbCategoryType.addItem(element[1]);
			cmbCategoryType.setItemCaption(element[1], element[1].toString());
		}
	}



	private void subcategorydataload()
	{
		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();

		String categoryType="";
		String Category="";
		String PartyName="";

		if(cmbCategoryType.getValue()!=null)
		{
			categoryType=cmbCategoryType.getValue().toString();
		}
		if(cmbPartyName.getValue()!=null)
		{
			PartyName=cmbPartyName.getValue().toString();
		}
		if(chkAllCategory.booleanValue())
		{
			Category="%";
		}
		if(cmbCategoryName.getValue()!=null)
		{
			Category=cmbCategoryName.getValue().toString();
		}

		String query = "select Distinct vSubGroupId,vSubGroupName from tbThirdPartyItemInfo where vCategoryType like 'Raw Material' and vPartyId like '71' and vGroupId like '1'";

		System.out.println(query);

		cmbsubcategoryName.removeAllItems();
		List list = session.createSQLQuery(query).list();
		if(!list.isEmpty())
		{
			for(Iterator iter = list.iterator(); iter.hasNext();)
			{
				Object[] element = (Object[]) iter.next();
				cmbsubcategoryName.addItem(element[0]);
				cmbsubcategoryName.setItemCaption(element[0], element[1].toString());
			}
		}
	}

	private void partyNameDataload()
	{
		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();
		
		String query= "select Distinct vPartyId,vPartyName from tbThirdPartyItemInfo ";
		System.out.println(query);

		List<?> list = session.createSQLQuery(query).list();
		cmbPartyName.removeAllItems();
		for(Iterator iter = list.iterator(); iter.hasNext();)
		{
			Object[] element = (Object[]) iter.next();
			cmbPartyName.addItem(element[0]);
			cmbPartyName.setItemCaption(element[0], element[1].toString());
		}
	}


	private void allButtonAction()
	{
		chkpdf.addListener(new ValueChangeListener()
		{
			public void valueChange(ValueChangeEvent event)
			{
				if(chkpdf.booleanValue()==true)
				{
					chkother.setValue(false);
					type=true;
				}

				else
				{
					chkother.setValue(true);
					type=false;
				}
			}

		});
		chkother.addListener(new ValueChangeListener()
		{

			public void valueChange(ValueChangeEvent event)
			{
				if(chkother.booleanValue()==true)									
				{
					chkpdf.setValue(false);
					type=false;
				}
				else
				{
					chkpdf.setValue(true);
					type=true;
					
					
				}
			}
		});
		
		cmbCategoryType.addListener(new ValueChangeListener()
		{
			public void valueChange(ValueChangeEvent event)
			{				
				if(cmbCategoryType.getValue()!=null)
				{		
					cmbCategoryName.setEnabled(true);
					chkAllCategory.setEnabled(true);

					categoryData();  			
				}			
				else{
					cmbCategoryName.setEnabled(false);
					chkAllCategory.setEnabled(false);
					cmbCategoryName.removeAllItems();
					categoryType();
				}
			}
		});


		cmbCategoryName.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				if(cmbCategoryName.getValue()!=null)
				{
					cmbsubcategoryName.setEnabled(true);
					chkAllsubcategory.setEnabled(true);
					subcategorydataload();
				}
				else
				{
					cmbsubcategoryName.setEnabled(false);
					chkAllsubcategory.setEnabled(false);
					cmbsubcategoryName.removeAllItems();
					categoryData();
				}
			}
		});

		
		previewButton.addListener(new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) {
				if(cmbCategoryName.getValue()!=null || chkAllCategory.booleanValue()==true)
				{

					if(cmbPartyName.getValue()!=null )
					{			
						reportShow();
					}

					else
					{
						showNotification("Select Product Name", Notification.TYPE_WARNING_MESSAGE);
					}

				}
				else
				{
					getParent().showNotification("Select Category Name", Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});


		exitButton.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				close();
			}
		});


		chkAllCategory.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				boolean bv = chkAllCategory.booleanValue();
				if(bv==true)
				{
					cmbCategoryName.setValue(null);
					cmbCategoryName.setEnabled(false); 

					cmbsubcategoryName.setEnabled(true);
					chkAllsubcategory.setEnabled(true);

					subcategorydataload();
				}
				else{
					cmbCategoryName.setEnabled(true);
					cmbsubcategoryName.setEnabled(false);
					chkAllsubcategory.setEnabled(false);
					cmbsubcategoryName.setValue(null);
					chkAllsubcategory.setValue(false);

					cmbsubcategoryName.removeAllItems();
					categoryData();
				}
			}
		});
		
		
		chkAllsubcategory.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				boolean bv = chkAllsubcategory.booleanValue();
				if(bv==true)
				{
					cmbsubcategoryName.setValue(null);
					cmbsubcategoryName.setEnabled(false); 

					
				}
				else
				{
					
					cmbsubcategoryName.setEnabled(true);	
				}
			}
		});

	}

	private void reportShow()
	{
		System.out.println("into Reportshow");
		String query=null;
		String categoryID="";
		String partyName="";
		String subcategoryID="";
		String categirytype="";
		if(chkAllCategory.booleanValue())
		{
			categoryID ="%"; 
		}

		else
		{
			categoryID = cmbCategoryName.getValue().toString();
		}

		if(chkAllsubcategory.booleanValue())
			subcategoryID="%";
		else
			subcategoryID=cmbsubcategoryName.getValue().toString();

		if(cmbCategoryType.getValue()!=null)
		{
			categirytype=cmbCategoryType.getValue().toString();	
		}
		if(cmbPartyName.getValue()!=null)
		{
			partyName=cmbPartyName.getValue().toString();	
		}


		try{    

			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			Transaction tx = session.beginTransaction();

			HashMap hm = new HashMap();
			hm.put("logo", sessionBean.getCompanyLogo());
			hm.put("company", sessionBean.getCompany());
			hm.put("address", sessionBean.getCompanyAddress());
			hm.put("Phone", sessionBean.getCompanyContact());
			hm.put("username", sessionBean.getUserName()+"  "+sessionBean.getUserIp());
			hm.put("parentType", cmbCategoryType.getValue().toString());
			//hm.put("asOnDate", new SimpleDateFormat("dd-MM-yy").format(asOnDate.getValue()));
			System.out.println("Start sql");

			String sql= "select vPartyId,vPartyName,vCategoryType,vGroupId,vGroupName,vSubGroupId,vSubGroupName,vItemName,vUnitName,modelNo, mMaxLabel,mMinLabel,mReLabel from tbThirdPartyItemInfo "
					+ "where vPartyId like '"+partyName+"' "
					+ "and vCategoryType like '"+categirytype+"' "
					+ "and vGroupId like '"+categoryID+"' "
					+ "and vSubGroupId like '"+subcategoryID+"' "; 

			System.out.println(sql);
			hm.put("sql", sql);
			System.out.println("Printf 123");

			List lst= session.createSQLQuery(sql).list();
			if(!lst.isEmpty())
			{
				System.out.println("Trying To Do");
				Window win = new ReportViewer(hm,"report/production/Thirdparty/rptThirdPartyItemInfo.jasper",
						this.getWindow().getApplication().getContext().getBaseDirectory()+"".replace("\\","/")+"/VAADIN/rpttmp",
						this.getWindow().getApplication().getURL()+"VAADIN/rpttmp",false,
						this.getWindow().getApplication().getURL()+"VAADIN/applet",type);				
				System.out.println("789 show");
				win.setCaption("Project Report");
				this.getParent().getWindow().addWindow(win);	
			}		
			else
			{
				showNotification("Data does not exists on the given criteria.",Notification.TYPE_WARNING_MESSAGE);	
			}						
		}
		catch(Exception exp){

			this.getParent().showNotification("Error "+exp,Notification.TYPE_ERROR_MESSAGE);
		}
	}



	private AbsoluteLayout buildMainLayout() 
	{
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("520px");
		mainLayout.setHeight("210px");
		mainLayout.setMargin(false);

		//top-level component properties
		setWidth("560px");
		setHeight("250px");

		lblPartyName = new Label();
		lblPartyName.setImmediate(false);
		lblPartyName.setWidth("-1px");
		lblPartyName.setHeight("-1px");
		lblPartyName.setValue("Party Name :");
		mainLayout.addComponent(lblPartyName, "top:40.0px;left:45.0px;");

		cmbPartyName = new ComboBox();
		cmbPartyName.setImmediate(true);
		cmbPartyName.setWidth("260px");
		cmbPartyName.setHeight("24px");
		cmbPartyName.setNullSelectionAllowed(false);
		cmbPartyName.setNewItemsAllowed(false);
		cmbPartyName.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		mainLayout.addComponent(cmbPartyName, "top:38.0px;left:185.0px;");

		lblCategoryType = new Label();
		lblCategoryType.setImmediate(false);
		lblCategoryType.setWidth("-1px");
		lblCategoryType.setHeight("-1px");
		lblCategoryType.setValue("Category Type :");
		mainLayout.addComponent(lblCategoryType, "top:66.0px;left:45.0px;");

		// cmbPartyName
		cmbCategoryType = new ComboBox();
		cmbCategoryType.setImmediate(true);
		cmbCategoryType.setWidth("260px");
		cmbCategoryType.setHeight("24px");
		cmbCategoryType.setNullSelectionAllowed(false);
		cmbCategoryType.setNewItemsAllowed(false);
		cmbCategoryType.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		mainLayout.addComponent( cmbCategoryType, "top:64.0px;left:185.0px;");

		// lblCategoryName
		lblCategoryName = new Label();
		lblCategoryName.setImmediate(false);
		lblCategoryName.setWidth("-1px");
		lblCategoryName.setHeight("-1px");
		lblCategoryName.setValue("Category Name :");
		mainLayout.addComponent(lblCategoryName, "top:92.0px;left:45.0px;");

		// cmbCategoryName
		cmbCategoryName = new ComboBox();
		cmbCategoryName.setImmediate(true);
		cmbCategoryName.setWidth("260px");
		cmbCategoryName.setHeight("24px");
		cmbCategoryName.setNullSelectionAllowed(false);
		cmbCategoryName.setNewItemsAllowed(false);
		cmbCategoryName.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		mainLayout.addComponent( cmbCategoryName, "top:90.0px;left:185.0px;");

		chkAllCategory = new CheckBox("");
		chkAllCategory.setCaption("All");
		chkAllCategory.setWidth("-1px");
		chkAllCategory.setHeight("24px");
		chkAllCategory.setImmediate(true);
		mainLayout.addComponent(chkAllCategory, "top:90.0px;left:445.0px;");

		lblsubcategoryName = new Label();
		lblsubcategoryName.setImmediate(false);
		lblsubcategoryName.setWidth("-1px");
		lblsubcategoryName.setHeight("-1px");
		lblsubcategoryName.setValue("Sub-Category Name :");
		mainLayout.addComponent(lblsubcategoryName, "top:118.0px;left:45.0px;");

		cmbsubcategoryName = new ComboBox();
		cmbsubcategoryName.setWidth("260px");
		cmbsubcategoryName.setHeight("24px");
		cmbsubcategoryName.setImmediate(true);
		cmbsubcategoryName.setNewItemsAllowed(false);
		cmbsubcategoryName.setNullSelectionAllowed(false);
		cmbsubcategoryName.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		mainLayout.addComponent( cmbsubcategoryName, "top:116.0px;left:185.0px;");

		chkAllsubcategory=new CheckBox("");
		chkAllsubcategory.setCaption("All");
		chkAllsubcategory.setImmediate(true);
		chkAllsubcategory.setWidth("-1px");
		chkAllsubcategory.setHeight("24px");
		mainLayout.addComponent(chkAllsubcategory, "top:116.0px;left:445.0px;");



		chkpdf=new CheckBox("PDF");
		chkpdf.setImmediate(true);
		chkpdf.setValue(true);
		mainLayout.addComponent(chkpdf, "top:144px; left:185px");

		chkother=new CheckBox("Other");
		chkother.setImmediate(true);
		mainLayout.addComponent(chkother, "top:144px; left:245px");

		lblline = new Label();
		lblline.setImmediate(false);
		lblline.setWidth("-1px");
		lblline.setHeight("-1px");
		lblline.setValue("____________________________________________________________________________");
		mainLayout.addComponent(lblline, "top:157.0px;left:20.0px;");

		previewButton.setWidth("95px");
		previewButton.setHeight("28px");
		previewButton.setIcon(new ThemeResource("../icons/print.png"));
		mainLayout.addComponent(previewButton,"top:175.opx; left:140.0px");

		exitButton.setWidth("70px");
		exitButton.setHeight("28px");
		exitButton.setIcon(new ThemeResource("../icons/exit.png"));
		mainLayout.addComponent(exitButton,"top:175.opx; left:250.0px");

		return mainLayout;
	}

}
