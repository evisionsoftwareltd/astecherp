package com.example.ThirdPartyReport;

import java.awt.Checkbox;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.Transaction;

import com.common.share.CommonButton;
import com.common.share.FocusMoveByEnter;
import com.common.share.ReportViewer;
import com.common.share.SessionBean;
import com.common.share.SessionFactoryUtil;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.InlineDateField;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Window.Notification;

public class RptThirdPartyIssueRegister extends Window {

	private AbsoluteLayout mainLayout;
	private ComboBox  cmbCategoryName;
	private Label lblCategoryName;
	private Label lblSection;
	private ComboBox  cmbSection;
	private Label lblsubcategoryName;
	private ComboBox cmbsubcategoryName;
	private CheckBox chkAllsubcategory;
	private Label lblline;
	private NativeButton previewButton = new NativeButton("Preview");
	private NativeButton exitButton = new NativeButton("Exit");
	SessionBean sessionBean;
	private CheckBox chkAllSection;
	private CheckBox chkAllCategory;
	private Label lblItemType=new Label();
	private ComboBox cmbItemType=new ComboBox();
	
	private SimpleDateFormat dateF= new SimpleDateFormat("yyyy-MM-dd");
	
	private PopupDateField fromDate, toDate;
	private Label lblasOnDate;
	
	private CheckBox chkpdf,chkother;
	boolean type=true;

	public  RptThirdPartyIssueRegister(SessionBean sessionBean,String str) {
		this.sessionBean = sessionBean;
		buildMainLayout();
		setContent(mainLayout);
		this.setResizable(false);
		this.setCaption("ISSUE REGISTER::  "+ sessionBean.getCompany());
		cmbItemType.focus();
		Component ob[]={cmbCategoryName,cmbSection,cmbsubcategoryName,previewButton};
		new FocusMoveByEnter(this, ob);
		itemType();
		allButtonAction();
		categoryData(); 
		cmbCategoryName.setEnabled(false);
		chkAllCategory.setEnabled(false);

		cmbsubcategoryName.setEnabled(false);
		chkAllsubcategory.setEnabled(false);

		cmbSection.setEnabled(false);
		chkAllSection.setEnabled(false);
	}


	private void categoryData()
	{
		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();
		String itemType="";
		
		if(cmbItemType.getValue()!=null)
		{
			itemType=cmbItemType.getValue().toString();
		}

		String query = "select Distinct c.vGroupId,c.vGroupName from tbThirPartyIssueInfo a inner join tbThirdPartyIssueDetails b "
				+ "on a.IssueNo=b.IssueNo inner join tbThirdPartyItemInfo c "
				+ "on c.vCode=b.ProductID "
				+ "where a.vItemType like '"+itemType+"'";

		System.out.println(query);

		cmbCategoryName.removeAllItems();
		List list = session.createSQLQuery(query).list();		
		for(Iterator iter = list.iterator(); iter.hasNext();)
		{
			Object[] element = (Object[]) iter.next();
			cmbCategoryName.addItem(element[0]);
			cmbCategoryName.setItemCaption(element[0], element[1].toString());
		}
	}

	private void itemType()
	{
		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();
		
		String query= "select Distinct vItemType,vItemType from tbThirPartyIssueInfo";

		System.out.println(query);

		cmbCategoryName.removeAllItems();
		List list = session.createSQLQuery(query).list();		
		for(Iterator iter = list.iterator(); iter.hasNext();)
		{
			Object[] element = (Object[]) iter.next();
			cmbItemType.addItem(element[1]);
			cmbItemType.setItemCaption(element[1], element[1].toString());
		}
	}
	


	private void subcategorydataload()
	{
		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();
		
		String itemType="";
		String Category="";
		
		if(cmbItemType.getValue()!=null)
		{
			itemType=cmbItemType.getValue().toString();
		}
		
		if(chkAllCategory.booleanValue())
		{
			Category="%";
		}
		if(cmbCategoryName.getValue()!=null)
		{
			Category=cmbCategoryName.getValue().toString();
		}
		
		String query = "select Distinct c.vSubGroupId,c.vSubGroupName from tbThirPartyIssueInfo a inner join tbThirdPartyIssueDetails b on a.IssueNo=b.IssueNo inner join tbThirdPartyItemInfo c "
				+ "on c.vCode=b.ProductID where a.vItemType like '"+itemType+"' "
				+ "and c.vGroupId like '"+Category+"'";

		System.out.println(query);

		cmbsubcategoryName.removeAllItems();
		List list = session.createSQLQuery(query).list();
		if(!list.isEmpty())
		{
			for(Iterator iter = list.iterator(); iter.hasNext();)
			{
				Object[] element = (Object[]) iter.next();
				cmbsubcategoryName.addItem(element[0]);
				cmbsubcategoryName.setItemCaption(element[0], element[1].toString());
			}
		}
	}

	private void SectionDataload()
	{
		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();
		String category="", subcategory="";
		String itemType="";
		if(chkAllCategory.booleanValue()==true)
		{
			category="%";
		}
		else
		{
			category=cmbCategoryName.getValue().toString();
		}
		if(chkAllsubcategory.booleanValue()==true)
		{
			subcategory="%";}
		else
		{
			subcategory=cmbsubcategoryName.getValue().toString();}
		
		if(cmbItemType.getValue().toString()!=null)
		{
			itemType=cmbItemType.getValue().toString();	
		}
				
		String query= "select Distinct a.IssuedTo,(select SectionName from tbSectionInfo where AutoID=a.IssuedTo) SectionName"
				+ " from tbThirPartyIssueInfo a inner join tbThirdPartyIssueDetails b "
				+ "on a.IssueNo=b.IssueNo inner join tbThirdPartyItemInfo c "
				+ "on c.vCode=b.ProductID where a.vItemType like '"+itemType+"' "
				+ "and c.vGroupId like '"+category+"' "
				+ "and c.vSubGroupId like '"+subcategory+"'";
		System.out.println(query);

		List<?> list = session.createSQLQuery(query).list();
		cmbSection.removeAllItems();
		for(Iterator iter = list.iterator(); iter.hasNext();)
		{
			Object[] element = (Object[]) iter.next();
			cmbSection.addItem(element[0]);
			cmbSection.setItemCaption(element[0], element[1].toString());
		}
	}

	private void allButtonAction()
	{
		chkpdf.addListener(new ValueChangeListener()
		{
			public void valueChange(ValueChangeEvent event)
			{
				if(chkpdf.booleanValue()==true)
				{
					chkother.setValue(false);
					type=true;
				}

				else
				{
					chkother.setValue(true);
					type=false;
				}
			}

		});
		chkother.addListener(new ValueChangeListener()
		{

			public void valueChange(ValueChangeEvent event)
			{
				if(chkother.booleanValue()==true)									
				{
					chkpdf.setValue(false);
					type=false;
				}
				else
				{
					chkpdf.setValue(true);
					type=true;
					
					
				}
			}
		});
		
		cmbItemType.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				if(cmbItemType.getValue()!=null)
				{
					cmbCategoryName.setEnabled(true);
					chkAllCategory.setEnabled(true);
					
					cmbsubcategoryName.setEnabled(false);
					chkAllsubcategory.setEnabled(false);

					cmbSection.setEnabled(false);
					chkAllSection.setEnabled(false);

					cmbSection.setValue(null);
					chkAllSection.setValue(false);

					categoryData();
				}
				else
				{
					cmbCategoryName.setEnabled(false);
					chkAllCategory.setEnabled(false);
					
					cmbsubcategoryName.setEnabled(false);
					chkAllsubcategory.setEnabled(false);
					
					cmbSection.setValue(null);
					chkAllSection.setValue(false);
					
					cmbSection.setEnabled(false);
					chkAllSection.setEnabled(false);

					cmbSection.setValue(null);
					chkAllSection.setValue(false);
					cmbsubcategoryName.removeAllItems();
					itemType();
				}
			}
		});

		cmbCategoryName.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				if(cmbCategoryName.getValue()!=null)
				{
					cmbsubcategoryName.setEnabled(true);
					chkAllsubcategory.setEnabled(true);

					cmbSection.setEnabled(false);
					chkAllSection.setEnabled(false);

					cmbSection.setValue(null);
					chkAllSection.setValue(false);

					subcategorydataload();
				}
				else
				{
					cmbsubcategoryName.setEnabled(false);
					chkAllsubcategory.setEnabled(false);
					
					cmbSection.setValue(null);
					chkAllSection.setValue(false);
					
					cmbSection.setEnabled(false);
					chkAllSection.setEnabled(false);

					cmbSection.setValue(null);
					chkAllSection.setValue(false);
					cmbsubcategoryName.removeAllItems();
					categoryData();
				}
			}
		});
		
		cmbsubcategoryName.addListener(new ValueChangeListener()
		{
			public void valueChange(ValueChangeEvent event)
			{				
				if(cmbsubcategoryName.getValue()!=null)
				{		
					cmbSection.setEnabled(true);
					chkAllSection.setEnabled(true);
					SectionDataload(); 			
				}			
				else{
					cmbSection.setEnabled(false);
					chkAllSection.setEnabled(false);

					cmbSection.setValue(null);
					chkAllSection.setValue(false);
					
					cmbSection.removeAllItems();
					subcategorydataload();
				}
			}
		});
		
		
		chkAllsubcategory.addListener(new ValueChangeListener()
		{
			public void valueChange(ValueChangeEvent event)
			{
				boolean bv = chkAllsubcategory.booleanValue();
				if(bv==true)
				{
					cmbsubcategoryName.setValue(null);
					cmbsubcategoryName.setEnabled(false);

					cmbSection.setEnabled(true);
					chkAllSection.setEnabled(true);
					SectionDataload();
					}	
					else{
						cmbsubcategoryName.setEnabled(true);

						cmbsubcategoryName.setValue(null);
						chkAllsubcategory.setValue(false);

						cmbSection.setEnabled(false);
						chkAllSection.setEnabled(false);

						cmbSection.setValue(null);
						chkAllSection.setValue(false);
						cmbSection.removeAllItems();
						subcategorydataload();
					}	
			}
		});
		
		previewButton.addListener(new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) {
				if(cmbCategoryName.getValue()!=null || chkAllCategory.booleanValue()==true)
				{

					if(cmbSection.getValue()!=null || chkAllSection.booleanValue()==true)
					{			
						reportShow();
					}

					else
					{
						showNotification("Select Product Name", Notification.TYPE_WARNING_MESSAGE);
					}

				}
				else
				{
					getParent().showNotification("Select Category Name", Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});


		exitButton.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				close();
			}
		});

		chkAllSection.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				boolean bv = chkAllSection.booleanValue();
				if(bv==true)
				{
					cmbSection.setValue(null);
					cmbSection.setEnabled(false);
				}
				else{
					cmbSection.setEnabled(true);
					if((cmbsubcategoryName.getValue()!=null || chkAllsubcategory.booleanValue()) && (cmbCategoryName.getValue()!=null || chkAllCategory.booleanValue()) && (cmbItemType.getValue()!=null ))
					SectionDataload();
				}
			}
		});


		chkAllCategory.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				boolean bv = chkAllCategory.booleanValue();
				if(bv==true)
				{
					cmbCategoryName.setValue(null);
					cmbCategoryName.setEnabled(false); 
					
					cmbsubcategoryName.setEnabled(true);
					chkAllsubcategory.setEnabled(true);

					cmbSection.setEnabled(false);
					chkAllSection.setEnabled(false);

					cmbSection.setValue(null);
					chkAllSection.setValue(false);
					subcategorydataload();
				}
				else{
					cmbCategoryName.setEnabled(true);
					cmbsubcategoryName.setEnabled(false);
					chkAllsubcategory.setEnabled(false);
					cmbsubcategoryName.setValue(null);
					chkAllsubcategory.setValue(false);

					cmbSection.setEnabled(false);
					chkAllSection.setEnabled(false);

					cmbSection.setValue(null);
					chkAllSection.setValue(false);
					cmbsubcategoryName.removeAllItems();
					categoryData();
				}
			}
		});

	}

	private void reportShow()
	{
		System.out.println("into Reportshow");
		String query=null;
		String categoryID="";
		String itemType="";
		String subcategoryID="";
		String section="";
		if(chkpdf.booleanValue()==true)
		{
			type= true;
		}
		else
		{
			type=false;
		}
		if(chkAllCategory.booleanValue())
		{
			categoryID ="%"; 
		}

		else
		{
			categoryID = cmbCategoryName.getValue().toString();
		}

		if(chkAllsubcategory.booleanValue())
			subcategoryID="%";
		else
			subcategoryID=cmbsubcategoryName.getValue().toString();

		if(chkAllSection.booleanValue())
		{
			section ="%";
		}
		else
		{
			section=cmbSection.getValue().toString();
		}
		
		if(cmbItemType.getValue()!=null)
		{
			itemType=cmbItemType.getValue().toString();	
		}
		
		try{

			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			Transaction tx = session.beginTransaction();

			HashMap hm = new HashMap();
			hm.put("logo", sessionBean.getCompanyLogo());
			hm.put("company", sessionBean.getCompany());
			hm.put("address", sessionBean.getCompanyAddress());
			hm.put("Phone", sessionBean.getCompanyContact());
			hm.put("username", sessionBean.getUserName()+"  "+sessionBean.getUserIp());
			hm.put("parentType", cmbItemType.getValue().toString());
			hm.put("fromDate", new SimpleDateFormat("dd-MM-yy").format(fromDate.getValue()));
			hm.put("toDate", new SimpleDateFormat("dd-MM-yy").format(toDate.getValue()));

	//ISNULL(Replace(CONVERT(char(10),Reqdate,103),'/','-'),'1900-01-01') ReqDate,
			String sql="select a.IssueNo,a.Date, c.vGroupId,c.vGroupName,a.vItemType,c.vSubGroupId,"
					+ "c.vSubGroupName,b.IssueNo,b.remarks,b.Qty,a.IssuedTo,(select SectionName from tbSectionInfo where AutoID=a.IssuedTo) "
					+ "SectionName,b.ProductID,c.vItemName,c.vUnitName,a.IssueNo,a.challanNo, "
					+ "a.IssueRef reqNo,dReqDate   from tbThirPartyIssueInfo a inner join tbThirdPartyIssueDetails b "
					+ "inner join tbThirdPartyItemInfo c on c.vCode=b.ProductID "
					+ "on a.IssueNo=b.IssueNo "
					+ "where a.vItemType like '"+itemType+"' "
					+ "and c.vGroupId like '"+categoryID+"' "
					+ "and c.vSubGroupId like '"+subcategoryID+"' "
					+ "and a.IssuedTo like '"+section+"'  "
					+ "and CONVERT(date,a.Date,105) "
					+ "between '"+dateF.format(fromDate.getValue())+"' "
					+ "and '"+dateF.format(toDate.getValue())+"' "; 
			
			System.out.println(query);
			hm.put("sql", sql);
			System.out.println("123");

			List lst= session.createSQLQuery(sql).list();
			if(!lst.isEmpty())
			{
				System.out.println("Trying To Do");
				Window win = new ReportViewer(hm,"report/production/Thirdparty/rptIssueRegister.jasper",
						this.getWindow().getApplication().getContext().getBaseDirectory()+"".replace("\\","/")+"/VAADIN/rpttmp",
						this.getWindow().getApplication().getURL()+"VAADIN/rpttmp",false,
						this.getWindow().getApplication().getURL()+"VAADIN/applet",type);				
				System.out.println("789");
				win.setCaption("Project Report");
				this.getParent().getWindow().addWindow(win);	
			}		
			else
			{
			   showNotification("Data does not exists on the given criteria.",Notification.TYPE_WARNING_MESSAGE);	
			}						
		}
		catch(Exception exp){

			this.getParent().showNotification("Error "+exp,Notification.TYPE_ERROR_MESSAGE);
		}
	}
	
	

	private AbsoluteLayout buildMainLayout() 
	{
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("520px");
		mainLayout.setHeight("260px");
		mainLayout.setMargin(false);

		//top-level component properties
		setWidth("560px");
		setHeight("310px");
		
		lblItemType = new Label();
		lblItemType.setImmediate(false);
		lblItemType.setWidth("-1px");
		lblItemType.setHeight("-1px");
		lblItemType.setValue("Item Type :");
		mainLayout.addComponent(lblItemType, "top:40.0px;left:45.0px;");

		// cmbSection
		cmbItemType = new ComboBox();
		cmbItemType.setImmediate(true);
		cmbItemType.setWidth("260px");
		cmbItemType.setHeight("24px");
		cmbItemType.setNullSelectionAllowed(false);
		cmbItemType.setNewItemsAllowed(false);
		cmbItemType.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		mainLayout.addComponent( cmbItemType, "top:38.0px;left:185.0px;");
		
		// lblCategoryName
		lblCategoryName = new Label();
		lblCategoryName.setImmediate(false);
		lblCategoryName.setWidth("-1px");
		lblCategoryName.setHeight("-1px");
		lblCategoryName.setValue("Category  Name :");
		mainLayout.addComponent(lblCategoryName, "top:66.0px;left:45.0px;");

		// cmbCategoryName
		cmbCategoryName = new ComboBox();
		cmbCategoryName.setImmediate(true);
		cmbCategoryName.setWidth("260px");
		cmbCategoryName.setHeight("24px");
		cmbCategoryName.setNullSelectionAllowed(false);
		cmbCategoryName.setNewItemsAllowed(false);
		cmbCategoryName.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		mainLayout.addComponent( cmbCategoryName, "top:64.0px;left:185.0px;");
			
		chkAllCategory = new CheckBox("");
		chkAllCategory.setCaption("All");
		chkAllCategory.setWidth("-1px");
		chkAllCategory.setHeight("24px");
		chkAllCategory.setImmediate(true);
		mainLayout.addComponent(chkAllCategory, "top:64.0px;left:445.0px;");
		
		lblsubcategoryName = new Label();
		lblsubcategoryName.setImmediate(false);
		lblsubcategoryName.setWidth("-1px");
		lblsubcategoryName.setHeight("-1px");
		lblsubcategoryName.setValue("Sub-Category Name :");
		mainLayout.addComponent(lblsubcategoryName, "top:92.0px;left:45.0px;");

		cmbsubcategoryName = new ComboBox();
		cmbsubcategoryName.setWidth("260px");
		cmbsubcategoryName.setHeight("24px");
		cmbsubcategoryName.setImmediate(true);
		cmbsubcategoryName.setNewItemsAllowed(false);
		cmbsubcategoryName.setNullSelectionAllowed(false);
		cmbsubcategoryName.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		mainLayout.addComponent( cmbsubcategoryName, "top:90.0px;left:185.0px;");
		
		chkAllsubcategory=new CheckBox("");
		chkAllsubcategory.setCaption("All");
		chkAllsubcategory.setImmediate(true);
		chkAllsubcategory.setWidth("-1px");
		chkAllsubcategory.setHeight("24px");
		mainLayout.addComponent(chkAllsubcategory, "top:90.0px;left:445.0px;");
		
		lblSection = new Label();
		lblSection.setImmediate(false);
		lblSection.setWidth("-1px");
		lblSection.setHeight("-1px");
		lblSection.setValue("Section  Name :");
		mainLayout.addComponent(lblSection, "top:118.0px;left:45.0px;");

		cmbSection = new ComboBox();
		cmbSection.setImmediate(true);
		cmbSection.setWidth("260px");
		cmbSection.setHeight("24px");
		cmbSection.setNullSelectionAllowed(false);
		cmbSection.setNewItemsAllowed(false);
		cmbSection.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		mainLayout.addComponent(cmbSection, "top:116.0px;left:185.0px;");


		chkAllSection = new CheckBox("");
		chkAllSection.setCaption("All");
		chkAllSection.setWidth("-1px");
		chkAllSection.setHeight("24px");
		chkAllSection.setImmediate(true);
		mainLayout.addComponent(chkAllSection, "top:116.0px; left:445.0px;");
		
		Label lblfromdate=new Label("From Date");
		lblfromdate.setImmediate(false);
		mainLayout.addComponent(lblfromdate, "top:144px; left:45px");

		fromDate=new PopupDateField();
		fromDate.setImmediate(true);
		fromDate.setWidth("110px");
		fromDate.setHeight("24px");
		fromDate.setResolution(fromDate.RESOLUTION_DAY);
		fromDate.setValue(new Date());
		fromDate.setDateFormat("dd-MM-yyyy");
		mainLayout.addComponent(fromDate, "top:142px; left:185px");

		Label lbltodate=new Label("To Date");
		lbltodate.setImmediate(false);
		mainLayout.addComponent(lbltodate, "top:170px; left:45px");

		toDate=new PopupDateField();
		toDate.setImmediate(true);
		toDate.setWidth("110px");
		toDate.setHeight("24px");
		toDate.setResolution(toDate.RESOLUTION_DAY);
		toDate.setValue(new Date());
		toDate.setDateFormat("dd-MM-yyyy");
		mainLayout.addComponent(toDate, "top:168px; left:185px");
		
		chkpdf=new CheckBox("PDF");
		chkpdf.setImmediate(true);
		chkpdf.setValue(true);
		mainLayout.addComponent(chkpdf, "top:194px; left:185px");

		chkother=new CheckBox("Other");
		chkother.setImmediate(true);
		mainLayout.addComponent(chkother, "top:194px; left:245px");

		lblline = new Label();
		lblline.setImmediate(false);
		lblline.setWidth("-1px");
		lblline.setHeight("-1px");
		lblline.setValue("____________________________________________________________________________");
		mainLayout.addComponent(lblline, "top:210.0px;left:20.0px;");

		previewButton.setWidth("95px");
		previewButton.setHeight("28px");
		previewButton.setIcon(new ThemeResource("../icons/print.png"));
		mainLayout.addComponent(previewButton,"top:230.opx; left:140.0px");

		exitButton.setWidth("70px");
		exitButton.setHeight("28px");
		exitButton.setIcon(new ThemeResource("../icons/exit.png"));
		mainLayout.addComponent(exitButton,"top:230.opx; left:250.0px");

		return mainLayout;
	}
	
}
