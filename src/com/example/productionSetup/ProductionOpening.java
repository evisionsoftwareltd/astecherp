package com.example.productionSetup;
import com.common.share.AmountField;
import com.common.share.CommonButton;
import com.common.share.FocusMoveByEnter;
import com.common.share.SessionBean;
import com.common.share.TextRead;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.InlineDateField;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Window;

import java.net.InetAddress;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;

import net.sf.jasperreports.components.barbecue.BarcodeProviders.ShipmentIdentificationNumberProvider;
import net.sf.jasperreports.engine.xml.JRPenFactory.Left;

import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.sql.Delete;
import org.hsqldb.types.Binary;

import com.common.share.MessageBox;
import com.common.share.SessionFactoryUtil;
import com.common.share.MessageBox.ButtonType;
import com.common.share.MessageBox.EventListener;
import com.example.productionSetup.ProductionFindWindow;
import com.vaadin.terminal.gwt.server.WebApplicationContext;
import com.vaadin.terminal.gwt.server.WebBrowser;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Window.Notification;

public class ProductionOpening extends Window 
{
	SessionBean sessionBean;

	private AbsoluteLayout mainLayout;

	
	boolean isUpdate=false;
	boolean isFind =false;
	
	// opening year
	private Label lblOpeningYear;
	private InlineDateField dOpeningYear;
	//production type
	private Label lblproductionType;
	private ComboBox cmbproductionType;
	//production Step
	private Label lblproductionStep ;
	private ComboBox cmbproductionstep;
	//joborder
	private Label lbljoborder=new Label();
	private ComboBox cmbjoborderNo=new ComboBox();
	
	//Finished Goods
	private Label lblFinishedGoods=new Label();
	private ComboBox cmbFinishedGoods=new ComboBox();
	
	//Semi Fifnished Goods 
	private Label lblsemiFinishedGoods=new Label();
	private ComboBox cmbSemiFinishedGoods=new ComboBox();
	
	//Input
	private Label lblInput;
	private ComboBox cmbInput;
	// Input Unit
	private Label lblInputUnit;
	private TextRead txtinputUnit;
	//mould name
	private Label lblmouldname;
	private ComboBox cmbmouldName;
	//Input Qty
	private Label lblInputQty;
	private AmountField txtInputqty;
	//Input Pcs
	private Label lblinputQtypcs;
	private AmountField txtInputqtypcs;
	//Input Rate
	private Label lblinputrate;
	private  AmountField  txtinputrate;
	//Out Put
	private Label lblOutPut;
	private ComboBox cmbOutput;
	//Out Put Unit
	private Label  lbloutputunit;
	private TextRead txtOutputUnit;
	//Out Put Qty
	private Label lblOutputQty;
	private AmountField txtOutPutQty;
	//Out Put Pcs
	private Label lblOutputQtyPcs;
	private AmountField txtoutputQtyPcs;
	//Out Put rate
	private Label lblOutPutRate;
	private AmountField txtOutputrate;
	
	private java.text.SimpleDateFormat df= new java.text.SimpleDateFormat("yyyy-MM-dd");
	private DecimalFormat dformat=new DecimalFormat("#0.00");
	private DecimalFormat decformat=new DecimalFormat("#0");

	private Label lblInitialLine  =new Label("_________________________________________________________________________________");
	private Label lblFinalline  =new Label("___________________________________________________________________________________________");

	private Label lblline;
	CommonButton button = new CommonButton("New", "Save", "Edit", "", "Refresh", "Find", "", "", "","Exit");
	String Autoid="";
	int transactionNo;

	private TextField txtstepid=new TextField();
	private TextField txttypeid=new TextField();
	private TextField txtjoborder=new TextField();
	private TextField txtfgId=new TextField();
	private TextField txtsemifgId=new TextField();
	private TextField txtmoulId=new TextField();
	private TextField txtinputId=new TextField();
	private TextField txtoutputId=new TextField();
	private TextField txtyear=new TextField();
	private TextField txtjobNo=new TextField();
	
	private TextRead txttransactionNo= new TextRead(); 
	String autoNo="";

	ArrayList<Component> allComp = new ArrayList<Component>();

	public ProductionOpening(SessionBean sessionBean) 
	{
		this.sessionBean=sessionBean;
		setContent(buildMainLayout());
		this.setResizable(false);
		this.setCaption("PROCESS OPENING:: " + sessionBean.getCompany());
		btnIni(true);
		componentIni(true);
		setEventAction();
		button.btnNew.focus();
		productiontypedataload() ;	
	}

	private void focusEnter()
	{
		allComp.add(cmbproductionType);
		allComp.add(cmbproductionstep);
		allComp.add(cmbjoborderNo);
		allComp.add(cmbFinishedGoods);
		allComp.add(cmbSemiFinishedGoods);
		
		allComp.add(cmbInput);
		allComp.add(txtinputUnit);
		allComp.add(txtInputqty);
		allComp.add(txtinputrate);
		allComp.add(cmbOutput);
		allComp.add(txtoutputQtyPcs);
		allComp.add(txtOutputrate);

		allComp.add(button.btnNew);
		allComp.add(button.btnSave);
		allComp.add(button.btnEdit);
		allComp.add(button.btnRefresh);
		allComp.add(button.btnFind);
		allComp.add(button.btnExit);

		new FocusMoveByEnter(this,allComp);
	}

	public void setEventAction()
	{
		button.btnNew.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				cmbproductionType.focus();
				focusEnter();
				newButtonEvent();
			}
		});

		button.btnEdit.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				if(sessionBean.isUpdateable()){
					updateButtonEvent();

				}else{
					getParent().showNotification("You are not Permitted to Update",Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

		button.btnSave.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				if(sessionBean.isSubmitable()){
					saveButtonEvent();
				}else{
					getParent().showNotification("You are not Permitted to Save",Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

		button.btnFind.addListener(new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				txtClear();
				isFind=true;
				findButtonEvent();
			}
		});

		button.btnRefresh.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				refreshButtonEvent();
			}
		});

		button.btnExit.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				close();
			}
		});

		cmbproductionType.addListener(new ValueChangeListener() {


			public void valueChange(ValueChangeEvent event) 
			{
				dataclear();   
				if(cmbproductionType.getValue()!=null)
				{
					stepdataload();	
					joborderLoad();
				}
				else
				{
				   cmbproductionstep.removeAllItems();
				   cmbjoborderNo.removeAllItems();
				}

			}
		});
		
		
		cmbproductionstep.addListener(new ValueChangeListener() 
		{

			public void valueChange(ValueChangeEvent event) 
			{
				dataclear(); 
				if(cmbproductionstep.getValue()!=null && cmbproductionType.getValue()!=null)
				{
					if(cmbproductionstep.getItemCaption(cmbproductionstep.getValue().toString()).contains("Moulding"))
					{
						lblInput.setValue("Raw Material Name :");
						lblOutPut.setValue("Semi Finished Goods");
						cmbmouldName.setEnabled(true);
						moulddataload();
						txtInputqty.setEnabled(true);
					}
					
					if(!cmbproductionstep.getItemCaption(cmbproductionstep.getValue().toString()).contains("Moulding"))
					{
						lblInput.setValue("Semi Finished Goods Name :");
						lblOutPut.setValue("Semi Finished Goods Sub Name");	
						cmbmouldName.setEnabled(false);
						cmbmouldName.removeAllItems();
						txtInputqty.setEnabled(false);	
					}			
				}
				
				else
				{
					cmbInput.removeAllItems();
					cmbmouldName.removeAllItems();
					cmbOutput.removeAllItems();	
					txtInputqty.setEnabled(false);
				}
			}
		});
		

		cmbInput.addListener(new ValueChangeListener() 
		{

			public void valueChange(ValueChangeEvent event) 
			{

				if(cmbInput.getValue()!=null && cmbproductionstep.getValue()!=null )
				{
					finalproducUnitLoad();	
				}
			}
		});

		cmbOutput.addListener(new ValueChangeListener() 
		{

			public void valueChange(ValueChangeEvent event) 
			{

				if(cmbOutput.getValue()!=null  && cmbproductionstep.getValue()!=null)
				{
					InitialproducUnitLoad();	
				}

			}
		});
		
		
		cmbjoborderNo.addListener(new ValueChangeListener() 
		{

			public void valueChange(ValueChangeEvent event) 
			{

				if(cmbjoborderNo.getValue()!=null)
				{
					fgdataLoad();	
				}

			}
		});
		
		cmbFinishedGoods.addListener(new ValueChangeListener() 
		{

			public void valueChange(ValueChangeEvent event) 
			{

				if(cmbFinishedGoods.getValue()!=null && cmbproductionstep.getValue()!=null && cmbproductionstep.getItemCaption(cmbproductionstep.getValue().toString()).contains("Moulding"))
				{
					cmbSemiFinishedGoods.removeAllItems();
					cmbSemiFinishedGoods.setEnabled(true);
					semDataLoad();	
				}
				
				else if(cmbFinishedGoods.getValue()!=null && cmbproductionstep.getValue()!=null && ! cmbproductionstep.getItemCaption(cmbproductionstep.getValue().toString()).contains("Moulding"))
				{
					cmbSemiFinishedGoods.setEnabled(false);
					rawdataload();
					semiFgDataLoad();	
				}
				
				else
				{
					cmbSemiFinishedGoods.removeAllItems();
					cmbSemiFinishedGoods.setEnabled(false);
				}
			}
		});
		
		cmbSemiFinishedGoods.addListener(new ValueChangeListener() 
		{

			public void valueChange(ValueChangeEvent event) 
			{

				if(cmbFinishedGoods.getValue()!=null && cmbproductionstep.getValue()!=null && cmbproductionstep.getItemCaption(cmbproductionstep.getValue().toString()).contains("Moulding"))
				{
					rawdataload();
					semiFgDataLoad();
				}

			}
		});
		
		
		txtInputqty.addListener(new ValueChangeListener() 
		{

			public void valueChange(ValueChangeEvent event) 
			{

				if(!txtInputqty.getValue().toString().isEmpty() && cmbproductionstep.getValue()!=null && cmbSemiFinishedGoods.getValue()!=null )
				{
					if(cmbproductionstep.getItemCaption(cmbproductionstep.getValue().toString()).contains("Moulding") && cmbmouldName.getValue()!=null)
					{
						List std=perTubeCalc( cmbSemiFinishedGoods.getValue().toString(),cmbInput.getValue().toString(),cmbmouldName.getValue().toString());

						if(std.iterator().hasNext())
						{
							Object[] element = (Object[]) std.iterator().next();
							System.out.println("Data Is"+ element[0].toString());
							
							if(Double.parseDouble(element[0].toString())>0)
							{
								double SqmQty=Double.parseDouble(txtInputqty.getValue().toString().isEmpty()?"0.0"
										:txtInputqty.getValue().toString())/(Double.parseDouble(element[0].toString()));
								txtInputqtypcs.setValue(decformat.format(SqmQty));
							}
							
							else
							{
								txtInputqtypcs.setValue(0);		
							}
							
							}

							
					}
						
					}	
				}
		});
		
		txtInputqtypcs.addListener(new ValueChangeListener() 
		{

			public void valueChange(ValueChangeEvent event) 
			{

				if(!txtInputqtypcs.getValue().toString().isEmpty() && cmbproductionstep.getValue()!=null && cmbSemiFinishedGoods.getValue()!=null )
				{
					if(cmbproductionstep.getItemCaption(cmbproductionstep.getValue().toString()).contains("Moulding") && cmbmouldName.getValue()!=null)
					{
						List std=perTubeCalc( cmbSemiFinishedGoods.getValue().toString(),cmbInput.getValue().toString(),cmbmouldName.getValue().toString());

						if(std.iterator().hasNext())
						{
							Object[] element = (Object[]) std.iterator().next();
							
							if(Double.parseDouble(element[0].toString())>0)
							{
								double SqmQty=Double.parseDouble(txtInputqty.getValue().toString().isEmpty()?"0.0"
										:txtInputqtypcs.getValue().toString())*(Double.parseDouble(element[0].toString()));

								txtInputqty.setValue(decformat.format(SqmQty));	
							}
							
							else
							{
								txtInputqty.setValue(0);		
							}

							
						}	
					}
						

					}	
				}
		});
	}
	

	public List perTubeCalc(String semifinished,String rawId,String mouldId)
	{
		Transaction tx = null;
		String sql = "";
		String productId = "";
		List std = null;
		String sql1="";

		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			 
			sql1= "select  ISNULL(SUM(b.Qty),0),0   from tbFinishedGoodsStandardInfo a "
				  +"inner join "
				  +"tbFinishedGoodsStandardDetails b "
				  +"on a.JobNo=b.JobNo where a.fGCode ='"+semifinished+"'  and b.RawItemCode like '"+rawId+"'  and a.declarationDate = "
				  +"(select MAX(declarationDate) from tbFinishedGoodsStandardInfo where fGCode like '"+semifinished+"') and  a.mouldName like '"+mouldId+"' ";
			System.out.println("Check Query: "+sql1);
			std=session.createSQLQuery(sql1).list();

		}
		catch(Exception exp)
		{
			this.getParent().showNotification("From perTubeCalc: "+exp,Notification.TYPE_ERROR_MESSAGE);
		}
		return std;
	}

	private void findButtonEvent() 
	{
		Window win = new ProductionOpeningFindWindow(sessionBean, txttypeid,txtstepid,txtjoborder,txtfgId,txtsemifgId,txtmoulId,txtinputId,txtoutputId,txtyear,txtjobNo);
		win.addListener(new Window.CloseListener() 
		{
			public void windowClose(CloseEvent e) 
			{
				if (txtyear.getValue().toString().length() > 0)
				{
					txtClear();
					String typeid=txttypeid.getValue().toString();
					String stepid=txtstepid.getValue().toString();
					String joborder=txtjoborder.getValue().toString();
					String fgId=txtfgId.getValue().toString();
					String semifgId=txtsemifgId.getValue().toString();
					String mouldId=txtmoulId.getValue().toString();
					String Input=txtinputId.getValue().toString();
					String Output=txtoutputId.getValue().toString();
					String year=txtyear.getValue().toString();
					String jobNo=txtjobNo.getValue().toString();
					
					findInitialise(typeid,stepid,joborder,fgId,semifgId,mouldId,Input,Output,year,jobNo);
				}
			}
		});

		this.getParent().addWindow(win);
	}


	private void findInitialise(String typeid,String stepid,String joborder,String fgId,String semifgid,String mouldid,String input,String output,String year,String jobNo  ) 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			String sql = "";
			
            sql= "select openingYear,productionType,productionStep,jobOrderNo,fgId,semiFgId,inputProductId,mouldId,inputQty,inputpcs,inputRate,outputProductId,outputUnit,  "
            	 +"outputpcs,outputRate,transactionNo from tbProductionOpening where  YEAR(openingYear) like '"+year+"' and productionStep like '"+stepid+"' and productionType like '"+typeid+"' "
            	 +"and jobOrderNo  like '"+joborder+"' and inputProductId like '"+input+"' and outputProductId like '"+output+"' and fgId like '"+fgId+"' and semiFgId  like  '"+semifgid+"' and transactionNo like '"+jobNo+"' ";


            
			
			System.out.println(sql);
			List led = session.createSQLQuery(sql).list();

			if (led.iterator().hasNext()) 
			{
				Object[] element = (Object[]) led.iterator().next();
				dOpeningYear.setValue(element[0]);
				cmbproductionType.setValue(element[1].toString());
				cmbproductionstep.setValue(element[2].toString());
				cmbjoborderNo.setValue(element[3].toString());
				cmbFinishedGoods.setValue(element[4].toString());
				cmbSemiFinishedGoods.setValue(element[5].toString());
				cmbInput.setValue(element[6].toString());
				cmbmouldName.setValue(element[7].toString());
				txtInputqty.setValue(element[8]);
				txtInputqtypcs.setValue(element[9]);
				txtinputrate.setValue(element[10]);
				cmbOutput.setValue(element[11] ) ;
				txtOutputUnit.setValue(element[12]);
				txtoutputQtyPcs.setValue(element[13]);
				txtOutputrate.setValue(element[14]);
				txttransactionNo.setValue(element[15]);
				
				
			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	private void finalproducUnitLoad() 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			List led=null;
			String sql="";
			
			if(cmbproductionstep.getItemCaption(cmbproductionstep.getValue().toString()).contains("Moulding"))
			{
				led = session.createSQLQuery("select 0,vUnitName from tbRawItemInfo where vRawItemCode like '"+cmbInput.getValue()+"' ").list();	
			}
			
			if(!cmbproductionstep.getItemCaption(cmbproductionstep.getValue().toString()).contains("Moulding"))
			{
				led = session.createSQLQuery("select 0, unit from tbSemiFgInfo where semiFgCode like '"+cmbInput.getValue()+"' ").list();	
			}
				
			if (led.iterator().hasNext()) 
			{
				Object[] element = (Object[]) led.iterator().next();
				txtinputUnit.setValue(element[1].toString());


			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}


	private void InitialproducUnitLoad() 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			List led=null;
			String sql="";
			
			if(cmbproductionstep.getItemCaption(cmbproductionstep.getValue().toString()).contains("Moulding"))
			{
				sql= "select 0, unit from tbSemiFgInfo where semiFgCode like '"+cmbOutput.getValue()+"' ";
				
				led = session.createSQLQuery(sql).list();
				if (led.iterator().hasNext()) 
				{
					Object[] element = (Object[]) led.iterator().next();
					txtOutputUnit.setValue(element[1].toString());

				}	
			}
			
			else
			{
				txtOutputUnit.setValue("");	
			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}
	
	
	private void fgdataLoad() 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			List led=null;
			String sql="";
			
			
				sql= "select fgId,(select vProductName from tbFinishedProductInfo where vProductId like fgId) fgName from tbJobOrderDetails "
					+ "where  orderNo like '"+cmbjoborderNo.getValue().toString()+"' order by fgName ";
				
				led = session.createSQLQuery(sql).list();
				Iterator<?>itr=led.iterator();
				
				cmbFinishedGoods.removeAllItems();
				while(itr.hasNext()) 
				{
					Object[] element = (Object[]) itr.next();
					cmbFinishedGoods.addItem(element[0].toString());
					cmbFinishedGoods.setItemCaption(element[0].toString(), element[1].toString());

			    }
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}
	
	private void semDataLoad() 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			List led=null;
			String sql="";
			
			
				sql= "select distinct  semiFgId,(select semiFgName from tbSemiFgInfo where semiFgCode like semiFgId)semifgname "
					 +"from  tbFinishedProductDetailsNew where fgId like '"+cmbFinishedGoods.getValue()+"' order by semiFgName ";
				
				led = session.createSQLQuery(sql).list();
				Iterator<?>itr=led.iterator();
				cmbSemiFinishedGoods.removeAllItems();
				while(itr.hasNext()) 
				{
					Object[] element = (Object[]) itr.next();
					cmbSemiFinishedGoods.addItem(element[0].toString());
					cmbSemiFinishedGoods.setItemCaption(element[0].toString(), element[1].toString());

			    }
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}
	

	private void productiontypedataload() 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			List led = session.createSQLQuery("select  productTypeId,productTypeName from tbProductionType").list();
			int a=led.size();
			System.out.println("size is"+a);

			Iterator itr=led.iterator();
			for(int i=0;i<a;i++) 
			{
				if(itr.hasNext())
				{
					Object[] element = (Object[]) itr.next();
					cmbproductionType.addItem(element[0]);
					System.out.println(element[0]);
					cmbproductionType.setItemCaption(element[0],element[1].toString());
				}

			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}
	
	
	private void joborderLoad() 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			String query="";
			
			  
			query=  "select distinct 0,  a.orderNo from tbJobOrderInfo a inner join "
					+"tbJobOrderDetails b on a.orderNo=b.orderNo where b.productionType like '"+cmbproductionType.getValue().toString()+"' order by a.orderNo ";

			List led = session.createSQLQuery(query).list();
			int a=led.size();
			System.out.println("size is"+a);
             cmbjoborderNo.removeAllItems();
			Iterator itr=led.iterator();
			for(int i=0;i<a;i++) 
			{
				if(itr.hasNext())
				{
					Object[] element = (Object[]) itr.next();
					cmbjoborderNo.addItem(element[1]);
					
				}

			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}
	
	
	
	

	private void  dataclear()
	{

		txtOutPutQty.setValue("");
		txtInputqty.setValue("");
		txtOutputUnit.setValue("");
		txtinputUnit.setValue("");
		txtOutputrate.setValue("");
		txtinputrate.setValue("");
		cmbOutput.setValue(null);
		cmbInput.setValue(null);
		cmbFinishedGoods.setValue(null);
		cmbSemiFinishedGoods.setValue(null);
		txtInputqtypcs.setValue("");
		txtoutputQtyPcs.setValue("");
	}

	
	private void stepdataload() 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			List led = session.createSQLQuery("select StepId,StepName from tbProductionStep where productionTypeId like '"+cmbproductionType.getValue()+"'").list();
			int a=led.size();
			System.out.println("size is"+a);
			cmbproductionstep.removeAllItems();
			Iterator itr=led.iterator();
			for(int i=0;i<a;i++) 
			{
				if(itr.hasNext())
				{
					Object[] element = (Object[]) itr.next();
					cmbproductionstep.addItem(element[0]);
					System.out.println(element[0]);
					cmbproductionstep.setItemCaption(element[0],element[1].toString());
				}

			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}
	
	
	private void rawdataload() 
	{
		Transaction tx = null;
		try 
		{
			
			System.out.println("Done");
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			String sql="";
			
			if(cmbproductionstep.getItemCaption(cmbproductionstep.getValue().toString()).contains("Moulding"))
			{
				
				sql=     "select distinct  b.RawItemCode,(select vRawItemName from tbRawItemInfo where vRawItemCode like b.RawItemCode ) RawItemName  from tbFinishedGoodsStandardInfo a inner join "
						 +"tbFinishedGoodsStandardDetails b on a.JobNo=b.JobNo where a.fGCode like '"+cmbSemiFinishedGoods.getValue()+"'  and a.declarationDate=(select  MAX(declarationDate) from tbFinishedGoodsStandardInfo where fGCode like '"+cmbSemiFinishedGoods.getValue().toString()+"') ";		
			}
			
			if(!cmbproductionstep.getItemCaption(cmbproductionstep.getValue().toString()).contains("Moulding"))
			{
			//sql= "select semiFgCode,semiFgName from  tbSemiFgInfo where productionTypeId like '"+cmbproductionType.getValue().toString()+"' order by semiFgName";	
			sql= " select distinct  semiFgId,semiFgName from tbFinishedProductDetailsNew where fgId like '"+cmbFinishedGoods.getValue()+"'  order by semiFgName ";
			}
			
			System.out.println("There Is No Data");
			
			List led = session.createSQLQuery(sql).list();
			int a=led.size();
			System.out.println("size is"+a);
			cmbInput.removeAllItems();
			Iterator itr=led.iterator();
			
			if(!led.isEmpty()) 
			{
				for(int i=0;i<a;i++) 
				{
					if(itr.hasNext())
					{
						Object[] element = (Object[]) itr.next();
						cmbInput.addItem(element[0]);
						System.out.println(element[0]);
						cmbInput.setItemCaption(element[0],element[1].toString());
					}

				}	
			}
			
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}
	
	private void semiFgDataLoad() 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			List led=null;

			led = session.createSQLQuery(" select distinct  semiFgId,semiFgName from tbFinishedProductDetailsNew where fgId like '"+cmbFinishedGoods.getValue()+"'  order by semiFgName").list();
			
			if(!cmbproductionstep.getItemCaption(cmbproductionstep.getValue().toString()).contains("Moulding"))
			{
				led = session.createSQLQuery("select distinct semiFgSubId,semiFgSubName from tbSemiFgSubInformation where semiFgId in (select semiFgCode from tbSemiFgInfo where productionTypeId like '"+cmbproductionType.getValue()+"') ").list();	
						
			}
			
			int a=led.size();
			System.out.println("size is"+a);
			cmbOutput.removeAllItems();
			Iterator itr=led.iterator();
			for(int i=0;i<a;i++) 
			{
				if(itr.hasNext())
				{
					Object[] element = (Object[]) itr.next();
					cmbOutput.addItem(element[0]);
					cmbOutput.setItemCaption(element[0],element[1].toString());
				}

			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}
	
	private void moulddataload() 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
            String sql="";
            sql= " select distinct  mouldid,mouldName from tbmouldInfo order by mouldName ";
			List led = session.createSQLQuery(sql).list();
			int a=led.size();
			System.out.println("size is"+a);
			cmbmouldName.removeAllItems();
			Iterator itr=led.iterator();
			for(int i=0;i<a;i++) 
			{
				if(itr.hasNext())
				{
					Object[] element = (Object[]) itr.next();
					cmbmouldName.addItem(element[0]);
					System.out.println(element[0]);
					cmbmouldName.setItemCaption(element[0],element[1].toString());
				}

			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}
	
	

	private void cmbFinishedGoodDataLoad() 
	{
		//cmbFinishedGood.removeAllItems();

		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			List led = session.createSQLQuery("select a.fGCode,b.vProductName from tbFinishedGoodsStandardInfo a "+
					" inner join tbFinishedProductInfo b on a.fGCode=b.vProductId "+
					" where fGCode in(select vProductId from tbFinishedProductInfo where vProductionTypeId like '"+cmbproductionType.getValue()+"') order by a.fGCode").list();
			int a = led.size();

			Iterator itr = led.iterator();

			for(int i=0;i<a;i++) 
			{
				if(itr.hasNext())
				{
					Object[] element = (Object[]) itr.next();

					//cmbFinishedGood.addItem(element[0].toString());
					//cmbFinishedGood.setItemCaption(element[0].toString(),element[1].toString());
				}
			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	private void initialFinalDataload() 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();


			System.out.println("Shoaib Akhter");
			String step=cmbproductionstep.getItemCaption(cmbproductionstep.getValue().toString());
			String ProductionType=cmbproductionType.getItemCaption(cmbproductionType.getValue().toString());
			dataload (step,ProductionType);


		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}


	private void dataload( String step,String ProductionType) 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();


			System.out.println("Riaz Uddin Badsha");
			RawmaterialDataload(step,ProductionType);
			//TubeDataLoad(step,ProductionType);

		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}


	private void RawmaterialDataload(String step,String ProductionType) 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			List led = null ;

			String sql = "";

			
			/*sql=" select b.RawItemCode,(select vRawItemName from tbRawItemInfo where vRawItemCode=b.RawItemCode)as name from tbFinishedGoodsStandardInfo a "+
					"inner join tbFinishedGoodsStandardDetails b "+
					"on a.JobNo=b.JobNo where a.fGCode like '"+cmbFinishedGood.getValue()+"' and a.declarationDate=(select MAX(declarationDate) from tbFinishedGoodsStandardInfo  where fGCode like '"+cmbFinishedGood.getValue()+"')";
			*/
			led = session.createSQLQuery(sql).list();

			int a=led.size();
			System.out.println("size is"+a);
			cmbOutput.removeAllItems();
			Iterator itr=led.iterator();
			for(int i=0;i<a;i++) 
			{
				if(itr.hasNext())
				{
					Object[] element = (Object[]) itr.next();
					cmbOutput.addItem(element[0]);
					System.out.println(element[0]);
					cmbOutput.setItemCaption(element[0],element[1].toString());
				}

			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}



/*	private void TubeDataLoad(String step,String ProductionType) 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			List led = null ;
	
			String sql = "";
			
			sql=" select b.RawItemCode,(select vRawItemName from tbRawItemInfo where vRawItemCode=b.RawItemCode)as name from tbFinishedGoodsStandardInfo a "+
					"inner join tbFinishedGoodsStandardDetails b "+
					"on a.JobNo=b.JobNo where a.fGCode like '"+cmbFinishedGood.getValue()+"' and a.declarationDate=(select MAX(declarationDate) from tbFinishedGoodsStandardInfo where fGCode like '"+cmbFinishedGood.getValue()+"')";
			led = session.createSQLQuery(sql).list();
			int a=led.size();
			System.out.println("sql: "+sql);
			cmbSemiProduct.removeAllItems();
			Iterator itr=led.iterator();
			for(int i=0;i<a;i++) 
			{
				if(itr.hasNext())
				{
					Object[] element = (Object[]) itr.next();
					cmbSemiProduct.addItem(element[0]);
					System.out.println(element[0]);
					cmbSemiProduct.setItemCaption(element[0],element[1].toString());
				}

			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}*/




	private void refreshButtonEvent()
	{
		isUpdate=false;
		componentIni(true);
		btnIni(true);
		txtClear();
	}


	/*private void saveButtonEvent() 
	{
		if(cmbproductionType.getValue()!=null)
		{
			if( cmbproductionstep.getValue()!=null)
			{
				if(cmbjoborderNo.getValue()!=null)
				{
					
					if(cmbFinishedGoods.getValue()!=null)
					{
						if(cmbInput.getValue()!=null || cmbOutput.getValue()!=null  )
						{

							if(!txtInputqtypcs.getValue().toString().isEmpty() || ! txtoutputQtyPcs.getValue().toString().isEmpty() )
							{
								if(isUpdate)
								{
									MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to update product information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
									mb.show(new EventListener()
									{
										public void buttonClicked(ButtonType buttonType)
										{
											if(buttonType == ButtonType.YES)
											{
												updateData();
												button.btnNew.focus();
												isUpdate=false;
												txtClear();
												btnIni(true);
											}
										}
									});		
								}
								else
								{
									MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to Save information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
									mb.show(new EventListener()
									{
										public void buttonClicked(ButtonType buttonType)
										{
											if(buttonType == ButtonType.YES)
											{
												insertData();
												btnIni(true);
												componentIni(true);
												txtClear();
												button.btnNew.focus();
											}
										}
									});		
								}	
							}

							else
							{
								this.getParent().showNotification("Warning :", "Please Provide Your Desire Qty ", Notification.TYPE_WARNING_MESSAGE);	
							}


						}

						else
						{
							this.getParent().showNotification("Warning :", "Please Select Finished Goods OR Raw Materials", Notification.TYPE_WARNING_MESSAGE);
						}	
					}
					else
					{
						this.getParent().showNotification("Warning :", "Please Select Finished Goods Name", Notification.TYPE_WARNING_MESSAGE);	
					}
					
				}
				else
				{
					this.getParent().showNotification("Warning :", "Please Select Job Order No", Notification.TYPE_WARNING_MESSAGE);	
				}
				
			}

			else
			{
				this.getParent().showNotification("Warning :", "Please Select Production Step", Notification.TYPE_WARNING_MESSAGE);

			}
		}

		else{
			this.getParent().showNotification("Warning :", "Please Select Production Type", Notification.TYPE_WARNING_MESSAGE);

		}
	}*/
	
	
	

	private void saveButtonEvent() 
	{
		if(cmbproductionType.getValue()!=null)
		{
			if( cmbproductionstep.getValue()!=null)
			{
				if(cmbjoborderNo.getValue()!=null)
				{
					
					if(cmbFinishedGoods.getValue()!=null)
					{
						
						if(cmbproductionstep.getItemCaption(cmbproductionstep.getValue().toString()).contains("Moulding") && cmbSemiFinishedGoods.getValue()!=null )
						{
							if(cmbInput.getValue()!=null || cmbOutput.getValue()!=null  )
							{

								if(!txtInputqtypcs.getValue().toString().isEmpty() || ! txtoutputQtyPcs.getValue().toString().isEmpty() )
								{
									if(isUpdate)
									{
										final MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to update product information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
										mb.show(new EventListener()
										{
											public void buttonClicked(ButtonType buttonType)
											{
												System.out.println("Bahar");
												if(buttonType == ButtonType.YES)
												{
													mb.buttonLayout.getComponent(0).setEnabled(false);
													
													Transaction tx=null;
													Session session = SessionFactoryUtil.getInstance().getCurrentSession();
													tx = session.beginTransaction();
													if(deleteData(session,tx))
													{
														insertData();
														button.btnNew.focus();
														isUpdate=false;
														txtClear();
														btnIni(true);	
													}
												}
											}
										});		
									}
									else
									{
										final MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to Save information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
										mb.show(new EventListener()
										{
											public void buttonClicked(ButtonType buttonType)
											{
												if(buttonType == ButtonType.YES)
												{
													mb.buttonLayout.getComponent(0).setEnabled(false);
													insertData();
													btnIni(true);
													componentIni(true);
													txtClear();
													button.btnNew.focus();
												}
											}
										});		
									}	
								}

								else
								{
									this.getParent().showNotification("Warning :", "Please Provide Your Desire Qty ", Notification.TYPE_WARNING_MESSAGE);	
								}


							}

							else
							{
								this.getParent().showNotification("Warning :", "Please Select Finished Goods OR Raw Materials", Notification.TYPE_WARNING_MESSAGE);
							}	
						}
						
						else if (cmbproductionstep.getItemCaption(cmbproductionstep.getValue().toString()).contains("Moulding") && cmbSemiFinishedGoods.getValue()==null)
						{
							this.getParent().showNotification("Warning :", "Please Select SemiFinished Product", Notification.TYPE_WARNING_MESSAGE);
							
						}
						
						if(!cmbproductionstep.getItemCaption(cmbproductionstep.getValue().toString()).contains("Moulding"))
						{
							if(cmbInput.getValue()!=null || cmbOutput.getValue()!=null  )
							{

								if(!txtInputqtypcs.getValue().toString().isEmpty() || ! txtoutputQtyPcs.getValue().toString().isEmpty() )
								{
									if(isUpdate)
									{
										MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to update product information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
										mb.show(new EventListener()
										{
											public void buttonClicked(ButtonType buttonType)
											{
												if(buttonType == ButtonType.YES)
												{
													updateData();
													button.btnNew.focus();
													isUpdate=false;
													txtClear();
													btnIni(true);
												}
											}
										});		
									}
									else
									{
										MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to Save information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
										mb.show(new EventListener()
										{
											public void buttonClicked(ButtonType buttonType)
											{
												if(buttonType == ButtonType.YES)
												{
													insertData();
													btnIni(true);
													componentIni(true);
													txtClear();
													button.btnNew.focus();
												}
											}
										});		
									}	
								}

								else
								{
									this.getParent().showNotification("Warning :", "Please Provide Your Desire Qty ", Notification.TYPE_WARNING_MESSAGE);	
								}


							}

							else
							{
								this.getParent().showNotification("Warning :", "Please Select Finished Goods OR Raw Materials", Notification.TYPE_WARNING_MESSAGE);
							}	
						}
								
					}
					else
					{
						this.getParent().showNotification("Warning :", "Please Select Finished Goods Name", Notification.TYPE_WARNING_MESSAGE);	
					}
					
				}
				else
				{
					this.getParent().showNotification("Warning :", "Please Select Job Order No", Notification.TYPE_WARNING_MESSAGE);	
				}
				
			}

			else
			{
				this.getParent().showNotification("Warning :", "Please Select Production Step", Notification.TYPE_WARNING_MESSAGE);

			}
		}

		else{
			this.getParent().showNotification("Warning :", "Please Select Production Type", Notification.TYPE_WARNING_MESSAGE);

		}
	}
	
	
	public boolean deleteData(Session session,Transaction tx)
	{


		try
		{
			System.out.println("Atik hasan");
			session.createSQLQuery(" delete from tbProductionOpening where transactionNo like '"+txttransactionNo.getValue().toString()+"' ").executeUpdate();
			return true;

		}
		catch(Exception exp){

			this.getParent().showNotification("Error4",exp+"",Notification.TYPE_ERROR_MESSAGE);
			return false;
		}

	}





	private void insertData()
	{
		Transaction tx = null;
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			System.out.println("Username : "+sessionBean.getUserName());
			System.out.println("User IP : "+sessionBean.getUserIp());

			String productyiontype= cmbproductionType.getValue().toString();
			String productionstep=cmbproductionstep.getValue().toString();
			String FinishGoods="";
			Double  RawRate=0.00;
			Double SemiRate=0.00;
			
			String inputId="";
			String inputname="";
			String Type="";
			String Step="";
			String joborder="";
			String FgId="";
			String fgName="";
			String semifgId="";
			String semifgname="";
			String inputUnit="";
			String mouldId="";
			String mouldName="";
			double inputqty=0.00;
			double inputpcs=0.00;
			double inputrate=0.00;
			
			String outputId="";
			String outPutName="";
			String outputUnit="";
			
			double outpcs=0.00;
			double outqty=0.00;
			double outputrate=0.00;
			
			/*String InputId="";
			String Inputname="";*/
			
			if(cmbInput.getValue()!=null)
			{
				inputId=cmbInput.getValue().toString();
				inputname=cmbInput.getItemCaption(cmbInput.getValue().toString());
			}
			
			if(cmbproductionType.getValue()!=null)
			{
				Type =cmbproductionType.getValue().toString();	
			}
			
			if(cmbproductionstep.getValue()!=null)
			{
				Step=cmbproductionstep.getValue().toString(); 	
			}
			
			if(cmbjoborderNo.getValue()!=null)
			{
				joborder=cmbjoborderNo.getValue().toString();	
			}
			
			if(cmbFinishedGoods.getValue()!=null)
			{
				FgId=cmbFinishedGoods.getValue().toString();
				fgName=cmbFinishedGoods.getItemCaption(cmbFinishedGoods.getValue().toString());
			}
			
			if(cmbSemiFinishedGoods.getValue()!=null)
			{
				semifgId=cmbSemiFinishedGoods.getValue().toString();
				semifgname=cmbSemiFinishedGoods.getItemCaption(cmbSemiFinishedGoods.getValue().toString());
			}
			
			if(cmbInput.getValue()!=null)
			{
				inputId=cmbInput.getValue().toString();
				inputname=cmbInput.getItemCaption(cmbInput.getValue().toString());
			}
			
			if(!txtinputUnit.getValue().toString().isEmpty())
			{
				inputUnit=txtinputUnit.getValue().toString();  	
			}
			
			if(cmbmouldName.getValue()!=null)
			{
				mouldId=cmbmouldName.getValue().toString();
				mouldName=cmbmouldName.getItemCaption(cmbmouldName.getValue().toString());
			}
			
			if(!txtInputqty.getValue().toString().isEmpty())
			{
			   inputqty= Double.parseDouble(txtInputqty.getValue().toString()) ;	
			}
			
			if(!txtInputqtypcs.getValue().toString().isEmpty())
			{
				inputpcs=Double.parseDouble(txtInputqtypcs.getValue().toString());
			}
			
			if(!txtinputrate.getValue().toString().isEmpty())
			{
			   inputrate=Double.parseDouble(txtinputrate.getValue().toString()); 	
			}
			
			if(cmbOutput.getValue()!=null)
			{
				outputId=cmbOutput.getValue().toString();
				outPutName=cmbOutput.getItemCaption(cmbOutput.getValue().toString());
			}
			
			if(!txtOutputUnit.getValue().toString().isEmpty())
			{
				outputUnit=txtOutputUnit.getValue().toString();	
			}
			
			if(!txtoutputQtyPcs.getValue().toString().isEmpty())
			{
				outpcs=Double.parseDouble(txtoutputQtyPcs.getValue().toString()) ;	
			}
			
			if(!txtoutputQtyPcs.getValue().toString().isEmpty())
			{
				outputUnit=txtOutputUnit.getValue().toString();	
			}
			
			if(!txtOutputrate.getValue().toString().isEmpty())
			{
				outputrate=Double.parseDouble(txtOutputrate.getValue().toString()) ;
			}
			
			if(!isUpdate)
			{
				transactionNo=autotransactionNo();	
			}
			else
			{
				transactionNo=Integer.parseInt(txttransactionNo.getValue().toString()) ;	
			}
			
			System.out.println("Rabiul hasanm");
			
			String sql= "insert into tbProductionOpening (openingYear,productionType,productionStep,inputProductId,inputUnit,inputQty,outputProductId,"
					+ " outputUnit,outputQty,outputpcs,userIp,userId,entryTime,RunningFlag,inputrate,outputrate,fgId,jobOrderNo,semiFgId,inputpcs,inputProductName,outputProductName,semiFgName,FgName,mouldId,mouldName,transactionNo) values "
					+" ('"+ df.format(dOpeningYear.getValue())+"','"+productyiontype+"','"+productionstep+"','"+inputId+"','"+inputUnit+"','"+inputqty+"' , "
					+"'"+outputId+"','"+outputUnit+"','"+outqty+"','"+outpcs+"','"+sessionBean.getUserIp()+"','"+sessionBean.getUserId()+"',getdate(),1, "
					+" '"+inputrate+"','"+outputrate+"','"+FgId+"','"+joborder+"','"+semifgId+"','"+inputpcs+"','"+inputname+"','"+outPutName+"','"+semifgname+"','"+fgName+"','"+mouldId+"','"+mouldName+"','"+transactionNo+"' )";
			
		
			session.createSQLQuery(sql).executeUpdate();
			tx.commit();

			this.getParent().showNotification("All Information Save successfully.");
			btnIni(true);
		}
		catch(Exception exp)
		{
			this.getParent().showNotification("Error ",exp+"",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	public void updateData() 
	{
		Transaction tx = null;
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			WebApplicationContext context = ((WebApplicationContext) getApplication().getContext());
			WebBrowser webBrowser = context.getBrowser();
			sessionBean.setUserIp(webBrowser.getAddress());    

			InetAddress inetAddress =InetAddress.getByName(webBrowser.getAddress().toString());//get the host Inet using ip
			System.out.println ("Host Name: "+ inetAddress.getHostName());//display the host
			
			String rawproduct="";
			if(cmbOutput.getValue()!=null)
			{
				rawproduct=cmbOutput.getValue().toString();	
			}
			String FinishProduct="";
			
			if(cmbInput.getValue()!=null)
			{
				FinishProduct=cmbInput.getValue().toString();	
			}
			
			/*String updatesql= " update tbProductionOpening set productionStep ='"+cmbproductionstep.getValue().toString()+"' ,productionType='"+cmbproductionType.getValue().toString()+"', rawProduct='"+rawproduct+"',finishedProduct='"+FinishProduct+"' ,rawQty='"+txtRawQtySqm.getValue().toString()+"' ,finishedQty='"+txtSemiproductQtySqm.getValue()+"' ,joborderNo='"+cmbjoborderNo.getValue().toString()+"',fgId ='"+cmbFinishedGood.getValue().toString()+"' "
					+" where Autoid like '"+Autoid+"'  ";
			session.createSQLQuery(updatesql).executeUpdate();
			System.out.println("updateQuery : "+updatesql);
			tx.commit();
			this.getParent().showNotification("Update successfully.");*/
			
		}
		catch(Exception exp)
		{
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}	
	}

	private void updateButtonEvent()
	{
		if(cmbproductionType.getValue()!=null)
		{
			isUpdate = true;
			btnIni(false);
			componentIni(false);

		}
		else
		{
			this.getParent().showNotification("Update Failed","There are no data for update.",Notification.TYPE_WARNING_MESSAGE);
		}
	}

	private void newButtonEvent() 
	{
		componentIni(false);
		btnIni(false);
		txtClear();
		autotransactionNo();
		

	}
	
	private int  autotransactionNo()
	
	{
		Session session=SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx=null;
		tx=session.beginTransaction();
		
		
		String sql= "select ISNULL(MAX(transactionNo),0)+1 tranactionNo  from tbProductionOpening ";
		List lst=session.createSQLQuery(sql).list();
		Iterator<?>itr=lst.iterator();
		
		if(itr.hasNext())
		{
			 int autoNo= (Integer) itr.next();	
			
			 return autoNo ;
		}
		
		
		return 0;
		
	}

	public void newBtnData(int flag)
	{
		
			Transaction tx = null;
			try
			{
				Session session = SessionFactoryUtil.getInstance().getCurrentSession();
				tx = session.beginTransaction();
				String sql = "select isnull(max(cast(SUBSTRING(productTypeId,4,LEN(productTypeId))as int)),0)+1 as cat from tbProductionType";
				Iterator iter = session.createSQLQuery(sql).list().iterator();
				int num = 0;
				if (iter.hasNext()) 
				{
					num = Integer.parseInt(iter.next().toString());
					//groupRead.setValue("PT-"+num);
				}
			}
			catch(Exception ex)
			{
				this.getParent().showNotification("Error",ex+"",Notification.TYPE_ERROR_MESSAGE);
			}
		
		
	}
	
	/*	private boolean deleteData(Session session,Transaction tx){
	try{
		session.createSQLQuery("delete from tbFgOpening where fgCode like '"+cmbFgName.getValue()+"' and DATEPART(YEAR, openingYear) like '"+ dfYear.format(dOpeningYear.getValue())+"'").executeUpdate();
		return true;
	}
	catch(Exception exp){
		this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
		return false;
	}
}*/
 

	public void txtClear()
	{
		cmbproductionType.setValue(null);
		cmbproductionstep.setValue(null);
		//cmbFinishedGood.setValue(null);
		cmbInput.setValue(null);
		txtinputUnit.setValue("");
		txtInputqty.setValue("");
		txtInputqtypcs.setValue("");
		cmbOutput.setValue(null);
		txtOutputUnit.setValue("");
		txtOutPutQty.setValue("");
		txtoutputQtyPcs.setValue("");
		txtOutputrate.setValue("");
		txtinputrate.setValue("");
		cmbjoborderNo.setValue(null);
		cmbmouldName.setEnabled(false);
		cmbFinishedGoods.setValue(null);
		cmbSemiFinishedGoods.setValue(null);
	}

	private void componentIni(boolean b) 
	{
		dOpeningYear.setEnabled(!b);
		cmbproductionType.setEnabled(!b);
		cmbproductionstep.setEnabled(!b);
		//cmbFinishedGood.setEnabled(!b);
		cmbInput.setEnabled(!b);
		txtinputUnit.setEnabled(!b);
		txtInputqty.setEnabled(!b);
		txtInputqtypcs.setEnabled(!b);
		cmbOutput.setEnabled(!b);
		txtOutputUnit.setEnabled(!b);
		txtOutPutQty.setEnabled(!b);
		txtoutputQtyPcs.setEnabled(!b);
		txtOutputrate.setEnabled(!b);
		txtinputrate.setEnabled(!b);
		cmbjoborderNo.setEnabled(!b);
		cmbFinishedGoods.setEnabled(!b);
		cmbSemiFinishedGoods.setEnabled(!b);
		txtInputqty.setEnabled(false);
	}

	private void btnIni(boolean t)
	{
		button.btnNew.setEnabled(t);
		button.btnEdit.setEnabled(t);
		button.btnSave.setEnabled(!t);
		button.btnRefresh.setEnabled(!t);
		button.btnDelete.setEnabled(t);
		button.btnFind.setEnabled(t);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() 
	{
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("615px");
		setHeight("710px");

		// lblOpeningYear
		lblOpeningYear = new Label();
		lblOpeningYear.setImmediate(false);
		lblOpeningYear.setWidth("-1px");
		lblOpeningYear.setHeight("-1px");
		lblOpeningYear.setValue("Opening Year :");

		// dOpeningYear
		dOpeningYear = new InlineDateField();
		dOpeningYear.setImmediate(true);
		dOpeningYear.setDateFormat("yyyy");
		dOpeningYear.setWidth("-1px");
		dOpeningYear.setHeight("-1px");
		dOpeningYear.setInvalidAllowed(false);
		dOpeningYear.setResolution(6);

		lblproductionType = new Label("Production Type :");
		lblproductionType.setImmediate(false);
		lblproductionType.setWidth("-1px");
		lblproductionType.setHeight("-1px");		

		cmbproductionType= new ComboBox();
		cmbproductionType.setImmediate(true);
		cmbproductionType.setWidth("280px");
		cmbproductionType.setNullSelectionAllowed(true);	
		cmbproductionType.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);

		lblproductionStep = new Label("Production Step :");
		lblproductionStep.setImmediate(false);
		lblproductionStep.setWidth("-1px");
		lblproductionStep.setHeight("-1px");		

		cmbproductionstep= new ComboBox();
		cmbproductionstep.setImmediate(true);
		cmbproductionstep.setWidth("280px");
		cmbproductionstep.setNullSelectionAllowed(true);
		cmbproductionstep.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		cmbproductionstep.setNewItemsAllowed(false);		

		lbljoborder = new Label("Job Order No :");
		lbljoborder.setImmediate(false);
		lbljoborder.setWidth("-1px");
		lbljoborder.setHeight("-1px");		

		cmbjoborderNo= new ComboBox();
		cmbjoborderNo.setImmediate(true);
		cmbjoborderNo.setWidth("280px");
		cmbjoborderNo.setNullSelectionAllowed(true);
		cmbjoborderNo.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		cmbjoborderNo.setNewItemsAllowed(false);
		
		lblFinishedGoods = new Label("Finished Goods:");
		lblFinishedGoods.setImmediate(false);
		lblFinishedGoods.setWidth("-1px");
		lblFinishedGoods.setHeight("-1px");		

		cmbFinishedGoods= new ComboBox();
		cmbFinishedGoods.setImmediate(true);
		cmbFinishedGoods.setWidth("280px");
		cmbFinishedGoods.setNullSelectionAllowed(true);
		cmbFinishedGoods.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		cmbFinishedGoods.setNewItemsAllowed(false);
		
		lblsemiFinishedGoods = new Label("Semi Finished Goods:");
		lblsemiFinishedGoods.setImmediate(false);
		lblsemiFinishedGoods.setWidth("-1px");
		lblsemiFinishedGoods.setHeight("-1px");		

		cmbSemiFinishedGoods= new ComboBox();
		cmbSemiFinishedGoods.setImmediate(true);
		cmbSemiFinishedGoods.setWidth("280px");
		cmbSemiFinishedGoods.setNullSelectionAllowed(true);
		cmbSemiFinishedGoods.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		cmbSemiFinishedGoods.setNewItemsAllowed(false);
		
		
		lblFinalline = new Label("<font color='yellow'>-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.--.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-</font>",Label.CONTENT_XHTML);
		lblFinalline.setImmediate(true);
		lblFinalline.setWidth("-1px");
		lblFinalline.setHeight("-1px");

		// Finisshed Goods

		lblInput = new Label("Raw Material Name :");
		lblInput.setImmediate(false);
		lblInput.setWidth("-1px");
		lblInput.setHeight("-1px");	

		cmbInput= new ComboBox();
		cmbInput.setImmediate(true);
		cmbInput.setWidth("280px");
		cmbInput.setNullSelectionAllowed(true);
		cmbInput.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		cmbInput.setNewItemsAllowed(false);

		lblInputUnit = new Label("Unit :");
		lblInputUnit.setImmediate(false);
		lblInputUnit.setWidth("-1px");
		lblInputUnit.setHeight("-1px");	

		txtinputUnit = new TextRead();
		txtinputUnit.setImmediate(false);
		txtinputUnit.setWidth("140px");
		txtinputUnit.setHeight("24px");
		
		
		lblmouldname = new Label("Mould Name :");
		lblmouldname.setImmediate(false);
		lblmouldname.setWidth("-1px");
		lblmouldname.setHeight("-1px");	

		cmbmouldName= new ComboBox();
		cmbmouldName.setImmediate(true);
		cmbmouldName.setWidth("280px");
		cmbmouldName.setNullSelectionAllowed(true);
		cmbmouldName.setNewItemsAllowed(false);
		cmbmouldName.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		cmbmouldName.setEnabled(false);
		
		

		lblInputQty = new Label("Qty:");
		lblInputQty.setImmediate(false);
		lblInputQty.setWidth("-1px");
		lblInputQty.setHeight("-1px");		

		txtInputqty = new AmountField();
		txtInputqty.setImmediate(true);
		txtInputqty.setWidth("100px");
		txtInputqty.setHeight("24px");		

		lblinputQtypcs = new Label("Qty (Pcs) :");
		lblinputQtypcs.setImmediate(false);
		lblinputQtypcs.setWidth("-1px");
		lblinputQtypcs.setHeight("-1px");		

		txtInputqtypcs = new AmountField();
		txtInputqtypcs.setImmediate(true);
		txtInputqtypcs.setWidth("100px");
		txtInputqtypcs.setHeight("24px");		

		lblinputrate = new Label("Rate :");
		lblinputrate.setImmediate(false);
		lblinputrate.setWidth("-1px");
		lblinputrate.setHeight("-1px");	

		txtinputrate = new AmountField();
		txtinputrate.setImmediate(false);
		txtinputrate.setWidth("100px");
		txtinputrate.setHeight("24px");

		lblInitialLine = new Label("-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.--.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-");
		lblInitialLine.setImmediate(false);
		lblInitialLine.setWidth("-1px");
		lblInitialLine.setHeight("-1px");

		//Raw Material Info
		lblOutPut = new Label("Semi Finishd Goods:");
		lblOutPut.setImmediate(false);
		lblOutPut.setWidth("-1px");
		lblOutPut.setHeight("-1px");		

		cmbOutput= new ComboBox();
		cmbOutput.setImmediate(true);
		cmbOutput.setWidth("280px");
		cmbOutput.setNullSelectionAllowed(true);
		cmbOutput.setNewItemsAllowed(false);	
		cmbOutput.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);

		lbloutputunit = new Label("Unit:");
		lbloutputunit.setImmediate(false);
		lbloutputunit.setWidth("-1px");
		lbloutputunit.setHeight("-1px");

		txtOutputUnit = new TextRead();
		txtOutputUnit.setImmediate(false);
		txtOutputUnit.setWidth("140px");
		txtOutputUnit.setHeight("24px");

		lblOutputQty = new Label("Qty:");
		lblOutputQty.setImmediate(false);
		lblOutputQty.setWidth("-1px");
		lblOutputQty.setHeight("-1px");

		txtOutPutQty = new AmountField();
		txtOutPutQty.setImmediate(true);
		txtOutPutQty.setWidth("100px");
		txtOutPutQty.setHeight("24px");		

		lblOutputQtyPcs = new Label("Qty (Pcs) :");
		lblOutputQtyPcs.setImmediate(false);
		lblOutputQtyPcs.setWidth("-1px");
		lblOutputQtyPcs.setHeight("-1px");

		txtoutputQtyPcs = new AmountField();
		txtoutputQtyPcs.setImmediate(true);
		txtoutputQtyPcs.setWidth("100px");
		txtoutputQtyPcs.setHeight("24px");

		lblOutPutRate = new Label("Rate:");
		lblOutPutRate.setImmediate(false);
		lblOutPutRate.setWidth("-1px");
		lblOutPutRate.setHeight("-1px");

		txtOutputrate = new AmountField();
		txtOutputrate.setImmediate(false);
		txtOutputrate.setWidth("100px");
		txtOutputrate.setHeight("24px");		

		lblline= new Label();
		lblline.setImmediate(false);
		lblline.setWidth("-1px");
		lblline.setHeight("-1px");
		lblline.setContentMode(Label.CONTENT_XHTML);
		lblline.setValue("<b><font color='#e65100'>======================================================================================================================</font></b>");

		mainLayout.addComponent(lblOpeningYear, "top:40.0px;left:70.0px;");
		mainLayout.addComponent(dOpeningYear, "top:38.0px;left:250.0px;");

		mainLayout.addComponent(lblproductionType, "top:70.0px;left:70.0px;");
		mainLayout.addComponent(cmbproductionType, "top:68.0px;left:250.0px;");

		mainLayout.addComponent(lblproductionStep, "top:100.0px;left:70.0px;");
		mainLayout.addComponent(cmbproductionstep, "top:98.0px;left:250.0px;");

		mainLayout.addComponent(lbljoborder, "top:130.0px;left:70.0px;");
		mainLayout.addComponent(cmbjoborderNo, "top:128.0px;left:250.0px;");
		
		mainLayout.addComponent(lblFinishedGoods, "top:160.0px;left:70.0px;");
		mainLayout.addComponent(cmbFinishedGoods, "top:158.0px;left:250.0px;");
		
		mainLayout.addComponent(lblsemiFinishedGoods, "top:190.0px;left:70.0px;");
		mainLayout.addComponent(cmbSemiFinishedGoods, "top:188.0px;left:250.0px;");
		
		
		mainLayout.addComponent(lblFinalline, "top:218.0px;left:0.0px;");

		mainLayout.addComponent(lblInput, "top:250.0px;left:70.0px;");
		mainLayout.addComponent(cmbInput, "top:248.0px;left:250.0px;");

		mainLayout.addComponent(lblInputUnit, "top:280.0px;left:70.0px;");
		mainLayout.addComponent(txtinputUnit, "top:278.0px;left:250.0px;");
		
		mainLayout.addComponent(lblmouldname, "top:310.0px;left:70.0px;");
		mainLayout.addComponent(cmbmouldName, "top:308.0px;left:250.0px;");

		mainLayout.addComponent(lblInputQty, "top:340.0px;left:70.0px;");
		mainLayout.addComponent(txtInputqty, "top:338.0px;left:250.0px;");

		mainLayout.addComponent(lblinputQtypcs, "top:370.0px;left:70.0px;");
		mainLayout.addComponent(txtInputqtypcs, "top:368.0px;left:250.0px;");

		mainLayout.addComponent(lblinputrate, "top:400.0px;left:70.0px;");
		mainLayout.addComponent(txtinputrate, "top:398.0px;left:250.0px;");

		mainLayout.addComponent(lblInitialLine, "top:428.0px;left:0.0px;");

		mainLayout.addComponent(lblOutPut, "top:460.0px;left:70.0px;");
		mainLayout.addComponent(cmbOutput, "top:458.0px;left:250.0px;");

		mainLayout.addComponent(lbloutputunit, "top:490.0px;left:70.0px;");
		mainLayout.addComponent(txtOutputUnit, "top:488.0px;left:250.0px;");

		/*mainLayout.addComponent(lblOutputQty, "top:520.0px;left:70.0px;");
		mainLayout.addComponent(txtOutPutQty, "top:518.0px;left:250.0px;");*/

		mainLayout.addComponent(lblOutputQtyPcs, "top:520.0px;left:70.0px;");
		mainLayout.addComponent(txtoutputQtyPcs, "top:518.0px;left:250.0px;");

		mainLayout.addComponent(lblOutPutRate, "top:550.0px;left:70.0px;");
		mainLayout.addComponent(txtOutputrate, "top:548.0px;left:250.0px;");

		mainLayout.addComponent(lblline, "top:578.0px;left:0.0px;");
		mainLayout.addComponent(button, "top:608.0px;left:12.0px;");

		
		return mainLayout;
	}
}
