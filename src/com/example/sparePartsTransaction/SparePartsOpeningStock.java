package com.example.sparePartsTransaction;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Formatter;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.Transaction;

import com.common.share.AmountField;
import com.common.share.BtUpload;
import com.common.share.CommonButton;
import com.common.share.FocusMoveByEnter;
import com.common.share.SessionBean;
import com.common.share.SessionFactoryUtil;
import com.common.share.TextRead;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.InlineDateField;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

import java.text.DecimalFormat;

import com.common.share.*;
import com.common.share.MessageBox.ButtonType;
import com.common.share.MessageBox.EventListener;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.terminal.gwt.server.WebApplicationContext;
import com.vaadin.terminal.gwt.server.WebBrowser;
import com.vaadin.ui.Button;
import com.vaadin.ui.Component;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Window.CloseEvent;
import com.vaadin.ui.Window.Notification;

public class SparePartsOpeningStock extends Window 
{
	private CommonButtonNew button = new CommonButtonNew( "New",  "Save",  "Edit",  "",  "Refresh",  "Find", "", "Exit","","");
	private VerticalLayout btnLayout = new VerticalLayout();

	private AbsoluteLayout mainLayout;

	private InlineDateField dOpeningYear;
	private ComboBox cmbProductName,cmbgroupName,cmbsubgroupName,cmbRackName,cmbSubRackName;
	private ComboBox cmbsubsubCategory;
	private String ProductLedeger="";
	private TextRead trProductId;
	private ComboBox cmbStore;
	private TextRead trUnit;
	private ComboBox cmbcategorytype;
	private AmountField amtQuantity;
	private AmountField amtRate;
	private TextRead amtAmount;
	private Label lblline;

	boolean isUpdate=false;
	int index;

	private TextRead txtCategoryID = new TextRead();
	private TextRead txtSubCategoryID = new TextRead();

	private TextField txtProductID = new TextField();
	private TextField txtOpeningYear = new TextField();

	private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	ArrayList<Component> allComp = new ArrayList<Component>();

	private DecimalFormat df = new DecimalFormat("#0.00");

	private Formatter fmt = new Formatter();

	private SessionBean sessionBean;
	
	/*public BtUpload fileAttUpload;
	private String fileName = "";*/
	
	public SparePartsOpeningStock(SessionBean sessionBean)
	{
		buildMainLayout();
		this.sessionBean = sessionBean;
		this.setCaption("OPENING STOCK INFORMATION :: "+sessionBean.getCompany());
		this.setResizable(false);
		this.setContent(mainLayout);
		buttonLayoutAdd();
		btnIni(true);
		componentIni(true);
		updateBtnFileldED(true);
		setEventAction();
		categorytypeload();
		cmbcategorytype.setValue("Spare Parts");
		cmbcategorytype.setEnabled(false);
		cmbCategoryName();
		cmbStoreload();
		focusEnter();
	}

	private void focusEnter()
	{
		allComp.add(dOpeningYear);
		//allComp.add(cmbcategorytype);
		allComp.add(cmbgroupName);
		allComp.add(cmbsubgroupName);
		allComp.add(cmbsubsubCategory);	
		allComp.add(cmbRackName);
		allComp.add(cmbSubRackName);
		allComp.add(cmbProductName);
		allComp.add(cmbStore);
		allComp.add(amtQuantity);
		allComp.add(amtRate);

		allComp.add(button.btnNew);
		allComp.add(button.btnUpdate);
		allComp.add(button.btnSave);
		allComp.add(button.btnRefresh);
		allComp.add(button.btnDelete);
		allComp.add(button.btnFind);

		new FocusMoveByEnter(this,allComp);
	}
	
	public void setEventAction()
	{
		button.btnNew.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				focusEnter();
				cmbgroupName.focus();
				newButtonEvent();
				//categorytypeload();

			}
		});

		button.btnUpdate.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				if(sessionBean.isUpdateable()){
					updateButtonEvent();
				}else{
					getParent().showNotification("You are not Permitted to Update", Notification.TYPE_WARNING_MESSAGE);	
				}
			}
		});

		button.btnDelete.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				//deleteButtonEvent();
				txtClear();
			}
		});

		button.btnSave.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				if(sessionBean.isSubmitable()){
					saveButtonEvent();
				}
				else{
					getParent().showNotification("You are not Permitted to Save",Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

		button.btnFind.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				findButtonEvent();
			}
		});

		button.btnExit.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				close();
				//showData();
			}
		});

		button.btnRefresh.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event){ 
				refreshButtonEvent();
				cmbProductNameData();
			}
		});

		cmbgroupName.addListener(new ValueChangeListener() {
			public void valueChange(ValueChangeEvent event) 
			{
				if(cmbgroupName.getValue()!=null)
				{
					productDataLoad();	
					subCateGoryDataAdd();
				}
			}
		});

		cmbsubgroupName.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				if(cmbgroupName.getValue()!=null && cmbsubgroupName.getValue()!=null)
				{
					SubSubCategoryLoad();
					cmbsubgroupName.focus();
					subproductdataload();
					cmbAddRackData();
				}
			}
		});

		cmbsubsubCategory.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				if(cmbsubsubCategory.getValue()!=null)
				{
					subsubproductDataLoad();
				}
			}
		});
		cmbRackName.addListener(new ValueChangeListener() {

			public void valueChange(ValueChangeEvent event) {
				if(cmbRackName.getValue()!=null)
				{
					cmbAddSubRackData();
				}
			}
		});

	
				
		cmbProductName.addListener(new ValueChangeListener() {
			public void valueChange(ValueChangeEvent event)
			{
				prodataAction();
			}
		});


		amtQuantity.addListener(new ValueChangeListener() {
			public void valueChange(ValueChangeEvent event) {
				try
				{
					double tamount,unitPrice,requiredQty; 
					if(!event.getProperty().toString().trim().isEmpty() && !amtRate.getValue().toString().trim().isEmpty())
					{
						requiredQty= Double.parseDouble(event.getProperty().toString().trim().replaceAll(",", ""));
						unitPrice= Double.parseDouble(amtRate.getValue().toString().replaceAll(",", ""));

						System.out.println("column Action");
						tamount=unitPrice*requiredQty;
						fmt = new Formatter();
						amtAmount.setValue(fmt.format("%.2f",tamount));
					}						
				}
				catch(Exception exp)
				{
					getParent().showNotification("Errora",exp.toString(),Notification.TYPE_ERROR_MESSAGE);
				}
			}
		});

		amtRate.addListener(new ValueChangeListener() {
			public void valueChange(ValueChangeEvent event) {
				try
				{
					double tamount,unitPrice,requiredQty; 
					if(!event.getProperty().toString().trim().isEmpty() && !amtRate.getValue().toString().trim().isEmpty())
					{
						requiredQty= Double.parseDouble(event.getProperty().toString().trim().replaceAll(",", ""));
						unitPrice= Double.parseDouble(amtQuantity.getValue().toString().replaceAll(",", ""));
						System.out.println("column Action");
						tamount=unitPrice*requiredQty;
						fmt = new Formatter();
						amtAmount.setValue(fmt.format("%.2f",tamount));
					}						
				}
				catch(Exception exp)
				{
					getParent().showNotification("Errora",exp.toString(),Notification.TYPE_ERROR_MESSAGE);
				}
			}
		});
	}

	private void updateButtonEvent()
	{
		if(cmbProductName.getValue()!= null)
		{
			isUpdate = true;
			btnIni(false);
			//componentIni(false);
			//updateBtnFileldED(false);
			updateinit(true);
		}
		else
			showNotification("Update Failed","There are no data for update.",Notification.TYPE_WARNING_MESSAGE);
	}

	private void findButtonEvent() 
	{
		Window win = new SparePartsOpeningStockFindWindow(sessionBean, txtProductID,txtOpeningYear);
		win.addListener(new Window.CloseListener() 
		{
			public void windowClose(CloseEvent e) 
			{
				if (txtProductID.getValue().toString().length() > 0)
				{
					txtClear();
					cmbProductName.removeAllItems();
					findInitialise(txtProductID.getValue().toString(),txtOpeningYear.getValue().toString());
				}
			}
		});

		this.getParent().addWindow(win);
	}

	private void findInitialise(String txtProductId,String txtOpeningyear) 
	{


		Transaction tx=null;
		try{
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();
			String sql= " select a.openingYear, b.vCategoryType,b.vGroupId, b.vSubGroupId,b.vsubsubCategoryId ,a.productId,b.vRawItemName ,a.qty,a.rate ,a.amount,c.vDepoId ,b.vRackId,b.vRackName,b.vSubRackId,b.vSubRackName from tbRawProductOpening a "
					+"  inner join "
					+ " tbRawItemInfo b "
					+ " on a.productId=b.vRawItemCode" +
					" left join" +
					" (select productId, vDepoId from tbRawProductDetails)  as c" +
					" on a.productId = c.productId  "
					+ " where a.productId like '"+txtProductId+"' and  YEAR(a.openingYear) like '"+txtOpeningyear+"' ";

			System.out.println("query is"+sql);


			List list=session.createSQLQuery(sql).list();
			for(Iterator iter=list.iterator();iter.hasNext();){

				Object element[]=(Object[]) iter.next();

				dOpeningYear.setValue(element[0]);
				cmbcategorytype.setValue("Spare Parts");
				cmbgroupName.setValue(element[2]);
				cmbsubgroupName.setValue(element[3]);
				cmbsubsubCategory.setValue(element[4].toString());
				cmbProductName.addItem(element[5].toString());
				cmbProductName.setItemCaption(element[5].toString(), element[6].toString());
				cmbProductName.setValue(element[5]);
				trProductId.setValue(element[5]);
				System.out.println("Product ID: "+element[4]);
				//trUnit.setValue(element[5]);
				fmt=new Formatter();
				amtQuantity.setValue(fmt.format("%.2f",Double.parseDouble(element[7].toString().trim())));
				fmt=new Formatter();
				amtRate.setValue(fmt.format("%.2f", Double.parseDouble(element[8].toString().trim())));
				fmt=new Formatter();
				cmbStore.setValue(element[10].toString());
			}
		}
		catch(Exception exp){
			this.getParent().showNotification(""+exp,Notification.TYPE_ERROR_MESSAGE);
		}
	}

	private void dataAddFilds()
	{

		Transaction tx=null;
		try{
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();
			String sql="select vRawItemCode,vUnitName from tbRawItemInfo where vRawItemCode like '"+cmbProductName.getValue().toString()+"' ";

			System.out.println("Spare: "+sql);
			List list=session.createSQLQuery(sql).list();
			for(Iterator iter=list.iterator();iter.hasNext();){

				Object[] element=(Object[]) iter.next();
				trProductId.setValue(element[0]);
				trUnit.setValue(element[1]);
			}
		}
		catch(Exception exp){
			this.getParent().showNotification(""+exp,Notification.TYPE_ERROR_MESSAGE);
		}
	}

	private void saveButtonEvent()
	{
		System.out.print(cmbProductName.getValue());

		
			if(cmbgroupName.getValue()!=null)
			{
				if(cmbRackName.getValue()!=null)
				{
				if(cmbProductName.getValue()!=null || isUpdate)
				{
					if(cmbStore.getValue()!=null)
					{
						System.out.print("ok");
						if(!trUnit.getValue().toString().trim().isEmpty())
						{
							if(!amtQuantity.getValue().toString().trim().isEmpty())
							{
								if(isUpdate)
								{
									final MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to update ?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
									mb.show(new EventListener()
									{
										public void buttonClicked(ButtonType buttonType)
										{
											if(buttonType == ButtonType.YES)
											{
												if(fiscalyearcheck()==1)
												{
													mb.buttonLayout.getComponent(0).setEnabled(false);
													updateData();
													isUpdate=false;
													componentIni(true);
													updateBtnFileldED(true);
													txtClear();
													btnIni(true);
													button.btnNew.focus();
													mb.close();
												}
												else
												{
													showNotification("Not Allowed to give Opening Update",Notification.TYPE_WARNING_MESSAGE);	
												}
												
											}
										}
									});	
								}
								else
								{
									final MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to Save ?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
									mb.show(new EventListener()
									{
										public void buttonClicked(ButtonType buttonType)
										{
											if(buttonType == ButtonType.YES)
											{	
												if(fiscalyearcheck()==1)
												{
													mb.buttonLayout.getComponent(0).setEnabled(false);
													insertData();
													btnIni(true);
													componentIni(true);
													txtClear();
													cmbProductNameData();
													mb.close();
												}
												else
												{
													showNotification("Not Allowed to give Opening",Notification.TYPE_WARNING_MESSAGE);
												}
											}
										}
									});	
								}
							}
							else{
								this.getParent().showNotification("Warning !","Enter Quantity.", Notification.TYPE_WARNING_MESSAGE);
								amtQuantity.focus();
							}
						}
						else{
							this.getParent().showNotification("Warning !","Enter Unit.", Notification.TYPE_WARNING_MESSAGE);
						}
					}
					else{
						this.getParent().showNotification("Warning !","Select Store Name.", Notification.TYPE_WARNING_MESSAGE);
						cmbStore.focus();
					}  	
				}
				else{
					this.getParent().showNotification("Warning !","Select Product Name.", Notification.TYPE_WARNING_MESSAGE);
					cmbProductName.focus();
				}
				}
				else
				{
					showNotification("Warning ! ","Please Select Rack Name",Notification.TYPE_WARNING_MESSAGE);
				}	
			}
			else
			{
				showNotification("Warning !","Please Select Category Name",Notification.TYPE_WARNING_MESSAGE);
			}	

	}


	public void updateData()
	{
		Transaction tx = null;
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			WebApplicationContext context = ((WebApplicationContext) getApplication().getContext());
			WebBrowser webBrowser = context.getBrowser();
			sessionBean.setUserIp(webBrowser.getAddress());    

			InetAddress inetAddress =InetAddress.getByName(webBrowser.getAddress().toString());//get the host Inet using ip

			String updateQuery = "Update tbRawProductDetails set CreationYear = '"+Calendar.getInstance().get(Calendar.YEAR)+"',vUserName = '"+sessionBean.getUserName()+"',vUserIP = '"+inetAddress.getHostName()+"',dEntryTime = CURRENT_TIMESTAMP, vDepoId = '"+cmbStore.getValue()+"', vDepoName = '"+cmbStore.getItemCaption(cmbStore.getValue()).toString().trim()+"' WHERE ProductID = '"+cmbProductName.getValue()+"'";
			System.out.println("updateQuery :"+updateQuery);
			session.createSQLQuery(updateQuery).executeUpdate();

			String updateQOS = "Update tbRawProductOpening set Qty = '"+amtQuantity.getValue().toString().trim()+"', " +
					"Rate = '"+(amtRate.getValue().toString().equals("") ?"0.00":amtRate.getValue().toString().trim())+"',vUserName = '"+sessionBean.getUserName()+"'," +
					"vUserIP = '"+inetAddress.getHostName()+"'," +
					"dtEntryTime = CURRENT_TIMESTAMP, amount='"+amtAmount.getValue().toString().trim()+"'," +
					"openingYear = '"+dateFormat.format(dOpeningYear.getValue())+"',vRackID = '"+cmbRackName.getValue().toString()+"',vRackName = '"+cmbRackName.getItemCaption(cmbRackName.getValue().toString())+"',vSubRackId= '"+cmbSubRackName.getValue().toString()+"',vSubRackName= '"+cmbSubRackName.getItemCaption(cmbSubRackName.getValue().toString())+"'  WHERE ProductID = '"+cmbProductName.getValue()+"'";

			System.out.println("updateQOS :"+updateQOS);
			session.createSQLQuery(updateQOS).executeUpdate();

			String LedgerOpen=" update tbLedger_Op_Balance set  DrAmount='"+amtAmount.getValue()+"',CrAmount='0.00' ,userId='"+sessionBean.getUserId()+"' ,userIp='"+sessionBean.getUserIp()+"',entryTime=getdate() where Ledger_Id like '"+ProductLedeger+"' ";
			System.out.println("LedgerOpen : "+LedgerOpen);
			session.createSQLQuery(LedgerOpen).executeUpdate();


			tx.commit();
			this.getParent().showNotification("All information updated successfully.");

		}catch(Exception exp){
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	public String productlededger() 
	{
		String autoCode = "";

		Transaction tx = null;

		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			String query="select Ledger_Id  from tbLedger where Ledger_Id=(select vLedgerCode from tbRawItemInfo where vRawItemCode like '"+cmbProductName.getValue().toString()+"')";
			System.out.println("ledgerpr"+query);
			Iterator iter = session.createSQLQuery(query).list().iterator();

			if (iter.hasNext()) 
			{
				autoCode = iter.next().toString();
			}
		} 
		catch (Exception ex) 
		{
			System.out.print(ex);
		}

		return autoCode;
	}



	private void insertData()
	{
		Transaction tx = null;
		String productId;
		String subgroupid="";
		String subsubcategoryid="";
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			WebApplicationContext context = ((WebApplicationContext) getApplication().getContext());
			WebBrowser webBrowser = context.getBrowser();
			sessionBean.setUserIp(webBrowser.getAddress());    

			InetAddress inetAddress =InetAddress.getByName(webBrowser.getAddress().toString());//get the host Inet using ip
			System.out.println ("Host Name: "+ inetAddress.getHostName());//display the host

			if(cmbsubgroupName.getValue()!=null)
				subgroupid=cmbsubgroupName.getValue().toString().trim();
			if(cmbsubsubCategory.getValue()!=null)
				subsubcategoryid=cmbsubsubCategory.getValue().toString().trim();

			String insertDetails = "Insert Into tbRawProductDetails(ProductID, ProductName,CategoryID,SubCategoryID,Unit," +
					"CreationYear,vUserName,vUserIP,dEntryTime,vSubSubCategory,vDepoId,vDepoName,) " +
					"values ('"+cmbProductName.getValue()+"','"+cmbProductName.getItemCaption(cmbProductName.getValue())+"'," +
					"'"+cmbgroupName.getValue().toString().trim()+"','"+subgroupid+"'," +
					"'"+trUnit.getValue().toString().trim()+"',datepart(year,CURRENT_TIMESTAMP)," +
					"'"+sessionBean.getUserName()+"','"+inetAddress.getHostName()+"',CURRENT_TIMESTAMP,'"+subsubcategoryid+"','"+cmbStore.getValue()+"','"+cmbStore.getItemCaption(cmbStore.getValue()).toString().trim()+"')";
			session.createSQLQuery(insertDetails).executeUpdate();

			System.out.println("insertDetails : "+insertDetails);

			String insertProductOpening = "Insert Into tbRawProductOpening(ProductId, Qty, Rate,vUserName,vUserIP,dtEntryTime,amount,openingYear,vRackID,vRackName,vSubRackId,vSubRackName) " +
					" values('"+cmbProductName.getValue()+"','"+amtQuantity.getValue().toString().trim()+"'," +
					" '"+(amtRate.getValue().toString().equals("")? "0.00" : amtRate.getValue().toString().trim())+"'," +
					" '"+sessionBean.getUserName()+"','"+inetAddress.getHostName()+"',CURRENT_TIMESTAMP,'"+(amtAmount.getValue().toString().equals("") ? "0.00":amtAmount.getValue().toString().trim())+"'," +
					" '"+dateFormat.format(dOpeningYear.getValue())+"','"+cmbRackName.getValue()+"','"+cmbRackName.getItemCaption(cmbRackName.getValue())+"','"+cmbSubRackName.getValue()+"','"+cmbSubRackName.getItemCaption(cmbSubRackName.getValue())+"')";

			String ProductLedeger=productlededger() ;


			/*String LedgerOpen="INSERT into tbLedger_Op_Balance values(" +
					" '"+LedgerId+"', " +
					" '0.00', " +
					" '0.00', " +
					" '"+dateFormat.format(sessionBean.getFiscalOpenDate())+"', " +
					" '"+sessionBean.getUserId()+"','"+sessionBean.getUserIp()+"', " +
					" CURRENT_TIMESTAMP, '"+sessionBean.getCompanyId()+"') ";*/


			String LedgerOpen=" update tbLedger_Op_Balance set  DrAmount='"+amtAmount.getValue()+"',CrAmount='0.00' ,userId='"+sessionBean.getUserId()+"' ,userIp='"+sessionBean.getUserIp()+"',entryTime=getdate() where Ledger_Id like '"+ProductLedeger+"' ";
			System.out.println("LedgerOpen : "+LedgerOpen);
			session.createSQLQuery(LedgerOpen).executeUpdate();

			System.out.println("insertProductInfo : "+insertProductOpening);

			session.createSQLQuery(insertProductOpening).executeUpdate();

			tx.commit();
			showNotification("All information saved successfully.");

		}catch(Exception exp){
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}
	
	private int fiscalyearcheck()
	{
		Transaction tx=null;
		Session session=SessionFactoryUtil.getInstance().getCurrentSession();
		String sql="select SlNo from tbFiscal_Year  where convert(date,getdate(),105) between Op_Date and Cl_Date ";
		List lst=session.createSQLQuery(sql).list();
		Iterator<?>itr=lst.iterator();
		if(itr.hasNext())
		{
			 return Integer.parseInt(itr.next().toString()) ;
		}
		return 0;
	
	}

	private void refreshButtonEvent()
	{
		componentIni(true);
		updateBtnFileldED(true);
		btnIni(true);
		txtClear();
	}

	private void newButtonEvent() 
	{
		componentIni(false);
		updateBtnFileldED(false);
		btnIni(false);
		txtClear();
		isUpdate = false;
		cmbcategorytype.setValue("Spare Parts");
		cmbcategorytype.setEnabled(false);
	}

	public void txtClear()
	{
		cmbProductName.setValue(null);
		trProductId.setValue("");
		cmbStore.setValue(null);
		txtCategoryID.setValue("");
		cmbgroupName.setValue(null);
		cmbsubgroupName.setValue(null);
		trUnit.setValue("");
		amtQuantity.setValue("");
		amtRate.setValue("");
		amtAmount.setValue("");
		cmbsubsubCategory.setValue(null);
		cmbcategorytype.setValue("Spare Parts");
	}

	public void cmbProductNameData()
	{
		cmbProductName.removeAllItems();
		Transaction tx = null;
		try {
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();

			String squery="select vRawItemCode,vRawItemName  from tbRawItemInfo where vRawItemCode not in (select productID from tbRawProductDetails )";
			System.out.println("squery : "+squery);
			List list = session.createSQLQuery(squery).list();

			for (Iterator iter = list.iterator();iter.hasNext();) 
			{
				Object[] element = (Object[]) iter.next();
				cmbProductName.addItem(element[0]);
				cmbProductName.setItemCaption(element[0], element[1].toString());
			}
		}
		catch (Exception ex){
			this.getParent().showNotification("Error", ex.toString(),Notification.TYPE_ERROR_MESSAGE);
		}
	}

	public void subCateGoryDataAdd()
	{
		cmbsubgroupName.removeAllItems();
		Transaction tx = null;
		try {
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();

			String squery="select  iSubCategoryID,vSubCategoryName from  tbRawItemSubCategory where Group_Id like '"+cmbgroupName.getValue().toString()+"' ";
			System.out.println("squery : "+squery);
			List list = session.createSQLQuery(squery).list();

			for (Iterator iter = list.iterator();iter.hasNext();) 
			{
				Object[] element = (Object[]) iter.next();
				cmbsubgroupName.addItem(element[0].toString());
				cmbsubgroupName.setItemCaption(element[0].toString(), element[1].toString());
			}
		}
		catch (Exception ex){
			this.getParent().showNotification("Error", ex.toString(),Notification.TYPE_ERROR_MESSAGE);
		}
	}

	public void SubSubCategoryLoad()
	{
		cmbsubsubCategory.removeAllItems();
		Transaction tx = null;
		try {
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();

			String squery= "select  iSubSubCategoryID,vSubSubCategoryName  from tbRawItemsubSubCategory where SubGroupid like '"+cmbsubgroupName.getValue().toString()+"' ";
			System.out.println("squery : "+squery);
			List list = session.createSQLQuery(squery).list();

			for (Iterator iter = list.iterator();iter.hasNext();) 
			{
				Object[] element = (Object[]) iter.next();
				cmbsubsubCategory.addItem(element[0].toString());
				cmbsubsubCategory.setItemCaption(element[0].toString(), element[1].toString());
			}
		}
		catch (Exception ex){
			this.getParent().showNotification("Error", ex.toString(),Notification.TYPE_ERROR_MESSAGE);
		}
	}
	public void cmbAddRackData()
	{
		cmbRackName.removeAllItems();
		String category="",subcategory="";
		if(cmbgroupName.getValue()!=null)
		{
			category =cmbgroupName.getValue().toString();
		}
		
		if(cmbsubgroupName.getValue()!=null)
		{
			subcategory = cmbsubgroupName.getValue().toString(); 
		}

		Transaction tx=null;
		try
		{
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();
		String query="select distinct vRackId, vRackName  from  tbRawItemInfo where vGroupId like '"+category+"' and vSubGroupId like  '"+subcategory+"' and vCategoryType like '%Spare Parts%'";
			List list=session.createSQLQuery(query).list();
			System.out.println(query);
			for(Iterator iter=list.iterator();iter.hasNext();)
			{
				Object[] element = (Object[]) iter.next();
				cmbRackName.addItem(element[0].toString());
				cmbRackName.setItemCaption(element[0].toString(), element[1].toString());
			}
		}
		catch(Exception exp)
		{
			showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}	
	}
	public void cmbAddSubRackData()
	{
		cmbSubRackName.removeAllItems();
		String rackId="";
		if(cmbRackName.getValue()!=null)
		{
			rackId ="%"; 
		}
				
		Transaction tx=null;
		try
		{
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();
			List list=session.createSQLQuery("select distinct vSubRackId, vSubRackName  from  tbRawItemInfo where vRackId like '"+rackId+"'").list();

			for(Iterator iter=list.iterator();iter.hasNext();)
			{
				Object[] element = (Object[]) iter.next();
				cmbSubRackName.addItem(element[0].toString());
				cmbSubRackName.setItemCaption(element[0].toString(), element[1].toString());
			}
		}
		catch(Exception exp)
		{
			showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}
			
	}
	public void subproductdataload()
	{
		cmbProductName.removeAllItems();
		Transaction tx = null;
		String groupid="";
		String subgroupid="";
		try {
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();

			if(cmbgroupName.getValue()!=null)
			{
				groupid=cmbgroupName.getValue().toString();
			}
			if(cmbsubgroupName.getValue()!=null)
			{
				subgroupid=cmbsubgroupName.getValue().toString();	
			}
			else
			{
				subgroupid="%";	
			}
			String squery="select  vRawItemCode,vRawItemName from tbRawItemInfo where vSubGroupId like '"+cmbsubgroupName.getValue()+"'  and vRawItemCode not in(select productID from tbRawProductDetails) order by vRawItemName ";
			System.out.println("squery : "+squery);
			List list = session.createSQLQuery(squery).list();

			for (Iterator iter = list.iterator();iter.hasNext();) 
			{
				Object[] element = (Object[]) iter.next();
				cmbProductName.addItem(element[0]);
				cmbProductName.setItemCaption(element[0], element[1].toString());
			}
		}
		catch (Exception ex){
			showNotification("Error", ex.toString(),Notification.TYPE_ERROR_MESSAGE);
		}
	}


	public void subsubproductDataLoad()
	{
		cmbProductName.removeAllItems();
		Transaction tx = null;
		String groupid="";
		String subgroupid="";
		try {
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();
			String squery=" select  vRawItemCode,vRawItemName  from tbRawItemInfo where vsubsubCategoryId like '"+cmbsubsubCategory.getValue().toString()+"'  and vRawItemCode not in(select productID from tbRawProductDetails) order by vRawItemName ";
			System.out.println("squery : "+squery);
			List list = session.createSQLQuery(squery).list();

			for (Iterator iter = list.iterator();iter.hasNext();) 
			{
				Object[] element = (Object[]) iter.next();
				cmbProductName.addItem(element[0]);
				cmbProductName.setItemCaption(element[0], element[1].toString());
			}
		}
		catch (Exception ex){
			showNotification("Error", ex.toString(),Notification.TYPE_ERROR_MESSAGE);
		}
	}

	public void productDataLoad()
	{
		cmbProductName.removeAllItems();
		Transaction tx = null;
		String groupid="";
		String subgroupid="";
		try {
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();

			if(cmbgroupName.getValue()!=null)
			{
				groupid=cmbgroupName.getValue().toString();

			}
			String squery="select vRawItemCode,vRawItemName from tbRawItemInfo where vGroupId like '"+cmbgroupName.getValue().toString()+"'  and vRawItemCode not in(select productID from tbRawProductDetails) order by vRawItemName ";
			System.out.println("squery : "+squery);
			List list = session.createSQLQuery(squery).list();

			for (Iterator iter = list.iterator();iter.hasNext();) 
			{
				Object[] element = (Object[]) iter.next();
				cmbProductName.addItem(element[0]);
				cmbProductName.setItemCaption(element[0], element[1].toString());
			}
		}
		catch (Exception ex){
			showNotification("Error", ex.toString(),Notification.TYPE_ERROR_MESSAGE);
		}
	}

	public void cmbCategoryName()
	{
		cmbgroupName.removeAllItems();
		Transaction tx = null;
		try {
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();
			String squery="	select  iCategoryCode,Group_Id,vCategoryName from  tbRawItemCategory where vCategoryType like '%Spare Parts%' and vFlag='New'";
			System.out.println("squery : "+squery);
			List list = session.createSQLQuery(squery).list();

			for (Iterator iter = list.iterator();iter.hasNext();) 
			{
				Object[] element = (Object[]) iter.next();
				cmbgroupName.addItem(element[0].toString());
				cmbgroupName.setItemCaption(element[0].toString(), element[2].toString());
			}
		}
		catch (Exception ex){
			showNotification("Error", ex.toString(),Notification.TYPE_ERROR_MESSAGE);
		}
	}

	public void prodataAction()
	{
		//cmbgroupName.removeAllItems();
		Transaction tx = null;
		try {
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();

			//String squery = "Select  ProductCode,ProductName from  tbRawProductInfo where ProductCode not in(select productID from tbRawProductDetails) order by ProductName";

			String squery="select vRawItemCode,vUnitName from tbRawItemInfo where vRawItemCode like '"+cmbProductName.getValue()+"' ";
			System.out.println("squery : "+squery);
			List list = session.createSQLQuery(squery).list();

			for (Iterator iter = list.iterator();iter.hasNext();) 
			{
				Object[] element = (Object[]) iter.next();
				trProductId.setValue(element[0].toString());
				trUnit.setValue(element[1].toString());
				/*cmbgroupName.addItem(element[1]);
				cmbgroupName.setItemCaption(element[1], element[2].toString());*/
//				amtQuantity.focus();

			}
		}
		catch (Exception ex){
			showNotification("Error", ex.toString(),Notification.TYPE_ERROR_MESSAGE);
		}
	}


	public void categorytypeload()
	{
		cmbcategorytype.removeAllItems();
		Transaction tx = null;
		try {
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();
			String squery="Select distinct 0,vCategoryType  from tbRawItemCategory where vCategoryType  like '%Spare Parts%' and vFlag='New'";
			System.out.println("squery : "+squery);
			List list = session.createSQLQuery(squery).list();

			for (Iterator iter = list.iterator();iter.hasNext();) 
			{
				Object[] element = (Object[]) iter.next();
				cmbcategorytype.addItem(element[1]);
				cmbcategorytype.setItemCaption(element[1], element[1].toString());
			}
		}
		catch (Exception ex){
			showNotification("Error", ex.toString(),Notification.TYPE_ERROR_MESSAGE);
		}
	}

	public void cmbStoreload()
	{
		cmbStore.removeAllItems();

		Transaction tx = null;

		try 
		{
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();

			String squery= "select vDepoId, vDepoName from tbDepoInformation order by vDepoName";
			System.out.println("squery : "+squery);

			List list = session.createSQLQuery(squery).list();

			for (Iterator iter = list.iterator();iter.hasNext();) 
			{
				Object[] element = (Object[]) iter.next();
				cmbStore.addItem(element[0].toString());
				cmbStore.setItemCaption(element[0].toString(), element[1].toString());
			}
		}
		catch (Exception ex)
		{
			this.getParent().showNotification("Error", ex.toString(),Notification.TYPE_ERROR_MESSAGE);
		}
	}


	private void updateBtnFileldED(boolean b)
	{
		amtQuantity.setEnabled(!b);
		amtRate.setEnabled(!b);
		amtAmount.setEnabled(!b);

		lblline.setEnabled(!b);
	}

	private void componentIni(boolean b) 
	{
		dOpeningYear.setEnabled(!b);
		cmbProductName.setEnabled(!b);
		trProductId.setEnabled(!b);
		cmbStore.setEnabled(!b);
		cmbgroupName.setEnabled(!b);
		cmbsubgroupName.setEnabled(!b);
		cmbsubsubCategory.setEnabled(!b);
		cmbRackName.setEnabled(!b);
		cmbSubRackName.setEnabled(!b);
		//cmbcategorytype.setEnabled(!b);
		trUnit.setEnabled(!b);
		amtQuantity.setEnabled(!b);
		amtRate.setEnabled(!b);
		amtAmount.setEnabled(!b);

		lblline.setEnabled(!b);
	}

	private void updateinit(boolean b) 
	{
		dOpeningYear.setEnabled(b);
		cmbProductName.setEnabled(!b);
		trProductId.setEnabled(!b);
		cmbStore.setEnabled(!b);
		cmbgroupName.setEnabled(!b);
		cmbsubgroupName.setEnabled(!b);
		cmbsubsubCategory.setEnabled(!b);
		cmbRackName.setEnabled(!b);
		cmbSubRackName.setEnabled(!b);
		//cmbcategorytype.setEnabled(!b);
		trUnit.setEnabled(!b);
		amtQuantity.setEnabled(b);
		amtRate.setEnabled(b);
		amtAmount.setEnabled(b);

		lblline.setEnabled(!b);
	}

	private void btnIni(boolean t)
	{
		/*button.btnNew.setEnabled(t);
		button.btnUpdate.setEnabled(t);
		button.btnSave.setEnabled(!t);
		button.btnSave.setEnabled(!t);
		button.btnRefresh.setEnabled(!t);
		button.btnDelete.setEnabled(t);*/

		button.btnNew.setEnabled(t);
		button.btnUpdate.setEnabled(t);
		button.btnSave.setEnabled(!t);
		button.btnSave.setEnabled(!t);
		button.btnRefresh.setEnabled(!t);
		button.btnDelete.setEnabled(t);
		button.btnFind.setEnabled(t);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout()
	{
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		//mainLayout.setWidth("586px");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("596px");
		setHeight("494px");

		// dOpeningYear
		dOpeningYear = new InlineDateField();
		dOpeningYear.setImmediate(true);
		dOpeningYear.setDateFormat("yyyy");
		dOpeningYear.setWidth("-1px");
		dOpeningYear.setHeight("-1px");
		dOpeningYear.setInvalidAllowed(false);
		dOpeningYear.setResolution(6);

		// category Type
		cmbcategorytype = new ComboBox();
		cmbcategorytype.setImmediate(false);
		cmbcategorytype.setNullSelectionAllowed(false);
		cmbcategorytype.setNewItemsAllowed(false);
		cmbcategorytype.setWidth("280px");
		cmbcategorytype.setHeight("-1px");
		cmbcategorytype.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);


		cmbgroupName = new ComboBox();
		cmbgroupName.setImmediate(true);
		cmbgroupName.setNullSelectionAllowed(false);
		cmbgroupName.setNewItemsAllowed(false);
		cmbgroupName.setWidth("280px");
		cmbgroupName.setHeight("-1px");
		cmbgroupName.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);

		cmbsubgroupName = new ComboBox();
		cmbsubgroupName.setImmediate(true);
		cmbsubgroupName.setNullSelectionAllowed(false);
		cmbsubgroupName.setNewItemsAllowed(false);
		cmbsubgroupName.setWidth("280px");
		cmbsubgroupName.setHeight("-1px");
		cmbsubgroupName.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);

		cmbsubsubCategory = new ComboBox();
		cmbsubsubCategory.setImmediate(true);
		cmbsubsubCategory.setNullSelectionAllowed(false);
		cmbsubsubCategory.setNewItemsAllowed(false);
		cmbsubsubCategory.setWidth("280px");
		cmbsubsubCategory.setHeight("-1px");
		cmbsubsubCategory.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);

		cmbRackName = new ComboBox();
		cmbRackName.setImmediate(true);
		cmbRackName.setWidth("280px");
		cmbRackName.setHeight("-1px");
		cmbRackName.setNullSelectionAllowed(true);
		cmbRackName.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		
		cmbSubRackName= new ComboBox();
		cmbSubRackName.setImmediate(true);
		cmbSubRackName.setWidth("280px");
		cmbSubRackName.setHeight("-1px");
		cmbSubRackName.setNullSelectionAllowed(true);
		cmbSubRackName.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);

		// comProductName
		cmbProductName = new ComboBox();
		cmbProductName.setImmediate(true);
		cmbProductName.setNullSelectionAllowed(false);
		cmbProductName.setNewItemsAllowed(false);
		cmbProductName.setWidth("300px");
		cmbProductName.setHeight("-1px");
		cmbProductName.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		
		// trProductId
		trProductId = new TextRead();
		trProductId.setImmediate(false);
		trProductId.setWidth("100px");
		trProductId.setHeight("22px");

		// cmbStore
		cmbStore = new ComboBox();
		cmbStore.setImmediate(true);
		cmbStore.setNullSelectionAllowed(false);
		cmbStore.setNewItemsAllowed(false);
		cmbStore.setWidth("280px");
		cmbStore.setHeight("-1px");
		cmbStore.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);

		// trUnit
		trUnit = new TextRead();
		trUnit.setImmediate(false);
		trUnit.setWidth("100px");
		trUnit.setHeight("22px");

		// amtQuantity
		amtQuantity = new AmountField();
		amtQuantity.setImmediate(true);
		amtQuantity.setWidth("102px");
		amtQuantity.setHeight("22px");

		//mainLayout.addComponent(lblRate,"top:238.0px;left:54.0px;");

		// amtRate
		amtRate = new AmountField();
		amtRate.setImmediate(true);
		amtRate.setWidth("102px");
		amtRate.setHeight("22px");

		// amtAmount
		amtAmount = new TextRead(1);
		amtAmount.setImmediate(true);
		amtAmount.setWidth("102px");
		amtAmount.setHeight("22px");
		amtAmount.setStyleName("Amount");


		lblline = new Label();
		lblline.setImmediate(false);
		lblline.setWidth("-1");
		lblline.setHeight("-1");
		lblline.setValue("________________________________________________________________________");

		// adding components to mainLayout

		mainLayout.addComponent(new Label("Opening Year :"), "top:32.0px;left:54.0px;");
		mainLayout.addComponent(dOpeningYear, "top:31.0px;left:194.0px;");

		mainLayout.addComponent(new Label("Item Type :"), "top:60.0px;left:54.0px;");
		mainLayout.addComponent(cmbcategorytype, "top:57.0px;left:194.0px;");

		mainLayout.addComponent(new Label("Category Name:"), "top:86.0px;left:54.0px;");
		mainLayout.addComponent(cmbgroupName, "top:83.0px;left:194.0px;");

		mainLayout.addComponent(new Label("SubCategory Name:"), "top:112.0px;left:54.0px;");
		mainLayout.addComponent(cmbsubgroupName, "top:109.0px;left:194.0px;");

		mainLayout.addComponent(new Label(" Sub Sub-Category Name:"), "top:138.0px;left:54.0px;");
		mainLayout.addComponent(cmbsubsubCategory, "top:135.0px;left:194.0px;");
		
		mainLayout.addComponent((new Label("Rack Name:")), "top:164.0px;left:54.0px;");
		mainLayout.addComponent(cmbRackName, "top:161.0px;left:194.0px;");
		
		mainLayout.addComponent((new Label("SubRack Name:")), "top:190.0px;left:54.0px;");
		mainLayout.addComponent(cmbSubRackName, "top:187.0px;left:194.0px;");

		mainLayout.addComponent(new Label("Product Name:"), "top:216.0px;left:54.0px;");
		mainLayout.addComponent(cmbProductName, "top:213.0px;left:194.0px;");

		mainLayout.addComponent(new Label("Product ID:"), "top:242.0px;left:54.0px;");
		mainLayout.addComponent(trProductId, "top:239.0px;left:195.0px;");

		mainLayout.addComponent(new Label("Store:"), "top:268.0px;left:54.0px;");
		mainLayout.addComponent(cmbStore, "top:265.0px;left:195.0px;");

		mainLayout.addComponent(new Label("Unit :"), "top:294.0px;left:54.0px;");
		mainLayout.addComponent(trUnit, "top:291.0px;left:193.5px;");

		mainLayout.addComponent(new Label("Quantity :"),"top:320.0px;left:54.0px;");
		mainLayout.addComponent(amtQuantity,"top:317.0px;left:193.5px;");

		mainLayout.addComponent(new Label("Rate :"), "top:346.0px;left:54.0px;");
		mainLayout.addComponent(amtRate, "top:343.0px;left:193.0px;");

		mainLayout.addComponent(new Label("Amount :"), "top:372.0px;left:54.0px;");
		mainLayout.addComponent(amtAmount, "top:369.0px;left:197.0px;");

		mainLayout.addComponent(lblline,"top:382.0px; left:18.0px;");

		return mainLayout;
	}

	private void buttonLayoutAdd()
	{
		btnLayout.addComponent(button);
		mainLayout.addComponent(btnLayout,"top:420px;left:15px;");
		
		/*fileAttUpload = new BtUpload("temp/attendanceFolder/c");
		fileAttUpload.setImmediate(true);
		mainLayout.addComponent(fileAttUpload, "top:360.0px; left:0.0px;");*/
	}

}
