package com.example.sparePartsReport;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.Transaction;

import com.common.share.CommonButton;
import com.common.share.FocusMoveByEnter;
import com.common.share.ReportViewer;
import com.common.share.ReportViewerNew;
import com.common.share.SessionBean;
import com.common.share.SessionFactoryUtil;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Window.Notification;

public class ProductInfo extends Window {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private CheckBox subCateCheckBox;
	@AutoGenerated
	private CheckBox CategoryCheckBox;
	@AutoGenerated
	private CheckBox sectionCheckBox;
	@AutoGenerated
	private ComboBox cmbSubCategory;
	@AutoGenerated
	private Label lblSubCategory;
	@AutoGenerated
	private ComboBox cmbCategory;
	@AutoGenerated
	private Label lblCategory;
	@AutoGenerated
	private ComboBox cmbDepartment;
	@AutoGenerated
	private Label lblDepartment;
	private Label lblline;
	String sectionId = "";
	String CategoryId = "";
	String SubCategoryId = "";
	private SessionBean sessionBean;
	private NativeButton previewButton = new NativeButton("Preview");
	private NativeButton exitButton = new NativeButton("Exit");
	
	public ProductInfo(SessionBean sessionBean,String str) {
		this.sessionBean = sessionBean;
		buildMainLayout();
		setContent(mainLayout);
		this.setResizable(false);
		cmbDepartment.focus();
		this.setCaption("ITEM INFORMATION :: "+ sessionBean.getCompany());
		Component ob[]={cmbDepartment,cmbCategory,cmbSubCategory,previewButton};
		new FocusMoveByEnter(this,ob);
		allButtonAction();
		addDepartmentName();
		addCategoryName();
		addSubCategoryName();
		// TODO add user code here
	}

	private void allButtonAction()
	{	
		cmbDepartment.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) {
				// sectionCheckBox.setEnabled(false);		
			}
		});

		cmbCategory.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) {
				// CategoryCheckBox.setEnabled(false);		
			}
		});

		cmbSubCategory.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) {
				//subCateCheckBox.setEnabled(false);		
			}
		});

		sectionCheckBox.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) {
				boolean bv = sectionCheckBox.booleanValue();
				if(bv==true){
					cmbDepartment.setValue(null);
					cmbDepartment.setEnabled(false);
				}
				else{
					cmbDepartment.setEnabled(true);
				}
			}
		});

		CategoryCheckBox.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) {
				boolean bv = CategoryCheckBox.booleanValue();
				System.out.println("ST : "+bv);
				if(bv==true){
					CategoryId= "%";
					cmbCategory.setValue(null);
					cmbCategory.setEnabled(false);
				}
				else{
					cmbCategory.setEnabled(true);
				}
			}
		});

		subCateCheckBox.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) {
				boolean bv = subCateCheckBox.booleanValue();
				System.out.println("ST : "+bv);
				if(bv==true){
					SubCategoryId= "%";
					cmbSubCategory.setValue(null);
					cmbSubCategory.setEnabled(false);
				}
				else{
					cmbSubCategory.setEnabled(true);
				}
			}
		});


		exitButton.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				close();
			}
		});

		previewButton.addListener(new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) {
				if((cmbDepartment.getValue()!=null || sectionCheckBox.booleanValue()==true) && (cmbCategory.getValue()!=null || CategoryCheckBox.booleanValue()==true) && (cmbSubCategory.getValue()!=null  || subCateCheckBox.booleanValue()==true)){
					reportView();
				}
				else{
					getParent().showNotification("All Fields are Mandetory", Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});
	}


	public void addDepartmentName()
	{
		cmbDepartment.removeAllItems();
		Transaction tx = null;
		try{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			List list = session.createSQLQuery("select * from tbDepartmentInfo").list();

			for(Iterator iter=list.iterator();iter.hasNext();)
			{
				Object[] element = (Object[]) iter.next();
				cmbDepartment.addItem(element[1].toString());
				cmbDepartment.setItemCaption(element[1].toString(), element[2].toString());

			}
		}catch(Exception exp){
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}
	}


	public void addCategoryName()
	{
		cmbCategory.removeAllItems();
		Transaction tx = null;
		try{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			List list = session.createSQLQuery("select iCategoryCode,vCategoryName from tbRawCategory").list();

			for(Iterator iter=list.iterator();iter.hasNext();)
			{
				Object[] element = (Object[]) iter.next();
				cmbCategory.addItem(element[0]);
				cmbCategory.setItemCaption(element[0], element[1].toString());
			}
		}catch(Exception exp){
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}

	}

	public void addSubCategoryName(){
		cmbSubCategory.removeAllItems();

		Transaction tx = null;
		try{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			List list = session.createSQLQuery("select iSubCategoryID,vSubCategoryName from tbRawSubCategory").list();

			for(Iterator iter=list.iterator();iter.hasNext();)
			{
				Object[] element = (Object[]) iter.next();
				cmbSubCategory.addItem(element[0]);
				cmbSubCategory.setItemCaption(element[0], element[1].toString());

			}
		}catch(Exception exp){
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}

	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("460px");
		mainLayout.setHeight("210px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("480px");
		setHeight("250px");
		
		// lblDepartment
		lblDepartment = new Label();
		lblDepartment.setImmediate(false);
		lblDepartment.setWidth("-1px");
		lblDepartment.setHeight("-1px");
		lblDepartment.setValue("Department :");
		mainLayout.addComponent(lblDepartment, "top:40.0px;left:40.0px;");
		
		// cmbDepartment
		cmbDepartment = new ComboBox();
		cmbDepartment.setImmediate(false);
		cmbDepartment.setWidth("260px");
		cmbDepartment.setHeight("24px");
		cmbDepartment.setNullSelectionAllowed(false);
		cmbDepartment.setImmediate(true);
		mainLayout.addComponent(cmbDepartment, "top:38.0px;left:110.0px;");
		
		// lblCategory
		lblCategory = new Label();
		lblCategory.setImmediate(false);
		lblCategory.setWidth("100.0%");
		lblCategory.setHeight("-1px");
		lblCategory.setValue("Category:");
		mainLayout.addComponent(lblCategory,
				"top:66.0px;left:55.0px;");
		
		// cmbCategory
		cmbCategory = new ComboBox();
		cmbCategory.setImmediate(false);
		cmbCategory.setWidth("260px");
		cmbCategory.setHeight("-1px");
		cmbCategory.setNullSelectionAllowed(false);
		cmbCategory.setImmediate(true);
		mainLayout.addComponent(cmbCategory, "top:64.0px;left:110.0px;");
		
		// lblSubCategory
		lblSubCategory = new Label();
		lblSubCategory.setImmediate(false);
		lblSubCategory.setWidth("-1px");
		lblSubCategory.setHeight("-1px");
		lblSubCategory.setValue("Sub Category :");
		mainLayout.addComponent(lblSubCategory, "top:92.0px;left:28.0px;");
		
		// cmbSubCategory
		cmbSubCategory = new ComboBox();
		cmbSubCategory.setImmediate(false);
		cmbSubCategory.setWidth("260px");
		cmbSubCategory.setHeight("-1px");
		cmbSubCategory.setNullSelectionAllowed(false);
		cmbSubCategory.setImmediate(true);
		mainLayout.addComponent(cmbSubCategory, "top:90.0px;left:110.0px;");
		
		// sectionCheckBox
		sectionCheckBox = new CheckBox();
		sectionCheckBox.setCaption("All");
		sectionCheckBox.setImmediate(false);
		sectionCheckBox.setWidth("-1px");
		sectionCheckBox.setHeight("24px");
		sectionCheckBox.setImmediate(true);
		mainLayout.addComponent(sectionCheckBox, "top:40.0px;left:380.0px;");
		
		// CategoryCheckBox
		CategoryCheckBox = new CheckBox();
		CategoryCheckBox.setCaption("All");
		CategoryCheckBox.setImmediate(false);
		CategoryCheckBox.setWidth("-1px");
		CategoryCheckBox.setHeight("24px");
		CategoryCheckBox.setImmediate(true);
		mainLayout.addComponent(CategoryCheckBox, "top:66.0px;left:380.0px;");
		
		// subCateCheckBox
		subCateCheckBox = new CheckBox();
		subCateCheckBox.setCaption("All");
		subCateCheckBox.setImmediate(false);
		subCateCheckBox.setWidth("-1px");
		subCateCheckBox.setHeight("-1px");
		subCateCheckBox.setImmediate(true);
		mainLayout.addComponent(subCateCheckBox, "top:93.0px;left:380.0px;");
		
		lblline = new Label();
		lblline.setImmediate(false);
		lblline.setWidth("-1px");
		lblline.setHeight("-1px");
		lblline.setValue("________________________________________________________________");
		mainLayout.addComponent(lblline, "top:120.0px;left:20.0px;");

		previewButton.setWidth("80px");
		previewButton.setHeight("28px");
		previewButton.setIcon(new ThemeResource("../icons/print.png"));
		mainLayout.addComponent(previewButton,"top:155.opx; left:170.0px");

		exitButton.setWidth("70px");
		exitButton.setHeight("28px");
		exitButton.setIcon(new ThemeResource("../icons/exit1.png"));
		mainLayout.addComponent(exitButton,"top:155.opx; left:250.0px");

		return mainLayout;
	}
	
	private void reportView()
	{	
		String query=null;

		if(sectionCheckBox.booleanValue()==true){
			sectionId = "%";
		}else{
			sectionId = cmbDepartment.getValue().toString();
		}

		if(CategoryCheckBox.booleanValue()==true){
			CategoryId = "%";
		}else{
			CategoryId = cmbCategory.getValue().toString();
		}

		if(subCateCheckBox.booleanValue()==true){
			SubCategoryId = "%";
		}else{
			SubCategoryId = cmbSubCategory.getValue().toString();
		}

		try{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			Transaction tx = session.beginTransaction();

			HashMap hm = new HashMap();
			hm.put("company", sessionBean.getCompany());
			hm.put("address", sessionBean.getCompanyAddress());
			hm.put("phone", sessionBean.getCompanyContact());
			//hm.put("phone", "Phone : "+sessionBean.getCompanyPhone()+" Fax : "+sessionBean.getCompanyFax()+" E-Mail : "+sessionBean.getCompanyEmail());
			//System.out.println(sessionBean.getCompanyPhone());
			hm.put("UserName", sessionBean.getUserName()+"  "+sessionBean.getUserIp());

			//Select distinct *,(select vSubCategoryName from tbRawSubCategory 
			//where iSubCategoryID=VwRawProduct.SubCategoryId) as subCategory
			//from VwRawProduct where sectionId like '17' and CategoryCode like '1' and SubCategoryID like '1';

			query="Select * from tbRawProductInfo where sectionId like '"+sectionId+"' and " +
					" CategoryCode like '"+CategoryId+"' and SubCategoryID like '"+SubCategoryId+"'" +
					" order by sectionId,CategoryCode,SubCategoryID";
			System.out.println("query : "+query);
			hm.put("sql", query);

			Window win = new ReportViewerNew(hm,"report/raw/rawProductInfoRpt.jasper",
					this.getWindow().getApplication().getContext().getBaseDirectory()+"".replace("\\","/")+"/VAADIN/rpttmp",
					this.getWindow().getApplication().getURL()+"VAADIN/rpttmp",false,
					this.getWindow().getApplication().getURL()+"VAADIN/applet",0);
			win.setCaption("Project Report");
			this.getParent().getWindow().addWindow(win);
		}
		catch(Exception exp){
			this.getParent().showNotification("Error",exp.toString(),Notification.TYPE_ERROR_MESSAGE);
			System.out.println(exp);
		}
	}

}
