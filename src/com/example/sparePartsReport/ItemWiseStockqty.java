package com.example.sparePartsReport;

import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.Transaction;

import com.common.share.FocusMoveByEnter;
import com.common.share.ReportViewer;
import com.common.share.ReportViewerNew;
import com.common.share.SessionBean;
import com.common.share.SessionFactoryUtil;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Window.Notification;

public class ItemWiseStockqty extends Window 
{
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private PopupDateField dToDate;
	@AutoGenerated
	private Label lblToDate;
	@AutoGenerated
	private PopupDateField dFromDate;
	@AutoGenerated
	private Label lblFromDate;
	@AutoGenerated
	private ComboBox cmbItemName;
	@AutoGenerated
	private Label lblItemName;
	@AutoGenerated
	private ComboBox cmbDepartment;
	@AutoGenerated
	private Label lblDepartment;
	private NativeButton previewButton = new NativeButton("Preview");
	private NativeButton exitButton = new NativeButton("Exit");
	private Label lblline;
	private SessionBean sessionBean;
	
	public ItemWiseStockqty(SessionBean sessionBean,String str)
	{
		this.sessionBean = sessionBean;
		buildMainLayout();
		setContent(mainLayout);
		this.setResizable(false);
		this.setCaption("ITEM WISE STOCK (BY QTY) :: "+ sessionBean.getCompany());
		cmbDepartment.focus();
		Component ob[]={cmbDepartment,cmbItemName,dFromDate,dToDate,previewButton};
		new FocusMoveByEnter(this, ob);
		addSectionName();
		EventAction();
	}

	public void addSectionName()
	{
		cmbDepartment.removeAllItems();
		Transaction tx = null;
		try{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			List list = session.createSQLQuery("select * from tbDepartmentInfo").list();

			for(Iterator iter=list.iterator();iter.hasNext();)
			{
				Object[] element = (Object[]) iter.next();
				cmbDepartment.addItem(element[1].toString());
				cmbDepartment.setItemCaption(element[1].toString(), element[2].toString());

			}
		}catch(Exception exp){
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}
	}
	
	private void EventAction() 
	{
		cmbDepartment.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) {
				if(cmbDepartment.getValue()!=null){
					ItemDateAdd();
				}
			}
		});

		previewButton.addListener(new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) {
				if(cmbDepartment.getValue()!=null && cmbItemName.getValue()!=null){
					reportView();
				}
				else{
					getParent().showNotification("All Fields are Mandatory", Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

		exitButton.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				close();
			}
		});
	}
	
	private void reportView()
	{
		String query=null;
		
		String fDate = new SimpleDateFormat("yyyy-MM-dd").format(dFromDate.getValue())+" "+"00:00:00.000";
		String tDate = new SimpleDateFormat("yyyy-MM-dd").format(dToDate.getValue())+" "+"23:59:59.000";
		
		String category = selectCategory(cmbItemName.getValue().toString());
		String subCategory = selectSubCategory(cmbItemName.getValue().toString());
		
		try{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			Transaction tx = session.beginTransaction();

			HashMap hm = new HashMap();
			hm.put("company", sessionBean.getCompany());
			hm.put("address", sessionBean.getCompanyAddress());
			hm.put("phone", sessionBean.getCompanyContact());
			//hm.put("phone", "Phone : "+sessionBean.getCompanyPhone()+" Fax : "+sessionBean.getCompanyFax()+" E-Mail : "+sessionBean.getCompanyEmail());
			//System.out.println(sessionBean.getCompanyPhone());
			hm.put("category",category);
			hm.put("subCategory",subCategory);
			hm.put("UserName", sessionBean.getUserName()+"  "+sessionBean.getUserIp());
			
			query="Select * from funOverollStockQty " +
					"('"+cmbDepartment.getValue().toString()+"','"+cmbItemName.getValue()+"','"+fDate+"','"+tDate+"') " ;
					//" order by convert(Date,date,105) asc";
			System.out.println("query : "+query);
			hm.put("sql", query);
			
			hm.put("fromDate", new SimpleDateFormat("dd-MM-yyyy").format(dToDate.getValue()));
			hm.put("toDate", new SimpleDateFormat("dd-MM-yyyy").format(dToDate.getValue()));
			hm.put("itemName", cmbItemName.getItemCaption(cmbItemName.getValue()));

			Window win = new ReportViewerNew(hm,"report/raw/rptItemWiseStockQty.jasper",
					this.getWindow().getApplication().getContext().getBaseDirectory()+"".replace("\\","/")+"/VAADIN/rpttmp",
					this.getWindow().getApplication().getURL()+"VAADIN/rpttmp",false,
					this.getWindow().getApplication().getURL()+"VAADIN/applet",0);
			win.setCaption("Project Report");
			this.getParent().getWindow().addWindow(win);
		}
		catch(Exception exp){
			this.getParent().showNotification("Error",exp.toString(),Notification.TYPE_ERROR_MESSAGE);
			System.out.println(exp);
		}
	}
	
	private String selectSubCategory(String itemName){
		String subCategoryName = "";
		try{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			Transaction tx = session.beginTransaction();
			
			String query = "select SubCategoryID,subCategoryName from tbRawProductInfo where ProductCode = '"+itemName+"' ";
			List list = session.createSQLQuery(query).list();
			Iterator iter= list.iterator();
			if(iter.hasNext())
			{
				Object[] element = (Object[]) iter.next();
				subCategoryName = element[1].toString();
			}
			return subCategoryName;
		}
		catch(Exception exp){
			this.getParent().showNotification("Error",exp.toString(),Notification.TYPE_ERROR_MESSAGE);
			System.out.println(exp);
		}
		
		return subCategoryName;
	}
	
	private String selectCategory(String itemName){
		String categoryName = "";
		try{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			Transaction tx = session.beginTransaction();
			
			String query = "select CategoryCode,categoryName from tbRawProductInfo where ProductCode = '"+itemName+"' ";
			List list = session.createSQLQuery(query).list();
			Iterator iter= list.iterator();
			if(iter.hasNext())
			{
				Object[] element = (Object[]) iter.next();
				categoryName = element[1].toString();
			}
			return categoryName;
		}
		catch(Exception exp){
			this.getParent().showNotification("Error",exp.toString(),Notification.TYPE_ERROR_MESSAGE);
			System.out.println(exp);
		}
		
		return categoryName;
	}
	
	public void ItemDateAdd()
	{
		cmbItemName.removeAllItems();
		Transaction tx = null;
		try{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			List list = session.createSQLQuery("Select ProductCode,ProductName from tbRawProductInfo where sectionId = '"+cmbDepartment.getValue().toString()+"'").list();
			if(!list.isEmpty()){
				for(Iterator iter=list.iterator();iter.hasNext();)
				{
					Object[] element = (Object[]) iter.next();
					cmbItemName.addItem(element[0].toString());
					cmbItemName.setItemCaption(element[0].toString(), element[1].toString());
				}
			}
			else{
				this.getParent().showNotification("There is No Items");
			}

		}catch(Exception exp){
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("500px");
		mainLayout.setHeight("240px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("520px");
		setHeight("280px");
		
		// lblDepartment
		lblDepartment = new Label();
		lblDepartment.setImmediate(false);
		lblDepartment.setWidth("-1px");
		lblDepartment.setHeight("-1px");
		lblDepartment.setValue("Department :");
		mainLayout.addComponent(lblDepartment, "top:40.0px;left:58.0px;");
		
		// cmbDepartment
		cmbDepartment = new ComboBox();
		cmbDepartment.setImmediate(false);
		cmbDepartment.setWidth("268px");
		cmbDepartment.setHeight("24px");
		cmbDepartment.setImmediate(true);
		cmbDepartment.setNullSelectionAllowed(false);
		mainLayout.addComponent(cmbDepartment, "top:36.0px;left:132.0px;");
		
		// lblItemName
		lblItemName = new Label();
		lblItemName.setImmediate(false);
		lblItemName.setWidth("-1px");
		lblItemName.setHeight("-1px");
		lblItemName.setValue("Item Name :");
		mainLayout.addComponent(lblItemName, "top:64.0px;left:60.0px;");
		
		// cmbItemName
		cmbItemName = new ComboBox();
		cmbItemName.setImmediate(false);
		cmbItemName.setWidth("268px");
		cmbItemName.setHeight("24px");
		cmbItemName.setImmediate(true);
		cmbItemName.setNullSelectionAllowed(false);
		mainLayout.addComponent(cmbItemName, "top:62.0px;left:132.0px;");
		
		// lblFromDate
		lblFromDate = new Label();
		lblFromDate.setImmediate(false);
		lblFromDate.setWidth("-1px");
		lblFromDate.setHeight("-1px");
		lblFromDate.setValue("From Date :");
		mainLayout.addComponent(lblFromDate, "top:90.0px;left:62.0px;");
		
		// dFromDate
		dFromDate = new PopupDateField();
		dFromDate.setResolution(dFromDate.RESOLUTION_DAY);
		dFromDate.setImmediate(false);
		dFromDate.setWidth("-1px");
		dFromDate.setHeight("24px");
		dFromDate.setInvalidAllowed(false);
		dFromDate.setDateFormat("dd-MM-yyyy");
		//dFromDate.setResolution(4);
		dFromDate.setValue(new java.util.Date());
		mainLayout.addComponent(dFromDate, "top:88.0px;left:132.0px;");
		
		// lblToDate
		lblToDate = new Label();
		lblToDate.setImmediate(false);
		lblToDate.setWidth("-1px");
		lblToDate.setHeight("-1px");
		lblToDate.setValue("To Date :");
		mainLayout.addComponent(lblToDate, "top:118.0px;left:78.0px;");
		
		// dToDate
		dToDate = new PopupDateField();
		dToDate.setImmediate(false);
		dToDate.setWidth("-1px");
		dToDate.setHeight("24px");
		dToDate.setInvalidAllowed(false);
		//dToDate.setResolution(4);
		dToDate.setDateFormat("dd-MM-yyyy");
		dToDate.setResolution(dToDate.RESOLUTION_DAY);
		
		dToDate.setValue(new java.util.Date());
	
		mainLayout.addComponent(dToDate, "top:114.0px;left:132.0px;");
		
		lblline = new Label();
		lblline.setImmediate(false);
		lblline.setWidth("-1px");
		lblline.setHeight("-1px");
		lblline.setValue("________________________________________________________________");
		mainLayout.addComponent(lblline, "top:160.0px;left:20.0px;");
		
		previewButton.setWidth("80px");
		previewButton.setHeight("28px");
		previewButton.setIcon(new ThemeResource("../icons/print.png"));
		mainLayout.addComponent(previewButton,"top:185.opx; left:170.0px");

		exitButton.setWidth("70px");
		exitButton.setHeight("28px");
		exitButton.setIcon(new ThemeResource("../icons/exit1.png"));
		mainLayout.addComponent(exitButton,"top:185.opx; left:250.0px");
		
		return mainLayout;
	}

}
