package com.example.sparePartsReport;

import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.Transaction;

import com.common.share.CommonButton;
import com.common.share.FocusMoveByEnter;
import com.common.share.ReportViewer;
import com.common.share.ReportViewerNew;
import com.common.share.SessionBean;
import com.common.share.SessionFactoryUtil;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.InlineDateField;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Window.Notification;

public class Rptslowmoving extends Window {

	private AbsoluteLayout mainLayout;
	private ComboBox  cmbCategoryName;
	private Label lblCategoryName;
	private Label lblProductName;
	private ComboBox  cmbproductName;
	private Label lblAsOnDate;
	private PopupDateField dAsOnDate;
	private Label lblline;
	private NativeButton previewButton = new NativeButton("Preview");
	private NativeButton exitButton = new NativeButton("Exit");
	private CheckBox chkAllName;
	private CheckBox chkAllCategory;
	private SessionBean sessionBean;

	private Label lblCategoryType;
	private ComboBox cmbcategoryType;

	public Rptslowmoving(String str,SessionBean sessionBean) 
	{
		this.sessionBean = sessionBean;
		buildMainLayout();
		setContent(mainLayout);
		this.setResizable(false);
		this.setCaption("Slow Moving Item Information::  "+ sessionBean.getCompany());
		cmbCategoryName.focus();
		Component ob[]={cmbCategoryName,cmbproductName,dAsOnDate,previewButton};
		new FocusMoveByEnter(this, ob);
		//categoryData();
		categoryType();
		allButtonAction();
	}



	private void categoryType()
	{
		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();

		String query= 
				"select  distinct vCategoryType, vCategoryType from tbRawItemInfo "
						+"where vCategoryType not like '%Spare Parts%'";


		System.out.println(query);

		cmbcategoryType.removeAllItems();
		List list = session.createSQLQuery(query).list();		
		for(Iterator iter = list.iterator(); iter.hasNext();)
		{
			Object[] element = (Object[]) iter.next();
			cmbcategoryType.addItem(element[0]);
			cmbcategoryType.setItemCaption(element[0], element[1].toString());
		}
	}


	@AutoGenerated
	private AbsoluteLayout buildMainLayout() 
	{
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("460px");
		mainLayout.setHeight("206px");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("480px");
		setHeight("256px");
		// lblSection
		lblCategoryType = new Label();
		lblCategoryType.setImmediate(false);
		lblCategoryType.setWidth("-1px");
		lblCategoryType.setHeight("-1px");
		lblCategoryType.setValue("Category  Type :");
		mainLayout.addComponent(lblCategoryType, "top:40.0px;left:45.0px;");

		// cmbSection
		cmbcategoryType = new ComboBox();
		cmbcategoryType.setImmediate(true);
		cmbcategoryType.setWidth("260px");
		cmbcategoryType.setHeight("24px");
		cmbcategoryType.setNullSelectionAllowed(false);
		cmbcategoryType.setNewItemsAllowed(false);
		mainLayout.addComponent( cmbcategoryType, "top:38.0px;left:142.0px;");



		// lblSection
		lblCategoryName = new Label();
		lblCategoryName.setImmediate(false);
		lblCategoryName.setWidth("-1px");
		lblCategoryName.setHeight("-1px");
		lblCategoryName.setValue("Category  Name :");
		mainLayout.addComponent(lblCategoryName, "top:66.0px;left:45.0px;");

		// cmbSection
		cmbCategoryName = new ComboBox();
		cmbCategoryName.setImmediate(true);
		cmbCategoryName.setWidth("260px");
		cmbCategoryName.setHeight("24px");
		cmbCategoryName.setNullSelectionAllowed(false);
		cmbCategoryName.setNewItemsAllowed(false);
		mainLayout.addComponent( cmbCategoryName, "top:64.0px;left:142.0px;");


		lblProductName = new Label();
		lblProductName.setImmediate(false);
		lblProductName.setWidth("-1px");
		lblProductName.setHeight("-1px");
		lblProductName.setValue("Product  Name :");
		mainLayout.addComponent(lblProductName, "top:92.0px;left:45.0px;");


		cmbproductName = new ComboBox();
		cmbproductName.setImmediate(true);
		cmbproductName.setWidth("260px");
		cmbproductName.setHeight("24px");
		cmbproductName.setNullSelectionAllowed(false);
		cmbproductName.setNewItemsAllowed(false);
		mainLayout.addComponent( cmbproductName, "top:90.0px;left:142.0px;");


		chkAllCategory = new CheckBox("");
		chkAllCategory.setCaption("All");
		chkAllCategory.setImmediate(false);
		chkAllCategory.setWidth("-1px");
		chkAllCategory.setHeight("24px");
		chkAllCategory.setImmediate(true);
		mainLayout.addComponent(chkAllCategory, "top:64.0px;left:402.0px;");

		chkAllName = new CheckBox("");
		chkAllName.setCaption("All");
		chkAllName.setImmediate(false);
		chkAllName.setWidth("-1px");
		chkAllName.setHeight("24px");
		chkAllName.setImmediate(true);
		mainLayout.addComponent(chkAllName, "top:90.0px;left:402.0px;");

		lblAsOnDate = new Label();
		lblAsOnDate.setImmediate(false);
		lblAsOnDate.setWidth("-1px");
		lblAsOnDate.setHeight("-1px");
		lblAsOnDate.setValue("As On Date:");
		mainLayout.addComponent(lblAsOnDate, "top:118.0px;left:45.0px;");

		dAsOnDate = new PopupDateField();
		dAsOnDate.setWidth("107px");
		dAsOnDate.setDateFormat("dd-MM-yyyy");
		dAsOnDate.setValue(new java.util.Date());
		dAsOnDate.setResolution(PopupDateField.RESOLUTION_DAY);
		mainLayout.addComponent(dAsOnDate, "top:116.0px;left:142.0px;");


		lblline = new Label();
		lblline.setImmediate(false);
		lblline.setWidth("-1px");
		lblline.setHeight("-1px");
		lblline.setValue("________________________________________________________________");
		mainLayout.addComponent(lblline, "top:142.0px;left:20.0px;");


		previewButton.setWidth("80px");
		previewButton.setHeight("28px");
		previewButton.setIcon(new ThemeResource("../icons/print.png"));
		mainLayout.addComponent(previewButton,"top:168.opx; left:170.0px");

		exitButton.setWidth("70px");
		exitButton.setHeight("28px");
		exitButton.setIcon(new ThemeResource("../icons/exit.png"));
		mainLayout.addComponent(exitButton,"top:168.opx; left:250.0px");


		return mainLayout;
	}

	private void categoryData(String CategoryType)
	{
		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();

		String query= "select iCategoryCode,vCategoryName from tbRawItemCategory "
				+"where vCategoryType not like 'Spare Parts' and vCategoryType='"+CategoryType+"' "
				+"order by iCategoryCode ";



		System.out.println(query);

		cmbCategoryName.removeAllItems();
		List list = session.createSQLQuery(query).list();		
		for(Iterator iter = list.iterator(); iter.hasNext();)
		{
			Object[] element = (Object[]) iter.next();
			cmbCategoryName.addItem(element[0]);
			cmbCategoryName.setItemCaption(element[0], element[1].toString());
		}
	}


	private void productData()
	{
		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();


		/* String  query=  "select   ProductCode, ProductName,CategoryCode from tbRawProductInfo "
				+ " where CategoryCode like   " ;*/

		String query="select vRawItemCode,vRawItemName  from tbRawItemInfo where vGroupId like '"+cmbCategoryName.getValue().toString()+"' ";


		System.out.println(query);

		List list = session.createSQLQuery(query).list();
		cmbproductName.removeAllItems();
		for(Iterator iter = list.iterator(); iter.hasNext();)
		{
			Object[] element = (Object[]) iter.next();
			cmbproductName.addItem(element[0]);
			cmbproductName.setItemCaption(element[0], element[1].toString());
		}
	}


	private void productDataload()
	{
		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();


		//String catid="%";


		String  query=  "select vRawItemCode,vRawItemName from tbRawItemInfo "
				+"where vGroupId like '%' ";


		System.out.println(query);

		List list = session.createSQLQuery(query).list();
		cmbproductName.removeAllItems();
		for(Iterator iter = list.iterator(); iter.hasNext();)
		{
			Object[] element = (Object[]) iter.next();
			cmbproductName.addItem(element[0]);
			cmbproductName.setItemCaption(element[0], element[1].toString());
		}
	}



	private void allButtonAction()
	{
		cmbcategoryType.addListener(new ValueChangeListener() 
		{
			
			@Override
			public void valueChange(ValueChangeEvent event) 
			{
				if(cmbcategoryType.getValue()!=null)
				{
				   String categoryType=cmbcategoryType.getValue().toString();
				   categoryData(categoryType);
				}
				
			}
		});
		
		
		cmbCategoryName.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				if(cmbCategoryName.getValue()!=null)
				{
					productData();
				}
			}
		});

		previewButton.addListener(new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) {
				if(cmbCategoryName.getValue()!=null || chkAllCategory.booleanValue()==true)
				{

					if(cmbproductName.getValue()!=null || chkAllName.booleanValue()==true)
					{
						reportShow();
					}

					else
					{
						showNotification("Select Product Name", Notification.TYPE_WARNING_MESSAGE);
					}

				}
				else
				{
					getParent().showNotification("Select Category Name", Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});


		exitButton.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				close();
			}
		});

		chkAllName.addListener(new ValueChangeListener() 
		{


			public void valueChange(ValueChangeEvent event) 
			{
				boolean bv = chkAllName.booleanValue();
				if(bv==true)
				{
					cmbproductName.setValue(null);
					cmbproductName.setEnabled(false);
				}
				else{
					cmbproductName.setEnabled(true);
				}
			}
		});


		chkAllCategory.addListener(new ValueChangeListener() 
		{


			public void valueChange(ValueChangeEvent event) 
			{
				boolean bv = chkAllCategory.booleanValue();
				if(bv==true)
				{
					cmbCategoryName.setValue(null);
					cmbCategoryName.setEnabled(false);
					productDataload();
				}
				else{
					cmbCategoryName.setEnabled(true);
				}
			}
		});



	}

	private void reportShow()
	{
		System.out.println("into Reportshow");
		String query=null;
		String activeFlag = null;
		String categoryID;
		String productID ;
		String categoryType="";
		
		if(cmbcategoryType.getValue()!=null)
		{
			categoryType=cmbcategoryType.getValue().toString();
		}
			


		if(cmbCategoryName.getValue()!=null)
		{
			categoryID = cmbCategoryName.getValue().toString();

		}

		else
		{
			categoryID ="%"; 

		}


		if(cmbproductName.getValue()!=null)
		{
			productID=cmbproductName.getValue().toString();
		}
		else
		{
			productID ="%";
		}

		try{

			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			Transaction tx = session.beginTransaction();



			HashMap hm = new HashMap();
			hm.put("company", sessionBean.getCompany());
			hm.put("address", sessionBean.getCompanyAddress());
			hm.put("username", sessionBean.getUserName()+"  "+sessionBean.getUserIp());
			hm.put("asonDate", new SimpleDateFormat("dd-MM-yy").format(dAsOnDate.getValue()));
			hm.put("phone", sessionBean.getCompanyContact());
			hm.put("logo", sessionBean.getCompanyLogo());


			session.createSQLQuery("exec PrcSlowmoving '"+new SimpleDateFormat("yyyy/MM/dd").format(dAsOnDate.getValue()) +" "+"23:59:59" + "','"+categoryID+"'  ,'"+productID+"','"+categoryType+"'   ").executeUpdate();
			tx.commit();

			query= " select * from  tbTmpLevelStatementNew order by CategoryId " ;




			System.out.println(query);
			hm.put("sql", query);


			Window win = new ReportViewerNew(hm,"report/raw/rptSlowmoving.jasper",
					this.getWindow().getApplication().getContext().getBaseDirectory()+"".replace("\\","/")+"/VAADIN/rpttmp",
					this.getWindow().getApplication().getURL()+"VAADIN/rpttmp",false,
					this.getWindow().getApplication().getURL()+"VAADIN/applet",1);
			win.setCaption("Report : Issue Register");
			this.getParent().getWindow().addWindow(win);



		}
		catch(Exception exp){

			this.getParent().showNotification("Error "+exp,Notification.TYPE_ERROR_MESSAGE);

		}
	}
}
