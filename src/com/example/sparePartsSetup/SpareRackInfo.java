package com.example.sparePartsSetup;

import acc.appform.setupTransaction.DepoInformation;

import com.common.share.CommonButton;
import com.common.share.FocusMoveByEnter;
import com.common.share.MessageBox;
import com.common.share.MessageBox.ButtonType;
import com.common.share.SessionBean;
import com.common.share.SessionFactoryUtil;
import com.common.share.TextRead;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Window;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.swing.BorderFactory;

import org.hibernate.Session;
import org.hibernate.Transaction;

import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Window.Notification;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
public class SpareRackInfo extends Window 
{
	private AbsoluteLayout mainLayout;
	private TextRead txtRackId;
	private TextField txtRackName;
	private TextField txtFindRackId= new TextField();
	private NativeButton nbStore;
	private Label lblline;
	private ComboBox cmbStoreName;
	CommonButton button = new CommonButton("New", "Save", "", "", "Refresh", "Find", "", "","","Exit");
	private SessionBean sessionBean;
	boolean isUpdate=false;
	boolean isFind=false;
	ArrayList<Component> allComp = new ArrayList<Component>();


	public SpareRackInfo(SessionBean sessionBean) 
	{
		this.sessionBean=sessionBean;
		this.setCaption("RACK INFORMATION :: " + sessionBean.getCompany());
		this.setResizable(false);

		buildMainLayout();
		setContent(mainLayout);

		btnIni(true);
		componentIni(true);
		
		setEventAction();
		cmbStoreAdd();
		authencationCheck();
	}

	private void authencationCheck()
	{
		if(sessionBean.isSubmitable())
		{
			button.btnSave.setVisible(true);
		}
		else
		{
			button.btnSave.setVisible(false);
		}
		if(sessionBean.isUpdateable())
		{
			button.btnEdit.setVisible(true);
		}
		else
		{
			button.btnEdit.setVisible(false);
		}
		if(sessionBean.isDeleteable())
		{
			button.btnDelete.setVisible(true);
		}
		else
		{
			button.btnDelete.setVisible(false);
		}
	}

	private void focusEnter()
	{
		allComp.add(txtRackName);
		allComp.add(cmbStoreName);
		allComp.add(button.btnNew);
		allComp.add(button.btnSave);
		allComp.add(button.btnEdit);
		allComp.add(button.btnRefresh);
		allComp.add(button.btnFind);
		allComp.add(button.btnExit);

		new FocusMoveByEnter(this,allComp);
	}

	public void setEventAction()
	{
		button.btnNew.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				focusEnter();
				txtRackName.focus();
				isFind=false;
				newButtonEvent();
			}
		});

		button.btnEdit.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				if(sessionBean.isUpdateable()){
					updateButtonEvent();
					focusEnter();
					txtRackName.focus();
				}else{
					getParent().showNotification("Warning!","You havn't Proper Authentication to Edit.", Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

		button.btnSave.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				if(sessionBean.isUpdateable()){
					if(!txtRackName.getValue().toString().isEmpty()){
						saveButtonEvent();
					}
					else{
						showNotification("Warning!","Enter Rack Name.",Notification.TYPE_WARNING_MESSAGE);
					}
				}else{
					showNotification("Warning!","You havn't Proper Authentication to Save.", Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

		button.btnFind.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				isFind=true;
				findButtonEvent();
			}
		});

		button.btnRefresh.addListener(new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) {
				refreshButtonEvent();
			}
		});

		button.btnExit.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				close();
			}
		});

		nbStore.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				System.out.println("Rack Form");
				storeFormLink();				
			}
		});
	
		txtRackName.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				Transaction tx = null;
				Session session = SessionFactoryUtil.getInstance().getCurrentSession();
				tx = session.beginTransaction();
				
				if(!txtRackName.getValue().toString().isEmpty())
				{
					List list = session.createSQLQuery("select * from tbRackInformation where vRackName like '"+txtRackName.getValue().toString().trim()+"'").list();
					
					if(list.isEmpty() )
					{
					  System.out.println("Rack");	
					}
					else
					{
						if(!isFind)
						{
							 showNotification("Warning! Rack Name Already Exists :" +txtRackName.getValue().toString(),Notification.TYPE_WARNING_MESSAGE);
							 txtRackName.setValue("");	
						}
					 }
				}
			}
		});
	}

	private void findButtonEvent() 
	{
		Window win = new SpareRackInfoFind(sessionBean, txtFindRackId);
		win.addListener(new Window.CloseListener() 
		{
			public void windowClose(CloseEvent e) 
			{
				if (txtFindRackId.getValue().toString().length() > 0)
				{
					txtClear();
					findInitialise(txtFindRackId.getValue().toString());
				}
			}
		});

		this.getParent().addWindow(win);
	}

	private void findInitialise(String strtxtRackId) 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			
			String query="";
			query=" SElect vRackId,vRackName,vDepoId,vDepoName from tbRackInformation Where vRackId = '"+strtxtRackId+"'  ";

			List led = session.createSQLQuery(query).list();

			if (led.iterator().hasNext()) 
			{
				Object[] element = (Object[]) led.iterator().next();

				txtRackId.setValue(element[0]);
				txtRackName.setValue(element[1]);
				cmbStoreName.addItem(element[2]);
				cmbStoreName.setValue(element[2]);
				//findRackId = element[0].toString();
			}
		}
		catch (Exception exp) 
		{
			showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	public void storeFormLink()
	{
		Window win = new DepoInformation(sessionBean);

		win.setStyleName("cwindow");
		win.setModal(true);
		win.addListener(new Window.CloseListener() 
		{
			public void windowClose(CloseEvent e) 
			{
				cmbStoreAdd();
				System.out.println("Store Form");
			}
		});
		this.getParent().addWindow(win);
	}

	private void updateButtonEvent()
	{
		if(!txtRackName.getValue().toString().isEmpty())
		{
			isUpdate = true;
			btnIni(false);
			componentIni(false);
			txtRackId.setEnabled(false);
		}
		else
		{
			this.getParent().showNotification("Update Failed","There are no data for update.",Notification.TYPE_WARNING_MESSAGE);
		}
	}

	private void refreshButtonEvent() 
	{
		isUpdate=false;
		componentIni(true);
		btnIni(true);
		txtClear();
		cmbStoreAdd();
	}

	public boolean updateData() 
	{
		Transaction tx = null;
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			
			String sqlUd="insert into tbUDRackInformation select vRackID, vRackName, vDepoId, vDepoName, "
					+ "'Update',vUserId,vUserName, vUserIP, dtEntryTime from tbRackInformation "
					+ " where vRackID like '"+txtRackId.getValue()+"'";
			System.out.println("InsertUD : "+sqlUd);
			session.createSQLQuery(sqlUd).executeUpdate();

			String updateQuery = "Update tbRackInformation set" +
					" vRackName = '"+txtRackName.getValue().toString().trim().replaceAll("'", " ").replaceAll("\\s{2,}", " ")+"'," +
					" vDepoId= '"+cmbStoreName.getValue().toString()+"'," +
					" vDepoName = '"+cmbStoreName.getItemCaption(cmbStoreName.getValue())+"'," +
					" vUserId ='"+sessionBean.getUserId()+"'," +
					" vUserName='"+sessionBean.getUserName()+"'," +
					" vUserIP='"+sessionBean.getUserIp()+"', "+
					" dtEntryTime= CURRENT_TIMESTAMP where" +
					" vRackId = '"+txtRackId.getValue().toString().trim()+"'";

			session.createSQLQuery(updateQuery).executeUpdate();
			
		
				String sqlUDinsert = "insert into tbUDRackInformation (vRackID, vRackName, vDepoId, "
						+ "vDepoName, vUdFlag, vUserId, vUserName, vUserIP, dtEntryTime) "
						+ "values('"+txtRackId.getValue()+"','"+txtRackName.getValue().toString().replaceAll("'", " ").replaceAll("\\s{2,}", " ")+"', "
						+ "'"+cmbStoreName.getValue().toString()+"','"+cmbStoreName.getItemCaption(cmbStoreName.getValue())+"',"
						+ "'New','"+sessionBean.getUserId()+"','"+sessionBean.getUserName()+"',"
						+ "'"+sessionBean.getUserIp()+"',CURRENT_TIMESTAMP)";
				session.createSQLQuery(sqlUDinsert).executeUpdate();
			

			System.out.println("updateQuery : "+updateQuery);

			tx.commit();
			showNotification("Updated successfully.");
			return true;
		}
		catch(Exception exp)
		{
			if(tx!=null){
				tx.rollback();
			}
			showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}
			return false;
	}

	private void saveButtonEvent() 
	{
		if(!txtRackName.getValue().toString().isEmpty())
		{
			if(cmbStoreName.getValue()!=null)
			{
				if(isUpdate)
				{
					final MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to update product information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
					mb.show(new MessageBox.EventListener()
					{
						public void buttonClicked(ButtonType buttonType)
						{
							if(buttonType == ButtonType.YES)
							{
								mb.buttonLayout.getComponent(0).setEnabled(false);
								updateData();
								button.btnNew.focus();
								isUpdate=false;
								isFind=false;
								componentIni(true);
								txtClear();
								btnIni(true);
								mb.close();
							}
						}
					});		
				}
				else
				{
					final MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to Save information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
					mb.show(new MessageBox.EventListener()
					{
						public void buttonClicked(ButtonType buttonType)
						{
							if(buttonType == ButtonType.YES)
							{
								mb.buttonLayout.getComponent(0).setEnabled(false);
								insertData();
								btnIni(true);
								componentIni(true);
								txtClear();
								isUpdate = false;
								isFind=false;
								btnIni(true);
								button.btnNew.focus();
								mb.close();
							}
						}
					});		
				}
			}

			else
			{
				showNotification("Warning!", "Please select store Name.", Notification.TYPE_WARNING_MESSAGE);
				cmbStoreName.focus();
			}	
		}
		
		else
		{
			showNotification("Warning !", "Please select Rack Name.", Notification.TYPE_WARNING_MESSAGE);
			txtRackName.focus();
		}	
	}

	private boolean insertData()
	{
		Transaction tx = null;
		String rackId = "";
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			
			String rackIdquery = " select ('R-'+ISNULL((SELECT CAST((max(cast(substring(vRackId,3,len(vRackId)-1) as int))+1)as Varchar) from tbRackInformation ),1)) RackId";
			
			/*String rackIdquery = " select ('R-'+ISNULL((SELECT cast((max(substring(vRackId,3,len(vRackId)-1))+1)as VARCHAR) FROM tbRackInformation),1)) RackId";
			*/
			Iterator iter=session.createSQLQuery(rackIdquery).list().iterator();
			if (iter.hasNext()) 
			{
				rackId = iter.next().toString();
			}
			

			String insertQuery =  "insert into tbRackInformation (vRackID, vRackName, vDepoId, "
					+ "vDepoName, vUserId, vUserName, vUserIP, dtEntryTime) "
					+ "values('"+rackId+"','"+txtRackName.getValue().toString().replaceAll("'", " ").replaceAll("\\s{2,}", " ")+"', "
					+ "'"+cmbStoreName.getValue().toString()+"','"+cmbStoreName.getItemCaption(cmbStoreName.getValue())+"',"
					+ "'"+sessionBean.getUserId()+"','"+sessionBean.getUserName()+"',"
					+ "'"+sessionBean.getUserIp()+"',CURRENT_TIMESTAMP)";

			session.createSQLQuery(insertQuery).executeUpdate();

			tx.commit();

			showNotification("All information saved successfully.");
			btnIni(true);
			return true;
		}
		catch(Exception exp)
		{
			if(tx!=null){
				tx.rollback();
			}
			showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}
		return false;
	}

	private void newButtonEvent()                                                                                                                                                                                                                                                                                                                                      
	{
		componentIni(false);
		btnIni(false);
		txtClear();
		newBtnData(1);
		txtRackId.setEnabled(false);	
	}

	
	public void cmbStoreAdd()
	{
		cmbStoreName.removeAllItems();
		try{
	
			String sql="Select vDepoId,vDepoName from tbDepoInformation order by vDepoName";
			Iterator<?> iter=dbService(sql);
			while(iter.hasNext())
			{
				Object[] element = (Object[]) iter.next();
				cmbStoreName.addItem(element[0]);
				cmbStoreName.setItemCaption(element[0],  element[1].toString());
			}
		}
		catch(Exception exp)
		{
			showNotification("Error here",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}
	}
	private Iterator<?> dbService(String sql){

		System.out.println(sql);
		Session session=null;
		Iterator<?> iter=null;
		try {
			session=SessionFactoryUtil.getInstance().openSession();
			iter=session.createSQLQuery(sql).list().iterator();
		} 
		catch (Exception e) {
			showNotification(null,""+e,Notification.TYPE_ERROR_MESSAGE);
		}
		finally{
			if(session!=null){
				session.close();
			}
		}
		return iter;
	}
	public void newBtnData(int flag)
	{
		
			Transaction tx = null;
			try
			{
				Session session = SessionFactoryUtil.getInstance().getCurrentSession();
				tx = session.beginTransaction();
				String sql = "select ('R-'+ISNULL((SELECT CAST((max(cast(substring(vRackId,3,len(vRackId)-1) as int))+1)as Varchar) from tbRackInformation ),1)) RackId";
				Iterator iter = session.createSQLQuery(sql).list().iterator();
				int num = 0;

				if (iter.hasNext())
				{
					//num = Integer.parseInt(iter.next().toString());
					txtRackId.setValue(iter.next());
				}
			}
			catch(Exception ex)
			{
				showNotification("Error",ex+"",Notification.TYPE_ERROR_MESSAGE);
			}
		
	}

	public void txtClear()
	{
		txtRackId.setValue("");
		txtRackName.setValue("");
		cmbStoreName.setValue(null);
	}

	private void componentIni(boolean b) 
	{
		txtRackId.setEnabled(!b);		
		txtRackName.setEnabled(!b);
		cmbStoreName.setEnabled(!b);
		
		lblline.setEnabled(!b);
		nbStore.setEnabled(!b);
	}

	private void btnIni(boolean t)
	{
		button.btnNew.setEnabled(t);
		button.btnEdit.setEnabled(t);
		button.btnSave.setEnabled(!t);
		button.btnRefresh.setEnabled(!t);
		button.btnDelete.setEnabled(t);
		button.btnFind.setEnabled(t);
	}
	private AbsoluteLayout buildMainLayout() 
	{
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("530px");
		mainLayout.setHeight("210px");
		mainLayout.setMargin(false);

		/*// top-level component properties
		setWidth("540px");
		setHeight("290px");*/

		txtRackId= new TextRead();
		txtRackId.setImmediate(false);
		txtRackId.setWidth("101px");
		txtRackId.setHeight("24px");
		mainLayout.addComponent(new Label("Rack ID"), "top:30.0px;left:43.0px;");
		mainLayout.addComponent(txtRackId, "top:28.0px;left:160.0px;");

		txtRackName = new TextField();
		txtRackName.setImmediate(false);
		txtRackName.setWidth("280px");
		txtRackName.setHeight("-1px");
		txtRackName.setSecret(false);
		mainLayout.addComponent(new Label("Rack Name"), "top:57.0px;left:43.0px;");
		mainLayout.addComponent(txtRackName, "top:54.0px;left:160.0px;");

		cmbStoreName= new ComboBox();
		cmbStoreName.setImmediate(true);
		cmbStoreName.setWidth("280px");
		cmbStoreName.setNullSelectionAllowed(true);
		cmbStoreName.setNewItemsAllowed(false);
		cmbStoreName.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		mainLayout.addComponent(new Label("Store Name"), "top:83.0px;left:43.0px;");
		mainLayout.addComponent(cmbStoreName, "top:80.0px;left:160.0px;");
		
		nbStore = new NativeButton();
		nbStore.setIcon(new ThemeResource("../icons/add.png"));
		nbStore.setStyleName("nbStore");
        nbStore.setImmediate(true);
		nbStore.setWidth("32px");
		nbStore.setHeight("24px");
		mainLayout.addComponent(nbStore,"top:80.0px;left:450.0px;");

		lblline= new Label();
		lblline.setImmediate(false);
		lblline.setWidth("-1px");
		lblline.setHeight("-1px");
		lblline.setValue("_________________________________________________________________________");
		mainLayout.addComponent(lblline, "top:120.0px;left:10.0px;");

		mainLayout.addComponent(button, "top:160.0px;left:40.0px;");
		return mainLayout;
	}	
}
