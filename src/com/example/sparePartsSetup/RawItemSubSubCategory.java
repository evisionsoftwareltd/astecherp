package com.example.sparePartsSetup;

import com.common.share.CommonButton;
import com.common.share.FocusMoveByEnter;
import com.common.share.MessageBox;
import com.common.share.MessageBox.ButtonType;
import com.common.share.SessionBean;
import com.common.share.SessionFactoryUtil;
import com.common.share.TextRead;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Window;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import org.hibernate.Session;
import org.hibernate.Transaction;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Window.Notification;

public class RawItemSubSubCategory extends Window 
{
	private AbsoluteLayout mainLayout;
	private Label lblSubSubCategoryID;
	private TextRead trsubSubcategoryId;
	private Label lblSubCategoryName;
	private TextField txtsubSubcategoryName;
	private Label lblsubCategoryName;
	private ComboBox cmbsubCategoryName ;
	private NativeButton nbCategory;
	private Label lblline;
	private ComboBox cmbCategory;
	private Label lblcategory;
	private Label lblcategorytype;
	private ComboBox cmbCategoryType;
	

	CommonButton button = new CommonButton("New", "Save", "Edit", "", "Refresh", "Find", "", "","","Exit");

	private TextField txtSubCategoryID = new TextField();

	private SessionBean sessionBean;
	boolean isUpdate=false;
	ArrayList<Component> allComp = new ArrayList<Component>();

	private String findSubGroupId = "";

	public RawItemSubSubCategory(SessionBean sessionBean) 
	{
		this.sessionBean=sessionBean;
		this.setCaption("RAW ITEM SUB SUBCATEGORY :: " + sessionBean.getCompany());
		this.setResizable(false);

		buildMainLayout();
		setContent(mainLayout);

		btnIni(true);
		componentIni(true);
		categoryTypeLoad();
		//cmbCategorydataload();
		//cmbsubCategoryValueAdd();
		setEventAction();
		authencationCheck();
	}

	private void authencationCheck()
	{
		if(sessionBean.isSubmitable())
		{
			button.btnSave.setVisible(true);
		}
		else
		{
			button.btnSave.setVisible(false);
		}
		if(sessionBean.isUpdateable())
		{
			button.btnEdit.setVisible(true);
		}
		else
		{
			button.btnEdit.setVisible(false);
		}
		if(sessionBean.isDeleteable())
		{
			button.btnDelete.setVisible(true);
		}
		else
		{
			button.btnDelete.setVisible(false);
		}
	}

	private void focusEnter()
	{
		allComp.add(txtsubSubcategoryName);
		allComp.add(cmbsubCategoryName);

		allComp.add(button.btnNew);
		allComp.add(button.btnSave);
		allComp.add(button.btnEdit);
		allComp.add(button.btnRefresh);
		allComp.add(button.btnFind);
		allComp.add(button.btnExit);

		new FocusMoveByEnter(this,allComp);
	}

	public void setEventAction()
	{
		button.btnNew.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				focusEnter();
				txtsubSubcategoryName.focus();
				newButtonEvent();
			}
		});

		button.btnEdit.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				if(sessionBean.isUpdateable()){
					updateButtonEvent();
					focusEnter();
					txtsubSubcategoryName.focus();
				}else{
					getParent().showNotification("Warning,","You have not Proper Authentication to Edit.", Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

		button.btnSave.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				if(sessionBean.isUpdateable()){
					if(!txtsubSubcategoryName.getValue().toString().isEmpty()){
						saveButtonEvent();
					}else{
						getParent().showNotification("Warning,","Enter Sub Category Name",Notification.TYPE_WARNING_MESSAGE);
					}
				}else{
					getParent().showNotification("Warning,","You have not Proper Authentication to Save.", Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

		button.btnFind.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				findButtonEvent();
			}
		});

		button.btnRefresh.addListener(new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) {
				refreshButtonEvent();
				cmbCategoryValueAdd();
			}
		});

		button.btnExit.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				close();
			}
		});

		nbCategory.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				System.out.println("Category Form");
				gradeFormLink();				
			}
		});
		

		cmbCategoryType.addListener(new ValueChangeListener() {
			
			
			public void valueChange(ValueChangeEvent event) 
			{
				
				 if(cmbCategoryType.getValue()!=null)
				 {
					 cmbCategorydataload(); 
				 }
			}
		});
		
		
		
		cmbCategory.addListener(new ValueChangeListener() {
			
			
			public void valueChange(ValueChangeEvent event) 
			{
				
				 if(cmbCategory.getValue()!=null)
				 {
					 cmbsubCategoryValueAdd(); 
				 }
			}
		});
		
		
		
	}

	private void findButtonEvent() 
	{
		Window win = new RawsubsubCategoryFind(sessionBean, txtSubCategoryID);
		win.addListener(new Window.CloseListener() 
		{
			public void windowClose(CloseEvent e) 
			{
				if (txtSubCategoryID.getValue().toString().length() > 0)
				{
					txtClear();
					findInitialise(txtSubCategoryID.getValue().toString());
				}
			}
		});

		this.getParent().addWindow(win);
	}

	private void findInitialise(String txtSubCatogoryId) 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			/*List led = session.createSQLQuery(" select iSubCategoryID,vSubCategoryName,iCategoryID,SubGroup_Id from" +
					" tbRawItemSubCategory Where iSubCategoryID = '"+txtSubCatogoryId+"' ").list();*/
			String query= " select iSubSubCategoryID,vSubSubCategoryName,groupid, SubGroupid ,vCategoryType   from tbRawItemSubSubCategory where  iSubSubCategoryID like  '"+txtSubCatogoryId+"' ";
			
			List led= session.createSQLQuery(query ).list();
			

			if (led.iterator().hasNext()) 
			{
				Object[] element = (Object[]) led.iterator().next();

				trsubSubcategoryId.setValue(element[0]);
				txtsubSubcategoryName.setValue(element[1]);
				cmbCategoryType.setValue(element[4].toString());
				cmbCategory.setValue(element[2].toString());
				cmbsubCategoryName.setValue(element[3].toString());
				
			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	public void gradeFormLink()
	{
		Window win = new SpareItemCategory(sessionBean);

		win.setStyleName("cwindow");
		win.setModal(true);
		win.addListener(new Window.CloseListener() 
		{
			public void windowClose(CloseEvent e) 
			{
				//cmbCategoryData();
				System.out.println("Category Form");
			}
		});
		this.getParent().addWindow(win);
	}

	private void cmbCategorydataload()
	{
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			Transaction tx = session.beginTransaction();
			String query = "select Group_Id,vCategoryName from tbRawItemCategory where vCategoryType like '"+cmbCategoryType.getValue()+"'";
			System.out.println(query);

			List list = session.createSQLQuery(query).list();

			for(Iterator iter = list.iterator(); iter.hasNext();)
			{
				Object[] element = (Object[]) iter.next();
				if (element[0] != null)
				{
					cmbCategory.addItem(element[0]);
					cmbCategory.setItemCaption(element[0], (String) element[1]);			
				}
			}
		}
		catch (Exception ex) {
			this.getParent().showNotification("Error",ex.toString(), Notification.TYPE_ERROR_MESSAGE);
		}
	}
	
	private void cmbsubCategoryValueAdd()
	{
		try
		{
			cmbsubCategoryName.removeAllItems();
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			Transaction tx = session.beginTransaction();
			String query = "select  SubGroup_Id, vSubCategoryName  from tbRawItemSubCategory where Group_Id like '"+cmbCategory.getValue().toString()+"'";
			System.out.println(query);

			List list = session.createSQLQuery(query).list();

			for(Iterator iter = list.iterator(); iter.hasNext();)
			{
				Object[] element = (Object[]) iter.next();
				if (element[0] != null)
				{
					cmbsubCategoryName.addItem(element[0]);
					cmbsubCategoryName.setItemCaption(element[0], (String) element[1]);			
				}
			}
		}
		catch (Exception ex) {
			this.getParent().showNotification("Error",ex.toString(), Notification.TYPE_ERROR_MESSAGE);
		}
	}
	
	private void categoryTypeLoad()
	{
		try
		{
			cmbCategoryType.removeAllItems();
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			Transaction tx = session.beginTransaction();
			String query = "select  distinct 0,vCategoryType from tbRawItemCategory";
			System.out.println(query);

			List list = session.createSQLQuery(query).list();

			for(Iterator iter = list.iterator(); iter.hasNext();)
			{
				Object[] element = (Object[]) iter.next();
				if (element[0] != null)
				{
					cmbCategoryType.addItem(element[1]);
					cmbCategoryType.setItemCaption(element[1], (String) element[1]);			
				}
			}
		}
		catch (Exception ex) {
			this.getParent().showNotification("Error",ex.toString(), Notification.TYPE_ERROR_MESSAGE);
		}
	}
	
	
	
	
/*	private void cmbCategoryData()
	{
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			Transaction tx = session.beginTransaction();
			String query = "Select iCategoryCode, vCategoryName from tbRawItemCategory";
			System.out.println(query);

			List list = session.createSQLQuery(query).list();

			for(Iterator iter = list.iterator(); iter.hasNext();)
			{
				Object[] element = (Object[]) iter.next();
				if (element[0] != null)
				{
					cmbsubCategoryName.addItem(element[0]);
					cmbsubCategoryName.setItemCaption(element[0], (String) element[1]);			
				}
			}
		}
		catch (Exception ex) {
			this.getParent().showNotification("Error",ex.toString(), Notification.TYPE_ERROR_MESSAGE);
		}
	}*/
	
	
	private void updateButtonEvent()
	{
		if(!txtsubSubcategoryName.getValue().toString().isEmpty())
		{
			isUpdate = true;
			btnIni(false);
			componentIni(false);
			trsubSubcategoryId.setEnabled(false);
		}
		else
		{
			this.getParent().showNotification("Update Failed","There are no data for update.",Notification.TYPE_WARNING_MESSAGE);
		}
	}

	private void refreshButtonEvent() 
	{
		isUpdate=false;
		componentIni(true);
		btnIni(true);
		txtClear();
	}

	public void updateData() 
	{
		Transaction tx = null;
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			/*String updateQuery = "Update tbRawItemSubCategory set" +
					" vSubCategoryName = '"+txtsubSubcategoryName.getValue().toString().trim()+"'," +
					" iCategoryID='"+cmbsubCategoryName.getValue()+"'," +
					" Group_Id = (Select Group_Id From tbRawItemCategory where iCategoryCode='"+cmbsubCategoryName.getValue()+"') ," +
					" vUserName ='"+sessionBean.getUserName()+"'," +
					" vUserIP='"+sessionBean.getUserIp()+"'," +
					" dtEntryTime= CURRENT_TIMESTAMP where" +
					" iSubCategoryID = '"+trsubSubcategoryId.getValue().toString().trim()+"'";*/
			
			
		  
			String updateququery= "update  tbRawItemSubSubCategory set  vSubSubCategoryName='"+txtsubSubcategoryName.getValue().toString()+"', iSubCategoryid= ( select iSubCategoryID from tbRawItemSubCategory where Group_Id like '"+cmbCategory.getValue()+"') ,SubGroupid='"+cmbsubCategoryName.getValue().toString()+"',vUserName='"+sessionBean.getUserName()+"',vUserIP='"+sessionBean.getUserIp()+"',dtEntryTime=getdate(),groupid='"+cmbCategory.getValue().toString()+"',vCategoryType='"+cmbCategoryType.getValue().toString()+"' "
					            + " where iSubSubCategoryID like '"+trsubSubcategoryId.getValue().toString()+"' ";
			
			
			
/*
			String sql = "UPDATE tbSub_Group set " +
					" Sub_Group_Name = '"+txtSubcategoryName.getValue().toString().trim()+"' ," +
					" Group_Id = (Select Group_Id From tbRawItemCategory where iCategoryCode='"+cmbsubCategoryName.getValue()+"') ," +
					" userIp = '"+sessionBean.getUserIp()+"', " +
					" userId = '"+sessionBean.getUserId()+"', " +
					" entryTime = CURRENT_TIMESTAMP" +
					" where Sub_Group_Id = '"+findSubGroupId+"' ";*/

			//session.createSQLQuery(updateQuery).executeUpdate();
			session.createSQLQuery(updateququery).executeUpdate();

			System.out.println("updateQuery : "+updateququery);

			tx.commit();
			this.getParent().showNotification("Updated successfully.");
			cmbCategoryValueAdd();
		}
		catch(Exception exp)
		{
			this.getParent().showNotification("Error",exp.toString(),Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}	
	}

	private void saveButtonEvent() 
	{
		if(cmbsubCategoryName.getValue()!=null)
		{
			if(isUpdate)
			{
				MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to update product information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
				mb.show(new MessageBox.EventListener()
				{
					public void buttonClicked(ButtonType buttonType)
					{
						if(buttonType == ButtonType.YES)
						{
							updateData();
							button.btnNew.focus();
							isUpdate=false;
							componentIni(true);
							txtClear();
							btnIni(true);
						}
					}
				});		
			}
			else
			{
				MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to Save information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
				mb.show(new MessageBox.EventListener()
				{
					public void buttonClicked(ButtonType buttonType)
					{
						if(buttonType == ButtonType.YES)
						{
							insertData();
							btnIni(true);
							cmbCategoryValueAdd();
							componentIni(true);
							txtClear();
							btnIni(true);
							button.btnNew.focus();
						}
					}
				});		
			}
		}

		else
		{
			this.getParent().showNotification("Warning :", "Please select Category Name", Notification.TYPE_WARNING_MESSAGE);
			cmbsubCategoryName.focus();
		}
	}

	private void insertData()
	{
		Transaction tx = null;
		String subGroupId = "";
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			List lst = session.createSQLQuery("select 0 zero,('S'+ISNULL((SELECT cast((max(substring(Sub_Group_Id,2,len(Group_Id)-1))+1)" +
					" as VARCHAR) FROM tbSub_Group),101)) id").list();

			if (lst.iterator().hasNext()) 
			{
				Object[] element = (Object[]) lst.iterator().next();

				subGroupId = element[1].toString();
			}

		/*	String insertQuery = "Insert Into tbRawItemSubCategory (iSubCategoryID,vSubCategoryName,iCategoryID," +
					" Group_Id,SubGroup_Id,vUserName,vUserIP,dtEntryTime) values" +
					" ('"+trsubSubcategoryId.getValue().toString().trim()+"'," +
					" '"+txtSubcategoryName.getValue().toString().trim()+"'," +
					" '"+cmbsubCategoryName.getValue()+"'," +
					" (Select Group_Id From tbRawItemCategory where iCategoryCode='"+cmbsubCategoryName.getValue()+"')," +
					" '"+subGroupId+"'," +
					" '"+sessionBean.getUserName()+"'," +
					" '"+sessionBean.getUserIp()+"',CURRENT_TIMESTAMP)";*/
			
			String  insertQuery= " insert into tbRawItemSubSubCategory(iSubSubCategoryID,vSubSubCategoryName,iSubCategoryid,SubGroupid,SubSubGroup_Id,vUserName,vUserIP,dtEntryTime,groupid,vCategoryType) "
					            +" values('"+trsubSubcategoryId.getValue().toString().trim()+"','"+txtsubSubcategoryName.getValue().toString().trim()+"', "
			                    + "( select iSubCategoryID from tbRawItemSubCategory where Group_Id like '"+cmbCategory.getValue()+"'),    "
					            +" '"+cmbsubCategoryName.getValue().toString()+"', '','"+sessionBean.getUserName()+"','"+sessionBean.getUserIp()+"',CURRENT_TIMESTAMP,'"+cmbCategory.getValue().toString()+"','"+cmbCategoryType.getValue().toString()+"') ";
			
			
/*
			String sql = "INSERT INTO tbSub_Group(Sub_Group_Id,Sub_Group_Name,Group_Id,userId,userIp,entryTime)" +
					" VALUES( '"+subGroupId+"', " +
					" '"+txtSubcategoryName.getValue()+"'," +
					" (Select Group_Id From tbRawItemCategory where iCategoryCode='"+cmbsubCategoryName.getValue()+"')," +
					" '"+sessionBean.getUserId()+"'," +
					" '"+sessionBean.getUserIp()+"',CURRENT_TIMESTAMP)";
*/
			//session.createSQLQuery(sql).executeUpdate();
			session.createSQLQuery(insertQuery).executeUpdate();

			tx.commit();

			this.getParent().showNotification("All information Save successfully.");
			btnIni(true);
		}
		catch(Exception exp)
		{
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	private void newButtonEvent() 
	{
		componentIni(false);
		btnIni(false);
		txtClear();
		newBtnData(1);
		cmbCategoryValueAdd();
		trsubSubcategoryId.setEnabled(false);	
	}

	public void cmbCategoryValueAdd()
	{
		cmbsubCategoryName.removeAllItems();
		Transaction tx = null;
		try{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			List list = session.createSQLQuery("select  SubGroup_Id, vSubCategoryName  from  tbRawItemSubCategory").list();

			for(Iterator iter=list.iterator();iter.hasNext();)
			{
				Object[] element = (Object[]) iter.next();
				cmbsubCategoryName.addItem(element[0]);
				cmbsubCategoryName.setItemCaption(element[0], (String) element[1]);
			}
		}
		catch(Exception exp)
		{
			this.getParent().showNotification("Error here",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}
	}

	public void newBtnData(int flag)
	{
		if(txtsubSubcategoryName.getValue().toString().isEmpty() || flag==1)
		{
			Transaction tx = null;
			try
			{
				Session session = SessionFactoryUtil.getInstance().getCurrentSession();
				tx = session.beginTransaction();
				String sql = "Select isnull(max(iSubSubCategoryID)+1,1) as subcat from tbRawItemsubSubCategory";
				Iterator iter = session.createSQLQuery(sql).list().iterator();
				int num = 0;

				if (iter.hasNext())
				{
					num = Integer.parseInt(iter.next().toString());
					trsubSubcategoryId.setValue(num);
				}
			}
			catch(Exception ex)
			{
				this.getParent().showNotification("Error",ex+"",Notification.TYPE_ERROR_MESSAGE);
			}
		}
	}

	public void txtClear()
	{
		trsubSubcategoryId.setValue("");
		txtsubSubcategoryName.setValue("");
		cmbsubCategoryName.setValue(null);
		cmbCategory.setValue(null);
		cmbCategoryType.setValue(null);
	}

	private void componentIni(boolean b) 
	{
		lblSubSubCategoryID.setEnabled(!b);
		trsubSubcategoryId.setEnabled(!b);		

		lblSubCategoryName.setEnabled(!b);
		txtsubSubcategoryName.setEnabled(!b);

		lblsubCategoryName.setEnabled(!b);
		cmbsubCategoryName.setEnabled(!b);
		cmbCategory.setEnabled(!b);
		cmbCategoryType.setEnabled(!b);

		lblline.setEnabled(!b);

		nbCategory.setEnabled(!b);
		
		lblcategorytype.setEnabled(!b);
		lblcategory.setEnabled(!b);
	}

	private void btnIni(boolean t)
	{
		button.btnNew.setEnabled(t);
		button.btnEdit.setEnabled(t);
		button.btnSave.setEnabled(!t);
		button.btnRefresh.setEnabled(!t);
		button.btnDelete.setEnabled(t);
		button.btnFind.setEnabled(t);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() 
	{
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("530px");
		mainLayout.setHeight("256px");
		mainLayout.setMargin(false);

		/*// top-level component properties
		setWidth("540px");
		setHeight("290px");*/

		// lblCategoryId
		lblSubSubCategoryID = new Label();
		lblSubSubCategoryID.setImmediate(false);
		lblSubSubCategoryID.setWidth("-1px");
		lblSubSubCategoryID.setHeight("-1px");
		lblSubSubCategoryID.setValue(" Sub SubCategory ID:");
		mainLayout.addComponent(lblSubSubCategoryID, "top:30.0px;left:43.0px;");

		// categoryRead
		trsubSubcategoryId= new TextRead();
		trsubSubcategoryId.setImmediate(false);
		trsubSubcategoryId.setWidth("101px");
		trsubSubcategoryId.setHeight("24px");
		mainLayout.addComponent(trsubSubcategoryId, "top:28.0px;left:170.0px;");

		// labCategoryName
		lblSubCategoryName = new Label();
		lblSubCategoryName.setImmediate(false);
		lblSubCategoryName.setWidth("-1px");
		lblSubCategoryName.setHeight("-1px");
		lblSubCategoryName.setValue(" Sub SubCategory Name :");
		mainLayout.addComponent(lblSubCategoryName, "top:60.0px;left:20.0px;");

		// txtCategoryname
		txtsubSubcategoryName = new TextField();
		txtsubSubcategoryName.setImmediate(false);
		txtsubSubcategoryName.setWidth("280px");
		txtsubSubcategoryName.setHeight("-1px");
		txtsubSubcategoryName.setSecret(false);
		mainLayout.addComponent(txtsubSubcategoryName, "top:57.0px;left:170.0px;");
		
		lblcategorytype = new Label();
		lblcategorytype.setImmediate(false);
		lblcategorytype.setWidth("-1px");
		lblcategorytype.setHeight("-1px");
		lblcategorytype.setValue("Item Type :");
		mainLayout.addComponent(lblcategorytype, "top:87.0px;left:45.0px;");

		cmbCategoryType= new ComboBox();
		cmbCategoryType.setImmediate(true);
		cmbCategoryType.setWidth("280px");
		cmbCategoryType.setNullSelectionAllowed(true);
		cmbCategoryType.setNewItemsAllowed(false);
		cmbCategoryType.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		mainLayout.addComponent(cmbCategoryType, "top:83.0px;left:170.0px;");
		
		
		lblcategory = new Label();
		lblcategory.setImmediate(false);
		lblcategory.setWidth("-1px");
		lblcategory.setHeight("-1px");
		lblcategory.setValue("Category Name:");
		mainLayout.addComponent(lblcategory, "top:112.0px;left:45.0px;");

		cmbCategory= new ComboBox();
		cmbCategory.setImmediate(true);
		cmbCategory.setWidth("280px");
		cmbCategory.setNullSelectionAllowed(true);
		cmbCategory.setNewItemsAllowed(false);
		cmbCategory.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		mainLayout.addComponent(cmbCategory, "top:109.0px;left:170.0px;");
		
	
		lblsubCategoryName = new Label();
		lblsubCategoryName.setImmediate(false);
		lblsubCategoryName.setWidth("-1px");
		lblsubCategoryName.setHeight("-1px");
		lblsubCategoryName.setValue(" Sub Category Name:");
		mainLayout.addComponent(lblsubCategoryName, "top:138.0px;left:45.0px;");

		cmbsubCategoryName= new ComboBox();
		cmbsubCategoryName.setImmediate(true);
		cmbsubCategoryName.setWidth("280px");
		cmbsubCategoryName.setNullSelectionAllowed(true);
		cmbsubCategoryName.setNewItemsAllowed(false);
		cmbsubCategoryName.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		mainLayout.addComponent(cmbsubCategoryName, "top:135.0px;left:170.0px;");

		nbCategory = new NativeButton();
		nbCategory.setIcon(new ThemeResource("../icons/add.png"));
		nbCategory.setImmediate(true);
		nbCategory.setWidth("28px");
		nbCategory.setHeight("24px");
		mainLayout.addComponent(nbCategory,"top:83.0px;left:450.0px;");

		lblline= new Label();
		lblline.setImmediate(false);
		lblline.setWidth("-1px");
		lblline.setHeight("-1px");
		lblline.setValue("_________________________________________________________________________");
		mainLayout.addComponent(lblline, "top:160.0px;left:10.0px;");

		mainLayout.addComponent(button, "top:206.0px;left:12.0px;");

		return mainLayout;
	}
}
