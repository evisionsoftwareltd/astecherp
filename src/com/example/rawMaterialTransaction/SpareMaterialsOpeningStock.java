package com.example.rawMaterialTransaction;

import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Formatter;
import java.util.Iterator;
import java.util.List;
import org.hibernate.Session;
import org.hibernate.Transaction;
import com.common.share.AmountField;
import com.common.share.CommonButton;
import com.common.share.FocusMoveByEnter;
import com.common.share.SessionBean;
import com.common.share.SessionFactoryUtil;
import com.common.share.TextRead;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.InlineDateField;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import java.text.DecimalFormat;
import com.common.share.*;
import com.common.share.MessageBox.ButtonType;
import com.common.share.MessageBox.EventListener;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.terminal.gwt.server.WebApplicationContext;
import com.vaadin.terminal.gwt.server.WebBrowser;
import com.vaadin.ui.Button;
import com.vaadin.ui.Component;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Window.CloseEvent;
import com.vaadin.ui.Window.Notification;

public class SpareMaterialsOpeningStock extends Window 
{
	private CommonButtonNew button = new CommonButtonNew( "New",  "Save",  "Edit",  "",  "Refresh",  "Find", "", "Exit","","");
	private VerticalLayout btnLayout = new VerticalLayout();

	@AutoGenerated
	private AbsoluteLayout mainLayout;

	@AutoGenerated
	private InlineDateField dOpeningYear;
	@AutoGenerated
	private Label lblOpeningYear;

	@AutoGenerated
	private Label lblProductName;
	@AutoGenerated
	private ComboBox cmbProductName;
	private ComboBox cmbgroupName;
	private ComboBox cmbsubgroupName;

	private Label lblgroupName;
	private Label lblsubgroupName;

	@AutoGenerated
	private Label lblProductId;
	@AutoGenerated
	private TextRead trProductId;

	private Label lblModelNo;
	private TextRead txtModelNo;

	private Label lblBrandName;
	private TextRead txtBrandName;

	@AutoGenerated
	private Label lblUnit;
	@AutoGenerated
	private TextRead trUnit;


	@AutoGenerated
	private Label lblQuantity;
	@AutoGenerated
	private AmountField amtQuantity;

	@AutoGenerated
	private Label lblRate;
	@AutoGenerated
	private AmountField amtRate;

	@AutoGenerated
	private Label lblAmount;
	@AutoGenerated
	private TextRead amtAmount;

	@AutoGenerated
	private Label lblline;

	boolean isUpdate=false;
	int index;

	private TextRead txtCategoryID = new TextRead();
	private TextRead txtSubCategoryID = new TextRead();

	private TextField txtProductID = new TextField();
	private TextField txtOpeningYear = new TextField();

	private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	ArrayList<Component> allComp = new ArrayList<Component>();

	private DecimalFormat df = new DecimalFormat("#0.00");

	private Formatter fmt = new Formatter();

	private SessionBean sessionBean;
	public SpareMaterialsOpeningStock(SessionBean sessionBean)
	{
		buildMainLayout();
		this.sessionBean = sessionBean;
		this.setCaption("SPARE OPENING STOCK INFORMATION :: "+sessionBean.getCompany());
		this.setResizable(false);
		this.setContent(mainLayout);
		buttonLayoutAdd();

		btnIni(true);
		componentIni(true);
		updateBtnFileldED(true);
		//cmbProductNameData();
		setEventAction();
		cmbCategoryName();
	}

	private void focusEnter()
	{
		allComp.add(dOpeningYear);
		allComp.add(cmbProductName);
		allComp.add(amtQuantity);
		allComp.add(amtRate);
		allComp.add(amtAmount);

		allComp.add(button.btnNew);
		allComp.add(button.btnUpdate);
		allComp.add(button.btnSave);
		allComp.add(button.btnRefresh);
		allComp.add(button.btnDelete);
		allComp.add(button.btnFind);

		new FocusMoveByEnter(this,allComp);
	}

	public void setEventAction()
	{
		button.btnNew.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				cmbProductNameData();
				focusEnter();
				cmbProductName.focus();
				newButtonEvent();
			}
		});

		button.btnUpdate.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				if(sessionBean.isUpdateable()){
					updateButtonEvent();
				}else{
					getParent().showNotification("You are not Permitted to Update", Notification.TYPE_WARNING_MESSAGE);	
				}
			}
		});

		button.btnDelete.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				//deleteButtonEvent();
				txtClear();
			}
		});

		button.btnSave.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				if(sessionBean.isSubmitable()){
					saveButtonEvent();
				}
				else{
					getParent().showNotification("You are not Permitted to Save",Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

		button.btnFind.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				findButtonEvent();
			}
		});

		button.btnExit.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				close();
			}
		});

		button.btnRefresh.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event){ 
				refreshButtonEvent();
				cmbProductNameData();
			}
		});

		cmbProductName.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				if(cmbProductName.getValue()!=null)
				{
					dataAddFilds();
					amtQuantity.focus();
				}
			}
		});


		cmbgroupName.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				if(cmbgroupName.getValue()!=null)
				{
					subCateGoryDataAdd();
					cmbsubgroupName.focus();
				}
			}
		});


		cmbsubgroupName.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				if(cmbsubgroupName.getValue()!=null)
				{
					productDataLoad();
					cmbsubgroupName.focus();
				}
			}
		});



		amtQuantity.addListener(new ValueChangeListener() {
			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				try
				{

					double tamount,unitPrice,requiredQty; 
					if(!event.getProperty().toString().trim().isEmpty() && !amtRate.getValue().toString().trim().isEmpty())
					{
						requiredQty= Double.parseDouble(event.getProperty().toString().trim().replaceAll(",", ""));
						unitPrice= Double.parseDouble(amtRate.getValue().toString().replaceAll(",", ""));

						System.out.println("column Action");
						tamount=unitPrice*requiredQty;
						fmt = new Formatter();


						amtAmount.setValue(fmt.format("%.2f",tamount));
					}						


				}
				catch(Exception exp)
				{
					getParent().showNotification("Errora",exp.toString(),Notification.TYPE_ERROR_MESSAGE);
				}
			}
		});

		amtRate.addListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				try
				{
					double tamount,unitPrice,requiredQty; 
					if(!event.getProperty().toString().trim().isEmpty() && !amtRate.getValue().toString().trim().isEmpty())
					{
						requiredQty= Double.parseDouble(event.getProperty().toString().trim().replaceAll(",", ""));
						unitPrice= Double.parseDouble(amtQuantity.getValue().toString().replaceAll(",", ""));
						System.out.println("column Action");
						tamount=unitPrice*requiredQty;
						fmt = new Formatter();
						amtAmount.setValue(fmt.format("%.2f",tamount));
					}						


				}
				catch(Exception exp)
				{
					getParent().showNotification("Errora",exp.toString(),Notification.TYPE_ERROR_MESSAGE);
				}
			}
		});


	}

	private void updateButtonEvent()
	{
		if(cmbProductName.getValue()!= null)
		{
			isUpdate = true;
			btnIni(false);
			componentIni(false);
			updateBtnFileldED(false);
		}
		else
			this.getParent().showNotification("Update Failed","There are no data for update.",Notification.TYPE_WARNING_MESSAGE);
	}

	private void findButtonEvent() 
	{
		Window win = new SpareOpeningStockFindWindow(sessionBean, txtProductID,txtOpeningYear);
		win.addListener(new Window.CloseListener() 
		{
			public void windowClose(CloseEvent e) 
			{
				if (txtProductID.getValue().toString().length() > 0)
				{
					txtClear();
					cmbProductName.removeAllItems();
					findInitialise(txtProductID.getValue().toString(),txtOpeningYear.getValue().toString());
				}
			}
		});

		this.getParent().addWindow(win);
	}

	private void findInitialise(String txtProductId,String txtOpeningyear) 
	{


		Transaction tx=null;
		try{
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();
			/*	String sql="select po.ProductId,pi.productName,rc.CategoryName,sc.SubCategoryName,pi.Unit,po.Qty,po.Rate,po.amount,po.openingYear as OpeningYear"
						+" from tbRawProductOpening po inner join tbRawProductInfo pi on po.ProductId=pi.ProductCode"
						+" inner join tbRawCategory rc on pi.CategoryCode=rc.CategoryCode"
						+" inner join tbRawSubCategory sc on pi.subCategoryCode=sc.SubCategoryID"
						+" where DATEPART(YYYY,openingYear)like'%"+txtOpeningyear+"%' and ProductId='"+txtProductId+"'";*/


			//String sql="select ProductId,Qty,Rate,openingYear from tbRawProductOpening  where ProductId like '"+txtProductId+"'";

			String sql="select b.openingYear,a.categoryId,a.subCateGoryId,a.productName,a.productId,a.unit,b.qty,b.rate,b.amount "
					+" from tbSpareProductDetails a "
					+" inner join tbSpareProductOpening b on a.productId=b.productId where a.productid like '"+txtProductId+"'";


			List list=session.createSQLQuery(sql).list();
			for(Iterator iter=list.iterator();iter.hasNext();){

				Object element[]=(Object[]) iter.next();
				/*cmbProductName.addItem(element[0]);
				cmbProductName.setItemCaption(element[0], element[1].toString().trim());
				cmbProductName.setValue(element[0]);
				dOpeningYear.setValue(element[3]);
				txtProductID.setValue(element[0]);
				txtCategoryID.setValue(element[2]);
				txtSubCategoryID.setValue(element[3]);
				trUnit.setValue(element[4]);
				fmt=new Formatter();
				amtQuantity.setValue(fmt.format("%.2f",Double.parseDouble(element[1].toString().trim())));
				fmt=new Formatter();
				amtRate.setValue(fmt.format("%.2f", Double.parseDouble(element[2].toString().trim())));
				fmt=new Formatter();
				//amtAmount.setValue(fmt.format("%.2f",Double.parseDouble(element[7].toString().trim())));*/	

				dOpeningYear.setValue(element[0]);
				cmbgroupName.setValue(element[1]);
				cmbsubgroupName.setValue(element[2]);
				cmbProductName.addItem(element[4].toString());
				cmbProductName.setItemCaption(element[4].toString(), element[3].toString());
				cmbProductName.setValue(element[4].toString());

				trProductId.setValue(element[4]);
				System.out.println("Product ID: "+element[4]);
				trUnit.setValue(element[5]);
				fmt=new Formatter();
				amtQuantity.setValue(fmt.format("%.2f",Double.parseDouble(element[6].toString().trim())));
				fmt=new Formatter();
				amtRate.setValue(fmt.format("%.2f", Double.parseDouble(element[7].toString().trim())));
				fmt=new Formatter();
			}
		}
		catch(Exception exp){
			this.getParent().showNotification(""+exp,Notification.TYPE_ERROR_MESSAGE);
		}
	}

	private void dataAddFilds()
	{

		Transaction tx=null;
		try{
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();
			/*String sql="select pi.ProductCode,pi.Unit, rc.CategoryName,sc.SubCategoryName from tbRawProductInfo pi"
						+" inner join tbRawCategory rc on pi.CategoryCode=rc.CategoryCode"
						+" inner join tbRawSubCategory sc on pi.subCategoryCode=sc.SubCategoryID"
						+" where pi.ProductCode like'%"+cmbProductName.getValue()+"%'";*/

			/*	String sql=  " select a.ProductCode,a.Unit, b.Group_Name,ISNULL(c.Sub_Group_Name,'')as subgroup  from tbRawProductInfo a inner join  tbMain_Group b "
                        + "  on a.groupId=b.Group_Id "
                        + "  left join  tbSub_Group c "
                        +  " on c.Sub_Group_Id=a.subgroupId "
                        + "  where a.ProductCode  like '"+cmbProductName.getValue()+"' ";*/

			String sql="select vSpareItemCode,vModelNo,vBrandName,vUnitName from tbSpareItemInfo where vSpareItemCode like '"+cmbProductName.getValue().toString()+"' ";

			System.out.println("Mezbah: "+sql);
			List list=session.createSQLQuery(sql).list();
			for(Iterator iter=list.iterator();iter.hasNext();){

				Object[] element=(Object[]) iter.next();
				trProductId.setValue(element[0]);
				txtModelNo.setValue(element[1]);
				txtBrandName.setValue(element[2]);
				trUnit.setValue(element[3]);
				//trCategoryName.setValue(element[2]);
				//trSubCategoryName.setValue(element[3]);
			}
		}
		catch(Exception exp){
			this.getParent().showNotification(""+exp,Notification.TYPE_ERROR_MESSAGE);
		}
	}

	private void saveButtonEvent()
	{
		System.out.print(cmbProductName.getValue());
		if(cmbProductName.getValue()!=null || isUpdate)
		{
			System.out.print("ok");
			if(!trUnit.getValue().toString().trim().isEmpty())
			{
				if(!amtQuantity.getValue().toString().trim().isEmpty())
				{
					//					if(!amtRate.getValue().toString().trim().isEmpty())
					//					{
					if(isUpdate)
					{
						MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to update ?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
						mb.show(new EventListener()
						{
							public void buttonClicked(ButtonType buttonType)
							{
								if(buttonType == ButtonType.YES)
								{
									updateData();
									isUpdate=false;
									componentIni(true);
									updateBtnFileldED(true);
									txtClear();
									btnIni(true);
									button.btnNew.focus();
								}
							}
						});	
					}
					else
					{
						MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to Save ?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
						mb.show(new EventListener()
						{
							public void buttonClicked(ButtonType buttonType)
							{
								if(buttonType == ButtonType.YES)
								{	
									insertData();
									btnIni(true);
									componentIni(true);
									txtClear();
									cmbProductNameData();
								}
							}
						});	
					}
					//					}
					//					else{
					//						this.getParent().showNotification("Warning :","Enter Rate.", Notification.TYPE_WARNING_MESSAGE);
					//						amtRate.focus();
					//					}
				}
				else{
					this.getParent().showNotification("Warning :","Enter Quantity.", Notification.TYPE_WARNING_MESSAGE);
					amtQuantity.focus();
				}
			}
			else{
				this.getParent().showNotification("Warning :","Enter Unit.", Notification.TYPE_WARNING_MESSAGE);
			}
		}
		else{
			this.getParent().showNotification("Warning :","Select Product Name.", Notification.TYPE_WARNING_MESSAGE);
			cmbProductName.focus();
		}
	}


	public void updateData()
	{
		Transaction tx = null;
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			WebApplicationContext context = ((WebApplicationContext) getApplication().getContext());
			WebBrowser webBrowser = context.getBrowser();
			sessionBean.setUserIp(webBrowser.getAddress());    

			InetAddress inetAddress =InetAddress.getByName(webBrowser.getAddress().toString());//get the host Inet using ip

			String updateQuery = "Update tbSpareProductDetails set modelNo='"+txtModelNo.getValue().toString().trim()+"', brandName='"+txtBrandName.getValue().toString().trim()+"', CreationYear = '"+Calendar.getInstance().get(Calendar.YEAR)+"',vUserName = '"+sessionBean.getUserName()+"',vUserIP = '"+inetAddress.getHostName()+"',dEntryTime = CURRENT_TIMESTAMP WHERE ProductID = '"+cmbProductName.getValue()+"'";
			System.out.println("updateQuery :"+updateQuery);
			session.createSQLQuery(updateQuery).executeUpdate();

			String updateQOS = "Update tbSpareProductOpening set modelNo='"+txtModelNo.getValue().toString().trim()+"', brandName='"+txtBrandName.getValue().toString().trim()+"', Qty = '"+amtQuantity.getValue().toString().trim()+"', " +
					"Rate = '"+(amtRate.getValue().toString().equals("") ?"0.00":amtRate.getValue().toString().trim())+"',vUserName = '"+sessionBean.getUserName()+"'," +
					"vUserIP = '"+inetAddress.getHostName()+"'," +
					"dtEntryTime = CURRENT_TIMESTAMP, amount='"+amtAmount.getValue().toString().trim()+"'," +
					"openingYear = '"+dateFormat.format(dOpeningYear.getValue())+"' WHERE ProductID = '"+cmbProductName.getValue()+"'";

			System.out.println("updateQOS :"+updateQOS);
			session.createSQLQuery(updateQOS).executeUpdate();

			tx.commit();
			this.getParent().showNotification("All information update successfully.");

		}catch(Exception exp){
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	private void insertData()
	{
		Transaction tx = null;
		//String catagoryId;
		String productId;
		//productId= newBtnData(1);
		//catagoryId=CCI(cmbProductName.getValue().toString().trim());
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			WebApplicationContext context = ((WebApplicationContext) getApplication().getContext());
			WebBrowser webBrowser = context.getBrowser();
			sessionBean.setUserIp(webBrowser.getAddress()); 
			String subid="";
			if(cmbsubgroupName.getValue()!=null)
			{
				subid=	cmbsubgroupName.getValue().toString();
			}

			InetAddress inetAddress =InetAddress.getByName(webBrowser.getAddress().toString());//get the host Inet using ip
			System.out.println ("Host Name: "+ inetAddress.getHostName());//display the host

			String insertDetails = "Insert Into tbSpareProductDetails(ProductID, ProductName, modelNo, brandName, CategoryID,SubCategoryID,Unit," +
					"CreationYear,vUserName,vUserIP,dEntryTime) " +
					"values ('"+cmbProductName.getValue()+"','"+cmbProductName.getItemCaption(cmbProductName.getValue())+"'," +
					"'"+txtModelNo.getValue().toString().trim()+"','"+txtBrandName.getValue().toString().trim()+"',"+
					"'"+cmbgroupName.getValue().toString().trim()+"','"+subid+"', " +
					"'"+trUnit.getValue().toString().trim()+"',datepart(year,CURRENT_TIMESTAMP)," +
					"'"+sessionBean.getUserName()+"','"+inetAddress.getHostName()+"',CURRENT_TIMESTAMP)";
			session.createSQLQuery(insertDetails).executeUpdate();

			System.out.println("insertDetails : "+insertDetails);

			String insertProductOpening = "Insert Into tbSpareProductOpening(ProductId, modelNo, brandName, Qty, Rate,vUserName,vUserIP,dtEntryTime,amount,openingYear) " +
					" values('"+cmbProductName.getValue()+"','"+txtModelNo.getValue().toString().trim()+"','"+txtBrandName.getValue().toString().trim()+"','"+amtQuantity.getValue().toString().trim()+"'," +
					" '"+(amtRate.getValue().toString().equals("")? "0.00" : amtRate.getValue().toString().trim())+"'," +
					" '"+sessionBean.getUserName()+"','"+inetAddress.getHostName()+"',CURRENT_TIMESTAMP,'"+(amtAmount.getValue().toString().equals("") ? "0.00":amtAmount.getValue().toString().trim())+"'," +
					" '"+dateFormat.format(dOpeningYear.getValue())+"')";

			System.out.println("insertProductInfo : "+insertProductOpening);

			session.createSQLQuery(insertProductOpening).executeUpdate();

			tx.commit();
			this.getParent().showNotification("All information save successfully.");

		}catch(Exception exp){
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	private void refreshButtonEvent()
	{
		componentIni(true);
		updateBtnFileldED(true);
		btnIni(true);
		txtClear();
	}

	private void newButtonEvent() 
	{
		componentIni(false);
		updateBtnFileldED(false);
		btnIni(false);
		txtClear();
	}

	public void txtClear()
	{
		cmbProductName.setValue(null);
		trProductId.setValue("");
		txtCategoryID.setValue("");
		cmbgroupName.setValue(null);
		cmbsubgroupName.setValue(null);
		txtModelNo.setValue("");
		txtBrandName.setValue("");
		trUnit.setValue("");
		amtQuantity.setValue("");
		amtRate.setValue("");
		amtAmount.setValue("");
	}

	public void cmbProductNameData()
	{
		cmbProductName.removeAllItems();
		Transaction tx = null;
		try {
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();

			//String squery = "Select  ProductCode,ProductName from  tbRawProductInfo where ProductCode not in(select productID from tbRawProductDetails) order by ProductName";

			String squery="select vSpareItemCode,vSpareItemName  from tbSpareItemInfo where vSpareItemCode not in (select productID from tbSpareProductDetails )";
			System.out.println("squery : "+squery);
			List list = session.createSQLQuery(squery).list();

			for (Iterator iter = list.iterator();iter.hasNext();) 
			{
				Object[] element = (Object[]) iter.next();
				cmbProductName.addItem(element[0]);
				cmbProductName.setItemCaption(element[0], element[1].toString());
			}
		}
		catch (Exception ex){
			this.getParent().showNotification("Error", ex.toString(),Notification.TYPE_ERROR_MESSAGE);
		}
	}

	public void subCateGoryDataAdd()
	{
		cmbsubgroupName.removeAllItems();
		Transaction tx = null;
		try {
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();

			//String squery = "Select  ProductCode,ProductName from  tbRawProductInfo where ProductCode not in(select productID from tbRawProductDetails) order by ProductName";

			String squery="select  SubGroup_Id,vSubCategoryName from  tbRawItemSubCategory where Group_Id like '"+cmbgroupName.getValue().toString()+"' ";
			System.out.println("squery : "+squery);
			List list = session.createSQLQuery(squery).list();

			if(!list.isEmpty())
			{

				for (Iterator iter = list.iterator();iter.hasNext();) 
				{
					Object[] element = (Object[]) iter.next();
					cmbsubgroupName.addItem(element[0]);
					cmbsubgroupName.setItemCaption(element[0], element[1].toString());
				}
			}
			
			else
				productDataLoad();
			
		}
		catch (Exception ex){
			this.getParent().showNotification("Error", ex.toString(),Notification.TYPE_ERROR_MESSAGE);
		}
	}


	public void productDataLoad()
	{
		cmbProductName.removeAllItems();
		Transaction tx = null;
		String groupid="";
		String subgroupid="";
		try {
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();

			if(cmbgroupName.getValue()!=null)
			{
				groupid=cmbgroupName.getValue().toString();

			}

			if(cmbsubgroupName.getValue()!=null)
			{
				subgroupid=cmbsubgroupName.getValue().toString();	
			}
			else
			{
				subgroupid="%";	
			}


			//String squery = "Select  ProductCode,ProductName from  tbRawProductInfo where ProductCode not in(select productID from tbRawProductDetails) order by ProductName";

			String squery="	 select  vSpareItemCode,vSpareItemName from tbSpareItemInfo  where vGroupId like '"+groupid+"' and vSubGroupId like '"+subgroupid+"' and vSpareItemCode not in(select productID from tbSpareProductDetails) order by vSpareItemName";
			System.out.println("squery : "+squery);
			List list = session.createSQLQuery(squery).list();

			for (Iterator iter = list.iterator();iter.hasNext();) 
			{
				Object[] element = (Object[]) iter.next();
				cmbProductName.addItem(element[0]);
				cmbProductName.setItemCaption(element[0], element[1].toString());
			}
		}
		catch (Exception ex){
			this.getParent().showNotification("Error", ex.toString(),Notification.TYPE_ERROR_MESSAGE);
		}
	}



	public void cmbCategoryName()
	{
		cmbgroupName.removeAllItems();
		Transaction tx = null;
		try {
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();

			//String squery = "Select  ProductCode,ProductName from  tbRawProductInfo where ProductCode not in(select productID from tbRawProductDetails) order by ProductName";

			String squery="	select  iCategoryCode,Group_Id,vCategoryName  from  tbRawItemCategory where vCategoryType like 'Spare Parts'";
			System.out.println("squery : "+squery);
			List list = session.createSQLQuery(squery).list();

			for (Iterator iter = list.iterator();iter.hasNext();) 
			{
				Object[] element = (Object[]) iter.next();
				cmbgroupName.addItem(element[1]);
				cmbgroupName.setItemCaption(element[1], element[2].toString());
			}
		}
		catch (Exception ex){
			this.getParent().showNotification("Error", ex.toString(),Notification.TYPE_ERROR_MESSAGE);
		}
	}




	private void updateBtnFileldED(boolean b)
	{
		lblQuantity.setEnabled(!b);
		amtQuantity.setEnabled(!b);

		lblRate.setEnabled(!b);
		amtRate.setEnabled(!b);

		lblAmount.setEnabled(!b);
		amtAmount.setEnabled(!b);

		lblline.setEnabled(!b);
	}

	private void componentIni(boolean b) 
	{
		lblOpeningYear.setEnabled(!b);
		dOpeningYear.setEnabled(!b);

		lblProductName.setEnabled(!b);
		cmbProductName.setEnabled(!b);

		lblProductId.setEnabled(!b);
		trProductId.setEnabled(!b);

		lblgroupName.setEnabled(!b);
		cmbgroupName.setEnabled(!b);

		lblsubgroupName.setEnabled(!b);
		cmbsubgroupName.setEnabled(!b);

		lblModelNo.setEnabled(!b);
		txtModelNo.setEnabled(!b);

		lblBrandName.setEnabled(!b);
		txtBrandName.setEnabled(!b);

		lblUnit.setEnabled(!b);
		trUnit.setEnabled(!b);

		lblQuantity.setEnabled(!b);
		amtQuantity.setEnabled(!b);

		lblRate.setEnabled(!b);
		amtRate.setEnabled(!b);

		lblAmount.setEnabled(!b);
		amtAmount.setEnabled(!b);

		lblline.setEnabled(!b);
	}

	private void btnIni(boolean t)
	{
		/*button.btnNew.setEnabled(t);
		button.btnUpdate.setEnabled(t);
		button.btnSave.setEnabled(!t);
		button.btnSave.setEnabled(!t);
		button.btnRefresh.setEnabled(!t);
		button.btnDelete.setEnabled(t);*/

		button.btnNew.setEnabled(t);
		button.btnUpdate.setEnabled(t);
		button.btnSave.setEnabled(!t);
		button.btnSave.setEnabled(!t);
		button.btnRefresh.setEnabled(!t);
		button.btnDelete.setEnabled(t);
		button.btnFind.setEnabled(t);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout()
	{
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("540px");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("550px");
		setHeight("430px");

		// lblOpeningYear
		lblOpeningYear = new Label();
		lblOpeningYear.setImmediate(false);
		lblOpeningYear.setWidth("-1px");
		lblOpeningYear.setHeight("-1px");
		lblOpeningYear.setValue("Opening Year :");
		mainLayout.addComponent(lblOpeningYear, "top:32.0px;left:60.0px;");

		// dOpeningYear
		dOpeningYear = new InlineDateField();
		dOpeningYear.setImmediate(true);
		dOpeningYear.setDateFormat("yyyy");
		dOpeningYear.setWidth("-1px");
		dOpeningYear.setHeight("-1px");
		dOpeningYear.setInvalidAllowed(false);
		dOpeningYear.setResolution(6);
		mainLayout.addComponent(dOpeningYear, "top:31.0px;left:144.0px;");

		lblgroupName = new Label();
		lblgroupName.setImmediate(false);
		lblgroupName.setWidth("-1px");
		lblgroupName.setHeight("-1px");
		lblgroupName.setValue("Category Name:");
		mainLayout.addComponent(lblgroupName, "top:56.0px;left:48.0px;");

		cmbgroupName = new ComboBox();
		cmbgroupName.setImmediate(true);
		cmbgroupName.setNullSelectionAllowed(false);
		cmbgroupName.setNewItemsAllowed(false);
		cmbgroupName.setWidth("280px");
		cmbgroupName.setHeight("-1px");
		mainLayout.addComponent(cmbgroupName, "top:55.0px;left:144.0px;");

		lblsubgroupName = new Label();
		lblsubgroupName.setImmediate(false);
		lblsubgroupName.setWidth("-1px");
		lblsubgroupName.setHeight("-1px");
		lblsubgroupName.setValue("SubCategory Name:");
		mainLayout.addComponent(lblsubgroupName, "top:82.0px;left:28.0px;");


		cmbsubgroupName = new ComboBox();
		cmbsubgroupName.setImmediate(true);
		cmbsubgroupName.setNullSelectionAllowed(false);
		cmbsubgroupName.setNewItemsAllowed(false);
		cmbsubgroupName.setWidth("280px");
		cmbsubgroupName.setHeight("-1px");
		mainLayout.addComponent(cmbsubgroupName, "top:81.0px;left:144.0px;");


		// lblProductList
		lblProductName = new Label();
		lblProductName.setImmediate(false);
		lblProductName.setWidth("-1px");
		lblProductName.setHeight("-1px");
		lblProductName.setValue("Product Name:");
		mainLayout.addComponent(lblProductName, "top:108.0px;left:58.0px;");

		// comProductName
		cmbProductName = new ComboBox();
		cmbProductName.setImmediate(true);
		cmbProductName.setNullSelectionAllowed(false);
		cmbProductName.setNewItemsAllowed(false);
		cmbProductName.setWidth("300px");
		cmbProductName.setHeight("-1px");
		mainLayout.addComponent(cmbProductName, "top:107.0px;left:144.0px;");

		// lblProductId
		lblProductId = new Label();
		lblProductId.setImmediate(false);
		lblProductId.setWidth("-1px");
		lblProductId.setHeight("-1px");
		lblProductId.setValue("Product ID:");
		mainLayout.addComponent(lblProductId, "top:134.0px;left:81.0px;");

		// trProductId
		trProductId = new TextRead();
		trProductId.setImmediate(false);
		trProductId.setWidth("100px");
		trProductId.setHeight("22px");
		mainLayout.addComponent(trProductId, "top:133.0px;left:145.0px;");

		/*	// lblCategoryname
		lblCategoryname = new Label();
		lblCategoryname.setImmediate(false);
		lblCategoryname.setWidth("-1px");
		lblCategoryname.setHeight("-1px");
		lblCategoryname.setValue("Group Name :");
		mainLayout.addComponent(lblCategoryname, "top:105.0px;left:60.0px;");

		// txtCategoryName
		trCategoryName = new TextRead();
		trCategoryName.setImmediate(false);
		trCategoryName.setWidth("250px");
		trCategoryName.setHeight("-1px");
		mainLayout.addComponent(trCategoryName, "top:105.0px;left:145.0px;");

		// lblSubCategoryName
		lblSubCategoryName = new Label();
		lblSubCategoryName.setImmediate(false);
		lblSubCategoryName.setWidth("-1px");
		lblSubCategoryName.setHeight("-1px");
		lblSubCategoryName.setValue("Sub Group Name :");
		mainLayout.addComponent(lblSubCategoryName, "top:125.0px;left:35.0px;");

		// trSubCategoryName
		trSubCategoryName = new TextRead();
		trSubCategoryName.setImmediate(false);
		trSubCategoryName.setWidth("250px");
		trSubCategoryName.setHeight("-1px");
		mainLayout.addComponent(trSubCategoryName, "top:125.0px;left:145.0px;");*/

		//lblModelNo
		lblModelNo=new Label();
		lblModelNo.setImmediate(false);
		lblModelNo.setWidth("-1px");
		lblModelNo.setHeight("-1px");
		lblModelNo.setValue("Model No:");
		mainLayout.addComponent(lblModelNo, "top:160.0px;left:85.0px;");

		//txtModelNo
		txtModelNo=new TextRead();
		txtModelNo.setImmediate(false);
		txtModelNo.setWidth("150px");
		txtModelNo.setHeight("-1px");
		mainLayout.addComponent(txtModelNo, "top:160.0px; left:145.0px;");

		//lblBrandName
		lblBrandName=new Label();
		lblBrandName.setImmediate(false);
		lblBrandName.setWidth("-1px");
		lblBrandName.setHeight("-1px");
		lblBrandName.setValue("Brand Name :");
		mainLayout.addComponent(lblBrandName, "top:186.0px;left:60.0px;");

		//txtBrandName
		txtBrandName=new TextRead();
		txtBrandName.setImmediate(false);
		txtBrandName.setWidth("150px");
		txtBrandName.setHeight("-1px");
		mainLayout.addComponent(txtBrandName, "top:184.0px; left:145.0px;");

		// lblUnit
		lblUnit = new Label();
		lblUnit.setImmediate(false);
		lblUnit.setWidth("-1px");
		lblUnit.setHeight("-1px");
		lblUnit.setValue("Unit :");
		mainLayout.addComponent(lblUnit, "top:212.0px;left:112.0px;");

		// trUnit
		trUnit = new TextRead();
		trUnit.setImmediate(false);
		trUnit.setWidth("100px");
		trUnit.setHeight("22px");
		mainLayout.addComponent(trUnit, "top:210.0px;left:145.0px;");

		// lblQuantity
		lblQuantity = new Label();
		lblQuantity.setImmediate(false);
		lblQuantity.setWidth("-1px");
		lblQuantity.setHeight("-1px");
		lblQuantity.setValue("Quantity :");
		mainLayout.addComponent(lblQuantity, "top:238.0px;left:91.0px;");

		// amtQuantity
		amtQuantity = new AmountField();
		amtQuantity.setImmediate(false);
		amtQuantity.setWidth("102px");
		amtQuantity.setHeight("22px");
		mainLayout.addComponent(amtQuantity, "top:236.0px;left:143.5px;");

		// lblRate
		lblRate = new Label();
		lblRate.setImmediate(false);
		lblRate.setWidth("100.0%");
		lblRate.setHeight("-1px");
		lblRate.setValue("Rate :");
		mainLayout.addComponent(lblRate,"top:264.0px;right:360.0px;left:108.0px;");

		// amtRate
		amtRate = new AmountField();
		amtRate.setImmediate(false);
		amtRate.setWidth("102px");
		amtRate.setHeight("22px");
		mainLayout.addComponent(amtRate,"top:262.0px;left:143.5px;");

		// lblAmount
		lblAmount = new Label();
		lblAmount.setImmediate(false);
		lblAmount.setWidth("48px");
		lblAmount.setHeight("-1px");
		lblAmount.setValue("Amount :");
		mainLayout.addComponent(lblAmount, "top:290.0px;left:92.0px;");

		// amtAmount
		amtAmount = new TextRead(1);
		amtAmount.setImmediate(false);
		amtAmount.setWidth("102px");
		amtAmount.setHeight("22px");
		amtAmount.setStyleName("Amount");
		mainLayout.addComponent(amtAmount, "top:288.0px;left:147.0px;");

		lblline = new Label();
		lblline.setImmediate(false);
		lblline.setWidth("-1");
		lblline.setHeight("-1");
		lblline.setValue("________________________________________________________________________");
		mainLayout.addComponent(lblline,"top:305.0px; left:18.0px;");

		return mainLayout;
	}

	private void buttonLayoutAdd()
	{
		btnLayout.addComponent(button);
		mainLayout.addComponent(btnLayout,"top:325px;left:15px;");
	}

}
