package com.example.rawMaterialReport;

import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.Transaction;

import com.common.share.CommonButton;
import com.common.share.FocusMoveByEnter;
import com.common.share.ReportViewer;
import com.common.share.ReportViewerNew;
import com.common.share.SessionBean;
import com.common.share.SessionFactoryUtil;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.InlineDateField;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Window.Notification;

public class RptLoanReceiveReturn extends Window 
{

	private AbsoluteLayout mainLayout;
	private ComboBox  cmbsupplierName;
	private Label lblSupplierName;
	private Label lblProductName;
	private ComboBox  cmbproductName;
	private Label lblline;
	private NativeButton previewButton = new NativeButton("Preview");
	private NativeButton exitButton = new NativeButton("Exit");
	private PopupDateField fromDate;
	private PopupDateField toDate;
	private Label lblformDate;
	private Label lbltormDate;
	private SessionBean sessionBean;
	private CheckBox chkAllName,chkAllSupplier;
	
	public RptLoanReceiveReturn(SessionBean sessionBean,String str) {
		this.sessionBean = sessionBean;
		buildMainLayout();
		setContent(mainLayout);
		this.setResizable(false);
		this.setCaption("Loan Receive/Receive Return Statement ::  "+ sessionBean.getCompany());
		cmbsupplierName.focus();
		Component ob[]={cmbsupplierName,cmbproductName, fromDate,toDate,previewButton};
		new FocusMoveByEnter(this, ob);
		supplierdata();
		allButtonAction();
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() 
	{
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("460px");
		mainLayout.setHeight("220px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("480px");
		setHeight("270px");
		
		// lblSection
		lblSupplierName = new Label();
		lblSupplierName.setImmediate(false);
		lblSupplierName.setWidth("-1px");
		lblSupplierName.setHeight("-1px");
		lblSupplierName.setValue("Supplier  Name :");
		mainLayout.addComponent(lblSupplierName, "top:40.0px;left:51.0px;");
		
		// cmbSection
		cmbsupplierName = new ComboBox();
		cmbsupplierName.setImmediate(true);
		cmbsupplierName.setWidth("260px");
		cmbsupplierName.setHeight("24px");
		cmbsupplierName.setNullSelectionAllowed(false);
		cmbsupplierName.setNewItemsAllowed(false);
		cmbsupplierName.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		mainLayout.addComponent( cmbsupplierName, "top:38.0px;left:142.0px;");
		
		chkAllSupplier= new CheckBox("");
		chkAllSupplier.setCaption("All");
		chkAllSupplier.setImmediate(false);
		chkAllSupplier.setWidth("-1px");
		chkAllSupplier.setHeight("24px");
		chkAllSupplier.setImmediate(true);
		mainLayout.addComponent(chkAllSupplier, "top:38.0px;left:402.0px;");
				
		lblProductName = new Label();
		lblProductName.setImmediate(false);
		lblProductName.setWidth("-1px");
		lblProductName.setHeight("-1px");
		lblProductName.setValue("Product  Name :");
		mainLayout.addComponent(lblProductName, "top:66.0px;left:51.0px;");
			
		cmbproductName = new ComboBox();
		cmbproductName.setImmediate(true);
		cmbproductName.setWidth("260px");
		cmbproductName.setHeight("24px");
		cmbproductName.setNullSelectionAllowed(false);
		cmbproductName.setNewItemsAllowed(false);
		cmbproductName.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		mainLayout.addComponent( cmbproductName, "top:64.0px;left:142.0px;");
		
		chkAllName = new CheckBox("");
		chkAllName.setCaption("All");
		chkAllName.setImmediate(false);
		chkAllName.setWidth("-1px");
		chkAllName.setHeight("24px");
		chkAllName.setImmediate(true);
		mainLayout.addComponent(chkAllName, "top:64.0px;left:402.0px;");	
		
		lblformDate = new Label();
		lblformDate.setImmediate(false);
		lblformDate.setWidth("-1px");
		lblformDate.setHeight("-1px");
		lblformDate.setValue("From Date:");
		mainLayout.addComponent(lblformDate, "top:92.0px;left:51.0px;");
		
		fromDate= new PopupDateField();
		fromDate.setWidth("107px");
		fromDate.setDateFormat("dd-MM-yyyy");
		fromDate.setValue(new java.util.Date());
		fromDate.setResolution(PopupDateField.RESOLUTION_DAY);
		mainLayout.addComponent(fromDate, "top:90.0px;left:142.0px;");
				
		lbltormDate = new Label();
		lbltormDate.setImmediate(true);
		lbltormDate.setWidth("-1px");
		lbltormDate.setHeight("-1px");
		lbltormDate.setValue(" To Date :");
		mainLayout.addComponent(lbltormDate, "top:118.0px;left:51.0px;");
				
		toDate = new PopupDateField();
		toDate.setWidth("107px");
		toDate.setDateFormat("dd-MM-yyyy");
		toDate.setValue(new java.util.Date());
		toDate.setResolution(PopupDateField.RESOLUTION_DAY);
		mainLayout.addComponent(toDate, "top:116.0px;left:142.0px;");
	
		lblline = new Label();
		lblline.setImmediate(false);
		lblline.setWidth("-1px");
		lblline.setHeight("-1px");
		lblline.setValue("________________________________________________________________");
		mainLayout.addComponent(lblline, "top:150.0px;left:20.0px;");
	
		previewButton.setWidth("95px");
		previewButton.setHeight("28px");
		previewButton.setIcon(new ThemeResource("../icons/print.png"));
		mainLayout.addComponent(previewButton,"top:175.opx; left:170.0px");

		exitButton.setWidth("70px");
		exitButton.setHeight("28px");
		exitButton.setIcon(new ThemeResource("../icons/exit.png"));
		mainLayout.addComponent(exitButton,"top:175.opx; left:250.0px");
		
		
		return mainLayout;
	}

	private void supplierdata()
	{
		
		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();
		String query ="select SupplierID,SupplierName from tbSupplierInfo where SupplierID in (select SupplierId from tbRawPurchaseInfo where purchaseType like '%loan Receive%')" ;
                        
		System.out.println(query);
		
		cmbsupplierName.removeAllItems();
		List list = session.createSQLQuery(query).list();		
		for(Iterator iter = list.iterator(); iter.hasNext();)
		{
			Object[] element = (Object[]) iter.next();
			cmbsupplierName.addItem(element[0]);
			cmbsupplierName.setItemCaption(element[0], element[1].toString());
		}
	}
	
	
	private void productData()
	{
		String supplier="";
		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();
		if(cmbsupplierName.getValue()!=null){
			supplier=cmbsupplierName.getValue().toString();
		}
		else
		    {
			supplier ="%";
		    } 
		
		String query = "select vRawItemCode, vRawItemName from tbRawItemInfo where vRawItemCode in( "
				      +" select distinct ProductID from tbRawPurchaseDetails  "   
				       +"where ReceiptNo in (select ReceiptNo from tbRawPurchaseInfo where purchaseType  like '%Loan Receive%' and SupplierID  like  '"+supplier+"')) " ;

		System.out.println(query);

		List list = session.createSQLQuery(query).list();
		cmbproductName.removeAllItems();
		for(Iterator iter = list.iterator(); iter.hasNext();)
		{
			Object[] element = (Object[]) iter.next();
			cmbproductName.addItem(element[0]);
			cmbproductName.setItemCaption(element[0], element[1].toString());
		}
	}
	
	
	private void allButtonAction()
	{
		cmbsupplierName.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				if(cmbsupplierName.getValue()!=null)
				{
					productData();
				}
			}
		});

		previewButton.addListener(new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) {
				if(cmbsupplierName.getValue()!=null || chkAllSupplier.booleanValue()==true)
				{	
					
					if(cmbproductName.getValue()!=null || chkAllName.booleanValue()==true)
					{
						reportShow();
					}
					
					else
					{
						showNotification("Select Product Name", Notification.TYPE_WARNING_MESSAGE);
					}
					
				}
				else
				{
					getParent().showNotification("Select SupplierName", Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});


		exitButton.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				close();
			}
		});
		
		chkAllName.addListener(new ValueChangeListener() 
		{
			
			
			public void valueChange(ValueChangeEvent event) 
			{
				boolean bv = chkAllName.booleanValue();
				if(bv==true)
				{
					cmbproductName.setValue(null);
					cmbproductName.setEnabled(false);
				}
				else{
					cmbproductName.setEnabled(true);
				}
			}
		});
		chkAllSupplier.addListener(new ValueChangeListener() 
		{			
			public void valueChange(ValueChangeEvent event) 
			{
				boolean bv = chkAllSupplier.booleanValue();
				if(bv==true)
				{
					cmbsupplierName.setValue(null);
					cmbsupplierName.setEnabled(false);
					productData();
				}
				else{
					cmbsupplierName.setEnabled(true);
					
				}
			}
		});	
	
	}
	
	private void reportShow()
	{
		System.out.println("into Reportshow");
		String query=null;
		String activeFlag = null;
		
		String supplierID;
		String productID ;
		
		if(cmbsupplierName.getValue()!=null){
			supplierID=cmbsupplierName.getValue().toString();
		}
		else
		    {
			supplierID ="%";
		    } 
		
		
		if(cmbproductName.getValue()!=null){
			productID=cmbproductName.getValue().toString();
		}else
		    {
			productID ="%";
		    }
		
		try{

			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			Transaction tx = session.beginTransaction();

			String FromDate = new SimpleDateFormat("yyyy-MM-dd").format(fromDate.getValue());
			String ToDate =  new SimpleDateFormat("yyyy-MM-dd").format(toDate.getValue());
			
			System.out.println("From Date : "+FromDate+", To Date : "+ToDate);
			
			HashMap hm = new HashMap();
			hm.put("company", sessionBean.getCompany());
			hm.put("address", sessionBean.getCompanyAddress());
			hm.put("username", sessionBean.getUserName()+"  "+sessionBean.getUserIp());
			hm.put("logo", sessionBean.getCompanyLogo());
			hm.put("phone", sessionBean.getCompanyContact());
			
			hm.put("fromdate", new SimpleDateFormat("dd-MM-yy").format(fromDate.getValue()));
			hm.put("todate",new SimpleDateFormat("dd-MM-yy").format(toDate.getValue()));

			query="select * from [funLoanReciveReturnNew]('"+FromDate+"','"+ToDate+"', '"+productID +"',  '"+supplierID+"')";
			
			System.out.println(query);
			hm.put("sql", query);
			
			List lst = session.createSQLQuery(query).list();
					
			if(!lst.isEmpty())
			{
				Window win = new ReportViewerNew(hm,"report/raw/rptLoanReceiveReturnNew.jasper",
						this.getWindow().getApplication().getContext().getBaseDirectory()+"".replace("\\","/")+"/VAADIN/rpttmp",
						this.getWindow().getApplication().getURL()+"VAADIN/rpttmp",false,
						this.getWindow().getApplication().getURL()+"VAADIN/applet",1);

				win.setCaption("Project Report");
				this.getParent().getWindow().addWindow(win);	
			}
			else
			{
				showNotification("There Is No Data",Notification.TYPE_WARNING_MESSAGE);;
			}
			
		}
		catch(Exception exp){

			this.getParent().showNotification("Error "+exp,Notification.TYPE_ERROR_MESSAGE);

		}
	}
}
