package com.example.rawMaterialReport;

import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.Transaction;

import com.common.share.CommonButton;
import com.common.share.FocusMoveByEnter;
import com.common.share.ReportViewer;
import com.common.share.SessionBean;
import com.common.share.SessionFactoryUtil;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.InlineDateField;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Window.Notification;

public class RptIssueReturnRegister extends Window {
	private AbsoluteLayout mainLayout;

	private ComboBox cmbItemName;

	private Label lblItemName;
	private Label lblline;
	private Label lblformDate;
	private Label lbltormDate;
	
	private CheckBox chkpdf=new CheckBox("PDF");
	private CheckBox chkother=new CheckBox("Others");
	private CheckBox chkItem=new CheckBox("All");
	
	private NativeButton previewButton = new NativeButton("Preview");
	private NativeButton exitButton = new NativeButton("Exit");
	private PopupDateField fromDate;
	private PopupDateField toDate;

	private SessionBean sessionBean;
	boolean type=false;
	public RptIssueReturnRegister(SessionBean sessionBean,String str) {
		this.sessionBean = sessionBean;
		setContent(buildMainLayout());
		this.setResizable(false);
		this.setCaption("ISSUE RETURN REGISTER ::  "+ sessionBean.getCompany());
		cmbItemName.focus();
		Component ob[]={fromDate, toDate, cmbItemName,  previewButton};
		new FocusMoveByEnter(this, ob);
		addItemName();
		allButtonAction();
	}

	private void allButtonAction()
	{	
		
		previewButton.addListener(new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) {
				if(cmbItemName.getValue()!=null || chkItem.booleanValue()==true){
					reportShow();
				}
				else{
					getParent().showNotification("Warning!","Please select item name.", Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

		exitButton.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				close();
			}
		});
		
		chkItem.addListener(new ValueChangeListener()
		{
			
			public void valueChange(ValueChangeEvent event)
			{
				
				if(chkItem.booleanValue()==true)
				{
					cmbItemName.setEnabled(false);
					cmbItemName.setValue(null);
				}
				else
				{
					cmbItemName.setEnabled(true);
					//cmbItemName.setValue(null);
				}
			}
		});
		
		chkpdf.addListener(new ValueChangeListener()
		{
			
			public void valueChange(ValueChangeEvent event)
			{
				
				if(chkpdf.booleanValue()==true)
					chkother.setValue(false);
				else
					chkother.setValue(true);
				
			}
		});

		chkother.addListener(new ValueChangeListener()
		{
			
			public void valueChange(ValueChangeEvent event)
			{
				
				if(chkother.booleanValue()==true)
					chkpdf.setValue(false);
				else
					chkpdf.setValue(true);
				
			}
		});
	}


	private void reportShow()
	{
		String query=null;
		String query1=null;
		String activeFlag = null;
		String productId= "";

		if (cmbItemName.getValue()!= null)
		{
			productId = cmbItemName.getValue().toString();
		}
		else
		{
			productId="%";
		}
		
		if(chkpdf.booleanValue()==true)
			type=true;
		else
			type=false;

		try{

			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			Transaction tx = session.beginTransaction();

			//String FromDate = new SimpleDateFormat("yyyy-MM-dd").format(fromDate.getValue());
			//String ToDate =  new SimpleDateFormat("yyyy-MM-dd").format(toDate.getValue());

			//System.out.println("From Date : "+FromDate+", To Date : "+ToDate);

			HashMap hm = new HashMap();

			hm.put("logo", sessionBean.getCompanyLogo());
			hm.put("company", sessionBean.getCompany());
			hm.put("address", sessionBean.getCompanyAddress());
			//hm.put("phone", "Phone: "+sessionBean.getCompanyPhone()+"   Fax:  "+sessionBean.getCompanyFax()+",   E-mail:  "+sessionBean.getCompanyEmail());
			hm.put("Phone", sessionBean.getCompanyContact());
			//hm.put("username", sessionBean.getUserName()+"  "+sessionBean.getUserIp());
			hm.put("UserName", sessionBean.getUserName()+" "+ sessionBean.getUserIp());
			//hm.put("userIP",sessionBean.getUserIp());
			hm.put("fromDate", new SimpleDateFormat("dd-MM-yy").format(fromDate.getValue()));
			hm.put("toDate",new SimpleDateFormat("dd-MM-yy").format(toDate.getValue()));

			
				query= "select a.transactionNo,a.transactionDate, a.challanNo, b.productId, c.vRawItemName,c.vUnitName ,a.issueNo, "
						+"case when a.issueNo='' then ( select ISNULL(SUM(Qty),0)  from tbRawIssueInfo m inner join tbRawIssueDetails n on m.IssueNo=n.IssueNo where b.ProductID "
						+ "like  b.productId and CONVERT(date,m.Date,105)<= CONVERT(date,a.transactionDate,105) ) else e.Qty end as issueqty,b.qty returnqty,b.rate,b.qty*b.rate as "
						+"amount,a.returnForm,f.SectionName,ISNULL(b.remarks,'')remarks,b.storelocation,g.vDepoName,a.userid,a.entryTime   from tbIssueReturnInfo a inner join tbIssueReturnDetails b "
						+"on a.transactionNo=b.transactionNo inner join tbRawItemInfo c on c.vRawItemCode=b.productId left join tbRawIssueInfo d on d.IssueNo = a.issueNo left join tbRawIssueDetails e on e.IssueNo=d.IssueNo "
						+"and e.ProductID=b.productId "
						+"inner join tbSectionInfo f on f.AutoID=a.returnForm inner join tbDepoInformation g "
						+"on g.vDepoId=b.storelocation where CONVERT(date,a.transactionDate,105) between '"+new SimpleDateFormat("yyyy-MM-dd").format(fromDate.getValue())+"' and '"+new SimpleDateFormat("yyyy-MM-dd").format(toDate.getValue())+"' and b.productId "
						+"like '"+productId+"' order by   a.transactionDate,a.transactionNo "	;
					
					
			System.out.println(query);
			hm.put("sql", query);
			
			List lst=session.createSQLQuery(query).list();
			
			if(!lst.isEmpty())
			{
				Window win = new ReportViewer(hm,"report/raw/rptIssueReturnRegister.jasper",
					this.getWindow().getApplication().getContext().getBaseDirectory()+"".replace("\\","/")+"/VAADIN/rpttmp",
					this.getWindow().getApplication().getURL()+"VAADIN/rpttmp",false,
					this.getWindow().getApplication().getURL()+"VAADIN/applet",type);
				win.setCaption("ISSUE RETURN REGISTER :: "+sessionBean.getCompany());

				this.getParent().getWindow().addWindow(win);
			}
			
			else
			{
				
				getParent().showNotification("Date Not Found", Notification.TYPE_WARNING_MESSAGE);
				
			}
			
		}
		catch(Exception exp){

			this.getParent().showNotification("Error "+exp,Notification.TYPE_ERROR_MESSAGE);

		}
	}

	public void addItemName()
	{
		cmbItemName.removeAllItems();
		//cmbSectionName.addItem("All");
		Transaction tx = null;
		try{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			//List list = session.createSQLQuery("select * from tbSectionInfo").list();
			String query = "select a.productId, b.vRawItemName from tbIssueReturnDetails a inner join tbRawItemInfo b on a.productId= b.vRawItemCode ";
			List list = session.createSQLQuery(query).list();
			System.out.println("Section List:"+list.size());

			for(Iterator iter=list.iterator();iter.hasNext();)
			{
				Object[] element = (Object[]) iter.next();
				cmbItemName.addItem(element[0].toString());
				cmbItemName.setItemCaption(element[0].toString(), element[1].toString());
			}
		}catch(Exception exp){
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("520px");
		mainLayout.setHeight("220px");
		mainLayout.setMargin(false);

//		setWidth("480px");
//		setHeight("270px");

		lblItemName = new Label("Item Name:");
		lblItemName.setImmediate(false);
		lblItemName.setWidth("-1px");
		lblItemName.setHeight("-1px");
		mainLayout.addComponent(lblItemName, "top:40.0px;left:30.0px;");
		mainLayout.addComponent(new Label(":"), "top:40.0px; left:90.0px;");

		cmbItemName = new ComboBox();
		cmbItemName.setImmediate(true);
		cmbItemName.setWidth("320px");
		cmbItemName.setHeight("24px");
		cmbItemName.setNullSelectionAllowed(false);
		cmbItemName.setNewItemsAllowed(false);
		mainLayout.addComponent( cmbItemName, "top:38.0px;left:100.0px;");
	
		chkItem= new CheckBox("");
		chkItem.setCaption("All");
		chkItem.setWidth("-1px");
		chkItem.setHeight("24px");
		chkItem.setImmediate(true);
		mainLayout.addComponent(chkItem, "top:38.0px;left:435.0px;");
		
		lblformDate = new Label();
		lblformDate.setImmediate(false);
		lblformDate.setWidth("-1px");
		lblformDate.setHeight("-1px");
		lblformDate.setValue("From Date");
		mainLayout.addComponent(lblformDate, "top:68.0px;left:30.0px;");
		mainLayout.addComponent(new Label(":"), "top:68.0px; left:90.0px;");

		fromDate= new PopupDateField();
		fromDate.setWidth("109px");
		fromDate.setDateFormat("dd-MM-yyyy");
		fromDate.setValue(new java.util.Date());
		fromDate.setResolution(PopupDateField.RESOLUTION_DAY);
		mainLayout.addComponent(fromDate, "top:66.0px;left:100.0px;");

		lbltormDate = new Label();
		lbltormDate.setImmediate(true);
		lbltormDate.setWidth("-1px");
		lbltormDate.setHeight("-1px");
		lbltormDate.setValue(" To Date");
		mainLayout.addComponent(lbltormDate, "top:96.0px;left:30.0px;");
		mainLayout.addComponent(new Label(":"), "top:96.0; left:70.0px;");

		toDate = new PopupDateField();
		toDate.setWidth("109px");
		toDate.setDateFormat("dd-MM-yyyy");
		toDate.setValue(new java.util.Date());
		toDate.setResolution(PopupDateField.RESOLUTION_DAY);
		mainLayout.addComponent(toDate, "top:94.0px;left:100.0px;");

		chkpdf.setValue(true);
		chkpdf.setImmediate(true);
		chkother.setImmediate(true);
		mainLayout.addComponent(chkpdf, "top:130.0px;left:180.0px;");
		mainLayout.addComponent(chkother, "top:130.0px;left:225.0px;");

		lblline = new Label();
		lblline.setImmediate(false);
		lblline.setWidth("-1px");
		lblline.setHeight("-1px");
		lblline.setValue("________________________________________________________________");
		mainLayout.addComponent(lblline, "top:150.0px;left:20.0px;");

		previewButton.setWidth("80px");
		previewButton.setHeight("28px");
		previewButton.setIcon(new ThemeResource("../icons/print.png"));
		mainLayout.addComponent(previewButton,"top:175.opx; left:160.0px");

		exitButton.setWidth("70px");
		exitButton.setHeight("28px");
		exitButton.setIcon(new ThemeResource("../icons/exit.png"));
		mainLayout.addComponent(exitButton,"top:175.opx; left:240.0px");

		return mainLayout;
	}

}
