package com.example.rawMaterialReport;

import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.Transaction;

import com.common.share.CommonButton;
import com.common.share.FocusMoveByEnter;
import com.common.share.ReportViewer;
import com.common.share.ReportViewerNew;
import com.common.share.SessionBean;
import com.common.share.SessionFactoryUtil;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.InlineDateField;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Window.Notification;

public class RawRequisitionRegisterDepartmentWise extends Window {

	private AbsoluteLayout mainLayout;
	private ComboBox  cmbDepartment;
	private Label lblDepartment;
	private Label lblline;
	private NativeButton previewButton = new NativeButton("Preview");
	private NativeButton exitButton = new NativeButton("Exit");
	private PopupDateField fromDate;
	private PopupDateField toDate;
	private Label lblformDate;
	private Label lbltormDate;
	private SessionBean sessionBean;
	private CheckBox chkpdf,chkothers;
	int type=0;
	
	public RawRequisitionRegisterDepartmentWise(SessionBean sessionBean,String str) {
		this.sessionBean = sessionBean;
		buildMainLayout();
		setContent(mainLayout);
		this.setResizable(false);
		this.setCaption("DEPARTMENT WISE REQUISITION REGISTER ::  "+ sessionBean.getCompany());
		cmbDepartmentNameDataAdd();
		allButtonAction();
		cmbDepartment.focus();
		Component ob[]={ cmbDepartment, fromDate, toDate, previewButton  };
		new FocusMoveByEnter(this, ob);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("460px");
		mainLayout.setHeight("220px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("480px");
		setHeight("270px");
		
		// lblDepartment
		lblDepartment = new Label();
		lblDepartment.setImmediate(false);
		lblDepartment.setWidth("-1px");
		lblDepartment.setHeight("-1px");
		lblDepartment.setValue("Store : ");
		mainLayout.addComponent(lblDepartment, "top:40.0px;left:65.0px;");
		
		// cmbDepartment
		cmbDepartment = new ComboBox();
		cmbDepartment.setImmediate(false);
		cmbDepartment.setWidth("260px");
		cmbDepartment.setHeight("24px");
		cmbDepartment.setNullSelectionAllowed(false);
		cmbDepartment.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		mainLayout.addComponent(cmbDepartment, "top:38.0px;left:142.0px;");

		lblformDate = new Label();
		lblformDate.setImmediate(false);
		lblformDate.setWidth("-1px");
		lblformDate.setHeight("-1px");
		lblformDate.setValue("From Date:");
		mainLayout.addComponent(lblformDate, "top:64.0px;left:65.0px;");
		
		fromDate= new PopupDateField();
		fromDate.setWidth("110px");
		fromDate.setDateFormat("dd-MM-yyyy");
		fromDate.setValue(new java.util.Date());
		fromDate.setResolution(PopupDateField.RESOLUTION_DAY);
		mainLayout.addComponent(fromDate, "top:64.0px;left:142.0px;");
		
		lbltormDate = new Label();
		lbltormDate.setImmediate(true);
		lbltormDate.setWidth("-1px");
		lbltormDate.setHeight("-1px");
		lbltormDate.setValue(" To Date :");
		mainLayout.addComponent(lbltormDate, "top:90.0px;left:65.0px;");
		
		toDate = new PopupDateField();
		toDate.setWidth("110px");
		toDate.setDateFormat("dd-MM-yyyy");
		toDate.setValue(new java.util.Date());
		toDate.setResolution(PopupDateField.RESOLUTION_DAY);
		mainLayout.addComponent(toDate, "top:90.0px;left:142.0px;");
		
		chkpdf=new CheckBox("PDF");
		chkpdf.setImmediate(true);
		chkpdf.setValue(true);
		mainLayout.addComponent(chkpdf, "top:120.0px; left:130.0px");
		
		chkothers=new CheckBox("Others");
		chkothers.setImmediate(true);
		mainLayout.addComponent(chkothers, "top:120.0px; left:170.0px");

		lblline = new Label();
		lblline.setImmediate(false);
		lblline.setWidth("-1px");
		lblline.setHeight("-1px");
		lblline.setValue("________________________________________________________________");
		mainLayout.addComponent(lblline, "top:150.0px;left:20.0px;");

		previewButton.setWidth("95px");
		previewButton.setHeight("28px");
		previewButton.setIcon(new ThemeResource("../icons/print.png"));
		mainLayout.addComponent(previewButton,"top:185.opx; left:170.0px");

		exitButton.setWidth("70px");
		exitButton.setHeight("28px");
		exitButton.setIcon(new ThemeResource("../icons/exit1.png"));
		mainLayout.addComponent(exitButton,"top:185.opx; left:250.0px");

		return mainLayout;
	}

	private void cmbDepartmentNameDataAdd()
	{
		/*Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();

		String query = "select * from tbSectionInfo";
		System.out.println(query);

		List list = session.createSQLQuery(query).list();		
		for(Iterator iter = list.iterator(); iter.hasNext();)
		{
			Object[] element = (Object[]) iter.next();
			cmbDepartment.addItem(element[0]);
			cmbDepartment.setItemCaption(element[0], element[1].toString());
		}*/
		
		cmbDepartment.removeAllItems();
		Transaction tx = null;
		try{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			List list = session.createSQLQuery("select * from tbDepoInformation").list();

			for(Iterator iter=list.iterator();iter.hasNext();)
			{
				Object[] element = (Object[]) iter.next();
				cmbDepartment.addItem(element[1].toString());
				cmbDepartment.setItemCaption(element[1].toString(), element[2].toString());

			}
		}catch(Exception exp){
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}
	}
	
	private void allButtonAction()
	{
		cmbDepartment.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				//cmpEnbleDisable(true);
			}
		});

		previewButton.addListener(new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) {
				if(cmbDepartment.getValue()!=null){
					reportShow();
				}
				else{
					getParent().showNotification("Select Section Name", Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});


		exitButton.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				close();
			}
		});
		chkpdf.addListener(new ValueChangeListener()
		{
			
			public void valueChange(ValueChangeEvent event)
			{
				
				if(chkpdf.booleanValue())
				{
					
					chkothers.setValue(false);
					type=1;
					
				}
				
				else
				{
					
					chkothers.setValue(true);
					type=0;
					
				}
				
			}
		});
		
		chkothers.addListener(new ValueChangeListener()
		{
			
			public void valueChange(ValueChangeEvent event)
			{
				
				if(chkothers.booleanValue())
				{
					
					chkpdf.setValue(false);
					type=0;
					
				}
				
				else
				{
					
					chkpdf.setValue(true);
					type=1;
					
				}
				
			}
		});
	}
	
	private void reportShow()
	{
		String query=null;
		String activeFlag = null;
		
		String sectionID = cmbDepartment.getItemCaption(cmbDepartment.getValue());
		
		if(sectionID.equals("All")){
			sectionID="%";
		}else{
			sectionID = cmbDepartment.getValue().toString();
		}
		if(chkpdf.booleanValue()==true)
			type=1;
		else
			type=0;
		
		try{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			Transaction tx = session.beginTransaction();

			String FromDate = new SimpleDateFormat("yyyy-MM-dd").format(fromDate.getValue());
			String ToDate =  new SimpleDateFormat("yyyy-MM-dd").format(toDate.getValue());
			
			System.out.println("From Date : "+FromDate+", To Date : "+ToDate);
			
			HashMap hm = new HashMap();
			hm.put("company", sessionBean.getCompany());
			hm.put("address", sessionBean.getCompanyAddress());
			hm.put("phone", sessionBean.getCompanyContact());
			//hm.put("phone", "Phone: "+sessionBean.getCompanyPhone()+"   Fax:  "+sessionBean.getCompanyFax()+",   E-mail:  "+sessionBean.getCompanyEmail());
			hm.put("username", sessionBean.getUserName()+"  "+sessionBean.getUserIp());
			
			hm.put("fromdate",  new SimpleDateFormat("dd-MM-yyyy").format(fromDate.getValue()));
			hm.put("todate", new SimpleDateFormat("dd-MM-yyyy").format(toDate.getValue()));
            //Select distinct ri.sectionReqNo,ri.sectionId, ri.sectionName,ri.reqNo, convert(date,rd.lastpDate,105) as lastpDate,(select COUNT (rr.productId) from tbRawRequisitionDetails as rr where  ri.reqNo=rr.reqNo ) as total from tbRawRequisitionInfo as ri inner join tbRawRequisitionDetails as rd on ri.reqNo=rd.reqNo where ri.sectionId = '3' and convert(date,lastpDate,105) between '2014-02-02' and '2014-03-03'
			query="select * from [funcRawRequisitionRegister]('"+FromDate+"','"+ToDate+"','"+sectionID+"') ";
			hm.put("logo", sessionBean.getCompanyLogo());
			
			
			hm.put("sql", query);
			List list=session.createSQLQuery(query).list();
			System.out.println(query);
			
			if(!list.isEmpty()){
				Window win = new ReportViewerNew(hm,"report/raw/rptRequisitionregster.jasper",
						this.getWindow().getApplication().getContext().getBaseDirectory()+"".replace("\\","/")+"/VAADIN/rpttmp",
						this.getWindow().getApplication().getURL()+"VAADIN/rpttmp",false,
						this.getWindow().getApplication().getURL()+"VAADIN/applet",type);
				win.setCaption("Project Report");
				this.getParent().getWindow().addWindow(win);
			}
			else{
				this.getParent().showNotification("There are no Data!!",Notification.TYPE_WARNING_MESSAGE);
			}

		}
		catch(Exception exp){

			this.getParent().showNotification("Error "+exp,Notification.TYPE_ERROR_MESSAGE);

		}
	}
}
