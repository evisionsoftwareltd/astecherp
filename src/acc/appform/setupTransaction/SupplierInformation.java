package acc.appform.setupTransaction;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.Transaction;

import acc.appform.accountsSetup.GroupCreate;
import acc.appform.accountsSetup.SubGroupCreate;

import com.common.share.AmountCommaSeperator;
import com.common.share.AmountField;
import com.common.share.CommaSeparator;
import com.common.share.ImageUpload;
import com.common.share.CommonButton;
import com.common.share.FocusMoveByEnter;
import com.common.share.ImmediateUploadExample2;
import com.common.share.ImmediateUploadNote;
import com.common.share.MessageBox;
import com.common.share.SessionBean;
import com.common.share.SessionFactoryUtil;
import com.common.share.TextRead;
import com.common.share.MessageBox.ButtonType;
import com.common.share.MessageBox.EventListener;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.terminal.ExternalResource;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.NativeSelect;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Upload;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Upload.SucceededEvent;
import com.vaadin.ui.Window.Notification;
import com.vaadin.ui.themes.BaseTheme;

@SuppressWarnings("serial")
public class SupplierInformation extends Window 
{
	CommonButton cButton = new CommonButton("New", "Save", "Edit", "", "Refresh", "Find", "", "","","Exit");
	private HorizontalLayout btnLayout = new HorizontalLayout();

	private TextField txtSuppID = new TextField();

	boolean isUpdate=false;
	boolean isNew=false;

	private AbsoluteLayout mainLayout;

	private TextField txtPersonMobile;
	private Label lblmobile;

	private TextField txtDesignation;
	private Label lblDesignation;

	private TextField txtContactPerson;
	private Label lblContactPerson;

	private TextField txtEmail;
	private Label lblEmail;

	private TextField txtFax;
	private Label lblFax;

	private TextField txtMobile;
	private Label lblMobile;

	private TextField txtTele;
	private Label lblTele;

	private TextArea txtaddress;
	private Label lblAddress;

	private Label lblTinNo;
	private TextField txtTinNo;

	private Label lblVatNo;
	private TextField txtVatNo;

	public TextRead txtSuppId;
	private TextField txtSupplierName;

	private Label lblSupplierName;
	private Label lblSupplierId;

	private Label lblGroup;
	private ComboBox cmbGroup;

	private Label lblSubGroup;
	private ComboBox cmbSubGroup;

	private Label lblIsActive;
	private NativeSelect cmbIsActive;

	private NativeButton nbGroup;
	private NativeButton nbSubGroup;

	private Label lblOpeningBalance;
	private AmountCommaSeperator txtDrAmount;
	private AmountCommaSeperator txtCrAmount;

	private CommaSeparator cm = new CommaSeparator();

	private TextField txtSupplierCode;

	private TextField txtSuppIdBack = new TextField();
	private ImageUpload imageUp = new ImageUpload("");

	SessionBean sessionBean;
	ArrayList<Component> allComp = new ArrayList<Component>();
	private static final String[] cities = new String[] { "Active", "Inactive" };

	String SupplierId="";
	String LedgerId="";

	private SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy");

	private TextRead ledgerCode = new TextRead();

	private ImmediateUploadExample2 bpvUpload = new ImmediateUploadExample2("");
	Button btnPreview;
	String imageLoc = "0" ;
	String filePathTmp = "";
	String bpvPdf = null;
	String tempimg="";

	private ImmediateUploadExample2 bpvUploadTin = new ImmediateUploadExample2("");
	Button btnPreviewTin;
	String imageLocTin = "0" ;
	String filePathTmpTin = "";
	String bpvPdfTin = null;
	String tempimgTin="";

	private ImmediateUploadExample2 bpvUploadVat = new ImmediateUploadExample2("");
	Button btnPreviewVat;
	String imageLocVat = "0" ;
	String filePathTmpVat = "";
	String bpvPdfVat = null;
	String tempimgVat="";


	private Label lblCommon;
	private boolean isFind = false;

	public SupplierInformation(SessionBean sessionBean)
	{
		this.sessionBean=sessionBean;
		this.setResizable(false);
		this.setCaption("SUPPLIER INFORMATION :: "+sessionBean.getCompany());

		buildMainLayout();
		setContent(mainLayout);
		cmbGroupAddData();
		buttonLayoutAdd();
		txtInit(true);
		btnIni(true);
		focusEnter();
		btnAction();
		authenticationCheck();
	}

	private void authenticationCheck()
	{
		if(!sessionBean.isSubmitable()){
			cButton.btnSave.setVisible(false);
		}

		if(!sessionBean.isUpdateable()){
			cButton.btnEdit.setVisible(false);
		}

		if(!sessionBean.isDeleteable()){
			cButton.btnDelete.setVisible(false);
		}
	}

	public void btnAction()
	{
		btnPreview.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				if(!isUpdate)
				{
					String link = getApplication().getURL().toString().replaceAll(sessionBean.getContextName(), "report")+filePathTmp;
					getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
				}
				if(isUpdate)
				{
					if(!bpvUpload.actionCheck)
					{
						if(!imageLoc.equalsIgnoreCase("0"))
						{
							String link = getApplication().getURL().toString().replaceAll(sessionBean.getContextName()+"/", imageLoc.substring(22, imageLoc.length()));
							getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
						}
						else
						{
							showNotification("There is no File",Notification.TYPE_HUMANIZED_MESSAGE);
						}
					}
					if(bpvUpload.actionCheck)
					{
						String link = getApplication().getURL().toString().replaceAll(sessionBean.getContextName(), "report")+filePathTmp;
						getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
					}
				}
			}
		});
		bpvUpload.upload.addListener(new Upload.SucceededListener() 
		{
			public void uploadSucceeded(SucceededEvent event) 
			{
				imagePath(0,"");
				btnPreview.setCaption("Preview");
				btnPreview.setEnabled(true);
				System.out.println("Done");
			}
		});

		///////////////////////////////Tin Upload
		btnPreviewTin.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				if(!isUpdate)
				{
					/*String link = getApplication().getURL().toString();

					System.out.println("link is:"+link);

					if(link.endsWith(""+sessionBean.getContextName()+"/"))
					{
						link = link.replaceAll(""+sessionBean.getContextName()+"", "report")+filePathTmpTin;
						link=imagePathTin(0,"");
						link=tempimgTin;
						link=link+"VAADIN/themes"+tempimgTin.substring(tempimgTin.lastIndexOf("/"));
						System.out.println(link);
					}
					getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);*/
					
					
					String link = getApplication().getURL().toString().replaceAll(sessionBean.getContextName(), "report")+filePathTmpTin;
					getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
				}
				if(isUpdate)
				{
					/*if(!bpvUploadTin.actionCheck)
					{
						if(!imageLocTin.equalsIgnoreCase("0"))
						{
							String link = getApplication().getURL().toString();

							if(link.endsWith(""+sessionBean.getContextName()+"/"))
							{
								link = link.replaceAll(""+sessionBean.getContextName()+"/", imageLocTin.substring(22, imageLocTin.length()));
							}
							getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
						}
						else
						{
							showNotification("There is no File",Notification.TYPE_HUMANIZED_MESSAGE);
						}
					}
					if(bpvUploadTin.actionCheck)
					{
						String link = getApplication().getURL().toString();

						if(link.endsWith(""+sessionBean.getContextName()+"/"))
						{
							link = link.replaceAll(""+sessionBean.getContextName()+"", "report")+filePathTmpTin;
						}
						getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
					}*/
					
					if(!bpvUploadTin.actionCheck)
					{
						if(!imageLocTin.equalsIgnoreCase("0"))
						{
							String link = getApplication().getURL().toString().replaceAll(sessionBean.getContextName()+"/", imageLocTin.substring(22, imageLocTin.length()));
							getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
						}
						else
						{
							showNotification("There is no File",Notification.TYPE_HUMANIZED_MESSAGE);
						}
					}
					if(bpvUploadTin.actionCheck)
					{
						String link = getApplication().getURL().toString().replaceAll(sessionBean.getContextName(), "report")+filePathTmpTin;
						getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
					}
				}
			}
		});
		bpvUploadTin.upload.addListener(new Upload.SucceededListener() 
		{
			public void uploadSucceeded(SucceededEvent event) 
			{
				imagePathTin(0,"");
				btnPreviewTin.setEnabled(true);
				System.out.println("Done");
			}
		});
		////////////////////////////////////////////////////////////tin upload End
		///////////////////////////////////////////////////////////Vat Upload 
		btnPreviewVat.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				if(!isUpdate)
				{
					/*String link = getApplication().getURL().toString();

					System.out.println("link is:"+link);

					if(link.endsWith(""+sessionBean.getContextName()+"/"))
					{
						link = link.replaceAll(""+sessionBean.getContextName()+"", "report")+filePathTmpVat;
						link=imagePathVat(0,"");
						link=tempimgVat;
						link=link+"VAADIN/themes"+tempimgVat.substring(tempimgVat.lastIndexOf("/"));
						System.out.println(link);
					}
					getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);*/
					String link = getApplication().getURL().toString().replaceAll(sessionBean.getContextName(), "report")+filePathTmpVat;
					getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
				}
				if(isUpdate)
				{
					/*if(!bpvUploadVat.actionCheck)
					{
						if(!imageLocVat.equalsIgnoreCase("0"))
						{
							String link = getApplication().getURL().toString();

							if(link.endsWith(""+sessionBean.getContextName()+"/"))
							{
								link = link.replaceAll(""+sessionBean.getContextName()+"/", imageLocVat.substring(22, imageLocVat.length()));
							}
							getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
						}
						else
						{
							showNotification("There is no File",Notification.TYPE_HUMANIZED_MESSAGE);
						}
					}
					if(bpvUploadVat.actionCheck)
					{
						String link = getApplication().getURL().toString();

						if(link.endsWith(""+sessionBean.getContextName()+"/"))
						{
							link = link.replaceAll(""+sessionBean.getContextName()+"", "report")+filePathTmpVat;
						}
						getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
					}*/
					
					if(!bpvUploadVat.actionCheck)
					{
						if(!imageLocVat.equalsIgnoreCase("0"))
						{
							String link = getApplication().getURL().toString().replaceAll(sessionBean.getContextName()+"/", imageLocVat.substring(22, imageLocVat.length()));
							getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
						}
						else
						{
							showNotification("There is no File",Notification.TYPE_HUMANIZED_MESSAGE);
						}
					}
					if(bpvUploadVat.actionCheck)
					{
						String link = getApplication().getURL().toString().replaceAll(sessionBean.getContextName(), "report")+filePathTmpVat;
						getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
					}
				}
			}
		});

		bpvUploadVat.upload.addListener(new Upload.SucceededListener() 
		{
			public void uploadSucceeded(SucceededEvent event) 
			{
				imagePathVat(0,"");
				btnPreviewVat.setEnabled(true);
				System.out.println("Done");
			}
		});
		////////////////////////////////////Vat uplad end

		cButton.btnNew.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				isFind = false;
				isUpdate = false;
				newButtonEvent();
			}
		});

		cButton.btnSave.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				formValidation();
			}
		});

		cButton.btnEdit.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				if(sessionBean.isUpdateable())
				{
					isFind = false;
					updateButtonEvent();
				}
				else
				{
					getParent().showNotification("Warning,","You have not Proper Authentication to Edit.", Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

		nbGroup.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				groupLink();				
			}
		});

		nbSubGroup.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				subGroupLink();				
			}
		});

		cButton.btnDelete.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				if(sessionBean.isDeleteable())
				{
					deleteButtonEvent();
				}
				else
				{
					getParent().showNotification("Warning,","You have not Proper Authentication to Delete.", Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});
		cButton.btnRefresh.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				isFind = false;
				isUpdate=false;
				refreshButtonEvent();
				txtDrAmount.setEnabled(false);
				txtCrAmount.setEnabled(false);
			}
		});

		cButton.btnFind.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				isFind = true;
				findButtonEvent();
			}
		});

		cButton.btnExit.addListener(new ClickListener()
		{
			public void buttonClick(ClickEvent event)
			{
				close();
			}
		});

		cmbGroup.addListener(new ValueChangeListener()
		{
			public void valueChange(ValueChangeEvent event)
			{
				cmbSubGroup.removeAllItems();
				if(cmbGroup.getValue()!=null)
				{
					cmbSubGroupAddData();
				}
			}
		});

		txtDrAmount.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				DrAmountfieldAction();

			}
		});

		txtCrAmount.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				CrAmountfieldAction();		
			}
		});

	}

	private void DrAmountfieldAction()
	{
		if(!txtDrAmount.getValue().toString().isEmpty())
		{
			txtCrAmount.setEnabled(false);
		}
		else
		{
			txtCrAmount.setEnabled(true);
		}
	}

	private void CrAmountfieldAction()
	{
		if(!txtCrAmount.getValue().toString().isEmpty())
		{
			txtDrAmount.setEnabled(false);
		}
		else
		{
			txtDrAmount.setEnabled(true);
		}
	}

	private String imagePath(int flag,String str)
	{
		String basePath = getWindow().getApplication().getContext().getBaseDirectory()+"".replace("\\","/")+"/VAADIN/themes/";
		System.out.println("basePath is:"+basePath+bpvUpload.fileName.trim());

		String stuImage = null;

		if(flag==0)
		{
			// image move
			if(bpvUpload.fileName.trim().length()>0)
				try {
					if(bpvUpload.fileName.toString().endsWith(".jpg")){
						String path = sessionBean.getUserId();
						fileMove(basePath+bpvUpload.fileName.trim(),SessionBean.imagePath+path+".jpg");
						tempimg=basePath+bpvUpload.fileName.trim();
						bpvPdf = SessionBean.imagePath+path+".jpg";
						filePathTmp = path+".jpg";
					}
					else{
						String path = sessionBean.getUserId();
						fileMove(basePath+bpvUpload.fileName.trim(),SessionBean.imagePath+path+".pdf");
						bpvPdf = SessionBean.imagePath+path+".pdf";
						filePathTmp = path+".pdf";
					}
				} 
			catch (IOException e){
				e.printStackTrace();
			}
			return bpvPdf;
		}

		if(flag==1)
		{
			// image move
			if(bpvUpload.fileName.trim().length()>0)
			{
				try
				{	
					if(bpvUpload.fileName.toString().endsWith(".jpg"))
					{
						String path = str;
						String projectName = sessionBean.getContextName();
						fileMove(basePath+bpvUpload.fileName.trim(),SessionBean.imagePath+projectName+"/supplierInformation/TradeLicence/"+path+".jpg");
						stuImage = SessionBean.imagePath+projectName+"/supplierInformation/TradeLicence/"+path+".jpg";
					}
					else
					{
						String path = str;
						String projectName = sessionBean.getContextName();
						fileMove(basePath+bpvUpload.fileName.trim(),SessionBean.imagePath+projectName+"/supplierInformation/TradeLicence/"+path+".pdf");
						stuImage = SessionBean.imagePath+projectName+"/supplierInformation/TradeLicence/"+path+".pdf";
					}
				}
				catch (IOException e)
				{
					e.printStackTrace();
				}
			}
			return stuImage;
		}
		return null;
	}

	/////////////////////////////////tin upload


	private String imagePathTin(int flag,String str)
	{
		String basePath = getWindow().getApplication().getContext().getBaseDirectory()+"".replace("\\","/")+"/VAADIN/themes/";
		System.out.println("basePath is:"+basePath+bpvUploadTin.fileName.trim());

		String stuImage = null;

		if(flag==0)
		{
			// image move
			if(bpvUploadTin.fileName.trim().length()>0)
				try {
					if(bpvUploadTin.fileName.toString().endsWith(".jpg")){
						String path = sessionBean.getUserId();
						fileMove(basePath+bpvUploadTin.fileName.trim(),SessionBean.imagePath+path+".jpg");
						tempimgTin=basePath+bpvUploadTin.fileName.trim();
						bpvPdfTin = SessionBean.imagePath+path+".jpg";
						filePathTmpTin = path+".jpg";
					}
					else{
						String path = sessionBean.getUserId();
						fileMove(basePath+bpvUploadTin.fileName.trim(),SessionBean.imagePath+path+".pdf");
						bpvPdfTin = SessionBean.imagePath+path+".pdf";
						filePathTmpTin = path+".pdf";
					}
				} 
			catch (IOException e){
				e.printStackTrace();
			}
			return bpvPdfTin;
		}

		if(flag==1)
		{
			// image move
			if(bpvUploadTin.fileName.trim().length()>0)
			{
				try
				{	
					if(bpvUploadTin.fileName.toString().endsWith(".jpg"))
					{
						String path = str;
						String projectName = sessionBean.getContextName();
						fileMove(basePath+bpvUploadTin.fileName.trim(),SessionBean.imagePath+projectName+"/supplierInformation/Tin/"+path+".jpg");
						stuImage = SessionBean.imagePath+projectName+"/supplierInformation/Tin/"+path+".jpg";
					}
					else
					{
						String path = str;
						String projectName = sessionBean.getContextName();
						fileMove(basePath+bpvUploadTin.fileName.trim(),SessionBean.imagePath+projectName+"/supplierInformation/Tin/"+path+".pdf");
						stuImage = SessionBean.imagePath+projectName+"/supplierInformation/Tin/"+path+".pdf";
					}
				}
				catch (IOException e)
				{
					e.printStackTrace();
				}
			}
			return stuImage;
		}
		return null;
	}

	//////////////////////////////////Tin upload end

	/////////////////////////////////vat upload

	private String imagePathVat(int flag,String str)
	{
		String basePath = getWindow().getApplication().getContext().getBaseDirectory()+"".replace("\\","/")+"/VAADIN/themes/";
		System.out.println("basePath is:"+basePath+bpvUploadVat.fileName.trim());

		String stuImage = null;

		if(flag==0)
		{
			// image move
			if(bpvUploadVat.fileName.trim().length()>0)
				try {
					if(bpvUploadVat.fileName.toString().endsWith(".jpg")){
						String path = sessionBean.getUserId();
						fileMove(basePath+bpvUploadVat.fileName.trim(),SessionBean.imagePath+path+".jpg");
						tempimgVat=basePath+bpvUploadVat.fileName.trim();
						bpvPdfVat = SessionBean.imagePath+path+".jpg";
						filePathTmpVat = path+".jpg";
					}
					else{
						String path = sessionBean.getUserId();
						fileMove(basePath+bpvUploadVat.fileName.trim(),SessionBean.imagePath+path+".pdf");
						bpvPdfVat = SessionBean.imagePath+path+".pdf";
						filePathTmpVat = path+".pdf";
					}
				} 
			catch (IOException e){
				e.printStackTrace();
			}
			return bpvPdfVat;
		}

		if(flag==1)
		{
			// image move
			if(bpvUploadVat.fileName.trim().length()>0)
			{
				try
				{	
					if(bpvUploadVat.fileName.toString().endsWith(".jpg"))
					{
						String path = str;
						String projectName = sessionBean.getContextName();
						fileMove(basePath+bpvUploadVat.fileName.trim(),SessionBean.imagePath+projectName+"/supplierInformation/Vat/"+path+".jpg");
						stuImage = SessionBean.imagePath+projectName+"/supplierInformation/Vat/"+path+".jpg";
					}
					else
					{
						String path = str;
						String projectName = sessionBean.getContextName();
						fileMove(basePath+bpvUploadVat.fileName.trim(),SessionBean.imagePath+projectName+"/supplierInformation/Vat/"+path+".pdf");
						stuImage = SessionBean.imagePath+projectName+"/supplierInformation/Vat/"+path+".pdf";
					}
				}
				catch (IOException e)
				{
					e.printStackTrace();
				}
			}
			return stuImage;
		}
		return null;
	}
	//////////////////////////////////Tin upload end

	private void fileMove(String fStr,String tStr) throws IOException
	{
		try
		{
			File f1 = new File(tStr);
			if(f1.isFile())
				f1.delete();
		}
		catch(Exception exp){}
		FileInputStream ff= new FileInputStream(fStr);

		File  ft = new File(tStr);
		FileOutputStream fos = new FileOutputStream(ft);

		while(ff.available()!=0)
		{
			fos.write(ff.read());
		}
		fos.close();
		ff.close();
	}

	public void subGroupLink()
	{
		Window win = new SubGroupCreate(sessionBean);

		win.setStyleName("cwindow");
		win.setModal(true);
		win.addListener(new Window.CloseListener() 
		{
			public void windowClose(CloseEvent e) 
			{
				showNotification("Warning","Select Group first");
			}

		});
		this.getParent().addWindow(win);
	}

	public void groupLink()
	{
		Window win = new GroupCreate(sessionBean);

		win.setStyleName("cwindow");
		win.setModal(true);
		win.addListener(new Window.CloseListener() 
		{
			public void windowClose(CloseEvent e) 
			{
				cmbGroupAddData();
			}

		});
		this.getParent().addWindow(win);
	}
	private void formValidation()
	{
		if(sessionBean.isSubmitable())
		{
			if(!txtSuppId.getValue().toString().isEmpty())
			{
				if(!txtSupplierName.getValue().toString().isEmpty())
				{
					if(!txtaddress.getValue().toString().isEmpty())
					{
						if(!txtMobile.getValue().toString().isEmpty())
						{
							if(!txtContactPerson.getValue().toString().isEmpty())
							{
								if(!txtDesignation.getValue().toString().isEmpty())
								{
									if(!txtPersonMobile.getValue().toString().isEmpty())
									{
										if(cmbIsActive.getValue()!=null)
										{
											if(cmbGroup.getValue()!=null)
											{
												if(!txtSupplierName.getValue().toString().trim().equalsIgnoreCase(duplicateName()))
												{
													/*if(!isUpdate){
														if(imagePathTin(1,txtSuppId.getValue().toString())!=null){

															if(imagePathVat(1,txtSuppId.getValue().toString())!=null){
													 			saveButtonEvent();
															}
															else{
																getParent().showNotification("Warning!","Please upload Vat",Notification.TYPE_WARNING_MESSAGE);
															}
														}
														else{
															getParent().showNotification("Warning!","Please upload  Tin",Notification.TYPE_WARNING_MESSAGE);
														}
													}
													else{
														saveButtonEvent();
													}*/
													
													saveButtonEvent();
												}
												else
												{
													getParent().showNotification("Warning","This supplier is already inserted",Notification.TYPE_WARNING_MESSAGE);
													txtSupplierName.focus();
												}
											}
											else
											{
												getParent().showNotification("Warning,","Select Group.", Notification.TYPE_WARNING_MESSAGE);
												cmbGroup.focus();
											}
										}
										else
										{
											getParent().showNotification("Warning,","Select Activity.", Notification.TYPE_WARNING_MESSAGE);
											cmbIsActive.focus();
										}
									}
									else
									{
										getParent().showNotification("Warning,","Provide Person Mobile.", Notification.TYPE_WARNING_MESSAGE);
										txtPersonMobile.focus();
									}
								}
								else
								{
									getParent().showNotification("Warning,","Provide Person Designation.", Notification.TYPE_WARNING_MESSAGE);
									txtDesignation.focus();
								}
							}
							else
							{
								getParent().showNotification("Warning,","Provide Name of Contact Person.", Notification.TYPE_WARNING_MESSAGE);
								txtContactPerson.focus();
							}
						}
						else
						{
							getParent().showNotification("Warning,","Provide Mobile Number.", Notification.TYPE_WARNING_MESSAGE);
							txtMobile.focus();
						}
					}
					else
					{
						getParent().showNotification("Warning,","Provide Supplier Address.", Notification.TYPE_WARNING_MESSAGE);
						txtaddress.focus();
					}
				}
				else
				{
					getParent().showNotification("Warning,","Provide Supplier Name.", Notification.TYPE_WARNING_MESSAGE);
					txtSupplierName.focus();
				}
			}
			else
			{
				getParent().showNotification("Warning,","Provide Supplier Code.", Notification.TYPE_WARNING_MESSAGE);
				//				txtSuppId.focus();
			}
		}
		else
		{
			getParent().showNotification("Warning,","You have not Proper Authentication to Save.", Notification.TYPE_WARNING_MESSAGE);
		}
	}

	private String duplicateName()
	{
		String productName="";
		if(!isUpdate)
		{
			Transaction tx = null;
			try 
			{
				Session session = SessionFactoryUtil.getInstance().getCurrentSession();
				tx = session.beginTransaction();

				String query = " select supplierName from tbSupplierInfo where supplierName='"+txtSupplierName.getValue().toString().trim()+"' ";
				Iterator iter = session.createSQLQuery(query).list().iterator();

				if (iter.hasNext()) 
				{
					productName = iter.next().toString();
				}
			}
			catch (Exception ex) 
			{
				System.out.print(ex);
			}
		}
		return productName;
	}

	private void findButtonEvent() 
	{
		Window win = new SupplierFindWindow(sessionBean, txtSuppID,"SupplierId");
		win.addListener(new Window.CloseListener() 
		{
			public void windowClose(CloseEvent e) 
			{
				if (txtSuppID.getValue().toString().length() > 0)
				{
					txtClear();
					txtSuppIdBack.setValue(txtSuppID.getValue().toString());
					findInitialise(txtSuppID.getValue().toString());

					if(imageLoc.equals("0"))
					{btnPreview.setCaption("attach");
					//btnPreview.setEnabled(false);
					}
					else
					{btnPreview.setCaption("Preview");}

					if(imageLocTin.equals("0"))
					{btnPreviewTin.setCaption("attach");
					//btnPreviewTin.setEnabled(false);
					}
					else
					{btnPreviewTin.setCaption("Preview");
					//btnPreviewTin.setEnabled(true);
					}

					if(imageLocVat.equals("0"))
					{btnPreviewVat.setCaption("attach");
					//btnPreviewVat.setEnabled(false);
					}
					else
					{btnPreviewVat.setCaption("Preview");
					//btnPreviewVat.setEnabled(true);
					}
				}
			}
		});
		this.getParent().addWindow(win);	
	}

	private String selectSupplierCode()
	{
		String supplierCode = "";
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			String query = " Select isnull(max(cast(supplierId as int)),0)+1 from tbSupplierInfo ";

			Iterator iter = session.createSQLQuery(query).list().iterator();

			if (iter.hasNext())
			{
				supplierCode = iter.next().toString();
			}
		}
		catch (Exception ex) 
		{
			System.out.print(ex);
		}

		return supplierCode;
	}

	public void cmbGroupAddData()
	{
		cmbGroup.removeAllItems();
		Transaction tx=null;
		try
		{
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();
			List list=session.createSQLQuery(" Select Group_Id,Group_Name from tbMain_Group where Head_Id='L10' ").list();

			for(Iterator iter=list.iterator();iter.hasNext();)
			{
				Object[] element = (Object[]) iter.next();
				cmbGroup.addItem(element[0].toString());
				cmbGroup.setItemCaption(element[0].toString(), element[1].toString());
			}
		}
		catch(Exception exp)
		{
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}
	}

	private void cmbSubGroupAddData()
	{
		Transaction tx=null;
		try
		{
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();
			List list=session.createSQLQuery(" SELECT sub_Group_Id,sub_Group_Name FROM TbSub_Group WHERE group_Id = '"+cmbGroup.getValue().toString()+"' ").list();

			for(Iterator iter=list.iterator();iter.hasNext();)
			{
				Object[] element = (Object[]) iter.next();
				cmbSubGroup.addItem(element[0].toString());
				cmbSubGroup.setItemCaption(element[0].toString(), element[1].toString());
			}
		}
		catch(Exception exp)
		{
			this.getParent().showNotification("Error:",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}
	}
	private void findInitialise(String txtSupplier) 
	{
		Transaction tx = null;
		String sql = null;
		String imgcap="";
		String imgcapTin="";
		String imgcapVat="";
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			sql = "select vSupplierCode,supplierName,address,vTinNo,vVatNo,telephone,mobile,fax,email," +
					" contactPerson,personDesignation,personMobile,isActive,GroupId,ledgerCode,b.DrAmount,b.CrAmount,supplierId,vTradeLicense,vTinCertificate,vVatCertificate  from tbSupplierInfo a"+
					" inner join tbLedger_Op_Balance b on a.ledgerCode=b.Ledger_Id Where supplierId = '"+txtSupplier+"'";
			System.out.println(sql);

			List led = session.createSQLQuery(sql).list();

			if (led.iterator().hasNext()) 
			{
				Object[] element = (Object[]) led.iterator().next();

				txtSupplierCode.setValue(element[0]);
				txtSupplierName.setValue(element[1]);
				txtaddress.setValue(element[2]);
				txtTinNo.setValue(element[3]);
				txtVatNo.setValue(element[4]);
				txtTele.setValue(element[5]);
				txtMobile.setValue(element[6]);
				txtFax.setValue(element[7]);
				txtEmail.setValue(element[8]);
				txtContactPerson.setValue(element[9]);
				txtDesignation.setValue(element[10]);
				txtPersonMobile.setValue(element[11]);

				if(element[12].toString().equalsIgnoreCase("1"))
				{
					cmbIsActive.setValue("Active");
				}else
				{
					cmbIsActive.setValue("Inactive");
				}

				cmbGroup.setValue(element[13].toString());
				//cmbSubGroup.setValue(element[].toString());
				ledgerCode.setValue(element[14].toString());
				txtDrAmount.setValue(cm.setComma(Double.parseDouble(element[15].toString())));
				txtCrAmount.setValue(cm.setComma(Double.parseDouble(element[16].toString())));
				txtSuppId.setValue(element[17].toString());

				if(!element[18].toString().equals("0")){
					imageLoc=element[18].toString();
					imgcap=element[18].toString().substring(element[18].toString().lastIndexOf("/")+1,element[18].toString().length());
					bpvUpload.status.setValue(new Label("<font size=1px>("+imgcap+")</font>",Label.CONTENT_XHTML));
				}
				else{
					bpvUpload.fileName = "";
					bpvUpload.status.setValue(new Label("<font size=1px>(Select .pdf/.jpg Format)</font>",Label.CONTENT_XHTML));
					filePathTmp = "";
					bpvUpload.actionCheck = false;
					imageLoc = "0";
				}

				////////////////////////////Tin
				if(!element[19].toString().equals("0")){
					imageLocTin=element[19].toString();
					imgcapTin=element[19].toString().substring(element[19].toString().lastIndexOf("/")+1,element[19].toString().length());
					bpvUploadTin.status.setValue(new Label("<font size=1px>("+imgcapTin+")</font>",Label.CONTENT_XHTML));
				}
				else{
					bpvUploadTin.fileName = "";
					bpvUploadTin.status.setValue(new Label("<font size=1px>(Select .pdf/.jpg Format)</font>",Label.CONTENT_XHTML));
					filePathTmpTin = "";
					bpvUploadTin.actionCheck = false;
					imageLocTin = "0";
				}
				////////////////////////////Vat
				if(!element[20].toString().equals("0")){
					imageLocVat=element[20].toString();
					imgcapVat=element[20].toString().substring(element[20].toString().lastIndexOf("/")+1,element[20].toString().length());
					bpvUploadVat.status.setValue(new Label("<font size=1px>("+imgcapVat+")</font>",Label.CONTENT_XHTML));
				}
				else{
					bpvUploadVat.fileName = "";
					bpvUploadVat.status.setValue(new Label("<font size=1px>(Select .pdf/.jpg Format)</font>",Label.CONTENT_XHTML));
					filePathTmpVat = "";
					bpvUploadVat.actionCheck = false;
					imageLocVat = "0";
				}

			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	private void refreshButtonEvent() 
	{
		txtInit(true);
		btnIni(true);
		txtClear();
		isNew=false;
	}

	private void deleteButtonEvent()
	{
		if(!txtSupplierName.getValue().toString().isEmpty())
		{
			MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to update  information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
			mb.show(new EventListener()
			{
				public void buttonClicked(ButtonType buttonType)
				{
					if(buttonType == ButtonType.YES)
					{
						Transaction tx=null;
						Session session = SessionFactoryUtil.getInstance().getCurrentSession();
						tx = session.beginTransaction();

						deleteData();
						txtClear();

						isUpdate=false;
					}
				}
			});
		}
		else{
			this.getParent().showNotification("Delete Failed","There are no data for delete.",Notification.TYPE_WARNING_MESSAGE);
		}
	}

	private void deleteData()
	{
		Transaction tx = null;
		try{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			session.createSQLQuery("delete tbSupplierInfo  where supplierIdBack ='"+txtSuppIdBack.getValue().toString()+"'").executeUpdate();
			tx.commit();
			isNew=false;
			this.getParent().showNotification("All information delete Successfully");

		}
		catch(Exception exp){
			tx.rollback();
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}
	}

	private void updateButtonEvent()
	{
		if(!txtSupplierName.getValue().toString().isEmpty())
		{
			isUpdate = true;
			isFind = false;
			btnIni(false);
			txtInit(false);
		}
		else
		{
			this.getParent().showNotification("Update Failed","There are no data for update.",Notification.TYPE_WARNING_MESSAGE);
		}
	}

	private void saveButtonEvent()
	{
		if(!isUpdate)
		{
			SupplierId = autoId();
			LedgerId=ledgerId();
			System.out.println("SupplierId: "+SupplierId+" LedgerId: "+LedgerId);
		}
		else
		{
			SupplierId = "";
			LedgerId = "";
		}

		if(isUpdate)
		{
			MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to update  information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
			mb.show(new EventListener()
			{
				public void buttonClicked(ButtonType buttonType)
				{
					if(buttonType == ButtonType.YES)
					{
						Transaction tx=null;
						Session session = SessionFactoryUtil.getInstance().getCurrentSession();
						tx = session.beginTransaction();
						if(isUpdate)
						{
							updateData();
							isUpdate=false;
							btnIni(true);
							txtInit(true);
							isFind = false;
							txtClear();
							cButton.btnNew.focus();
						}

						else
						{
							tx.rollback();
						}
						isUpdate=false;
					}
				}
			});
		}
		else
		{
			MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to save  information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
			mb.show(new EventListener()
			{
				public void buttonClicked(ButtonType buttonType)
				{
					if(buttonType == ButtonType.YES)
					{
						insertData();
						btnIni(true);
						txtInit(true);
						txtClear();
					}
				}
			});
		}
	}

	private void insertData()
	{		

		String SuppId=selectSupplierCode();
		String activity = cmbIsActive.getValue().toString();
		int acId = 0;
		if(activity.equalsIgnoreCase("Active"))
		{
			acId = 1;
		}
		if(activity.equalsIgnoreCase("Inactive"))
		{
			acId = 2;
		}

		Transaction tx = null;
		try
		{
			String attach = imagePath(1,SuppId)==null? imageLoc:imagePath(1,SuppId);
			String attachTin = imagePathTin(1,SuppId)==null? imageLocTin:imagePathTin(1,SuppId);
			String attachVat = imagePathVat(1,SuppId)==null? imageLocVat:imagePathVat(1,SuppId);
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			String InsertSupplier = " INSERT into tbSupplierInfo(supplierId,supplierName,address,vTinNo,vVatNo,telephone,mobile,fax,email,contactPerson,personDesignation,personMobile,isActive,"+
					" stockCoverNorm,GroupId,groupName,SubGroupId,subGroupName,fileLoc,ledgerCode,userId,userIp,entryTime,vSupplierCode,vTradeLicense,vTinCertificate,vVatCertificate) values(" +
					" '"+selectSupplierCode()+"'," +
					" '"+txtSupplierName.getValue().toString().trim()+"'," +
					" '"+txtaddress.getValue().toString().trim()+"'," +
					" '"+txtTinNo.getValue().toString().trim()+"'," +
					" '"+txtVatNo.getValue().toString().trim()+"'," +
					" '"+txtTele.getValue().toString().trim()+"'," +
					" '"+txtMobile.getValue().toString().trim()+"'," +
					" '"+txtFax.getValue().toString().trim()+"'," +
					" '"+txtEmail.getValue().toString().trim()+"'," +
					" '"+txtContactPerson.getValue().toString().trim()+"'," +
					" '"+txtDesignation.getValue().toString().trim()+"'," +
					" '"+txtPersonMobile.getValue().toString().trim()+"'," +
					" '"+acId+"'," +
					" '0'," +
					" '"+cmbGroup.getValue()+"'," +
					" '"+cmbGroup.getItemCaption(cmbGroup.getValue())+"'," +
					" '"+(cmbSubGroup.getValue()==null?"":cmbSubGroup.getValue().toString())+"'," +
					" '"+(cmbSubGroup.getValue()==null?"":cmbSubGroup.getItemCaption(cmbSubGroup.getValue()))+"'," +
					" '"+" "+"'," +
					" '"+LedgerId+"'," +
					" '"+sessionBean.getUserId()+"','"+sessionBean.getUserIp()+"',CURRENT_TIMESTAMP," +
					" '"+txtSupplierCode.getValue().toString().trim()+"','"+attach+"','"+attachTin+"','"+attachVat+"') ";

			session.createSQLQuery(InsertSupplier).executeUpdate();
			String InsertLedger="INSERT into tbLedger values(" +
					" '"+LedgerId+"', " +
					" '"+txtSupplierName.getValue().toString().trim()+"', " +
					" '"+dateFormat.format(sessionBean.getFiscalOpenDate())+"', " +
					" '"+(cmbSubGroup.getValue()!=null?cmbSubGroup.getValue().toString():cmbGroup.getValue().toString())+"'," +
					" 'L10"+"-"+cmbGroup.getValue().toString()+""+(cmbSubGroup.getValue()==null?"":"-"+cmbSubGroup.getValue().toString())+"', " +
					" '"+sessionBean.getUserId()+"','"+sessionBean.getUserIp()+"', " +
					" CURRENT_TIMESTAMP, '"+sessionBean.getCompanyId()+"') ";

			session.createSQLQuery(InsertLedger).executeUpdate();

			String LedgerOpen="INSERT into tbLedger_Op_Balance values(" +
					" '"+LedgerId+"', " +
					" '"+txtDrAmount.getValue().toString().replaceAll(",", "")+"'," +
					" '"+txtCrAmount.getValue().toString().replaceAll(",", "")+"'," +
					" '"+dateFormat.format(sessionBean.getFiscalOpenDate())+"', " +
					" '"+sessionBean.getUserId()+"','"+sessionBean.getUserIp()+"', " +
					" CURRENT_TIMESTAMP, '"+sessionBean.getCompanyId()+"') ";

			session.createSQLQuery(LedgerOpen).executeUpdate();

			tx.commit();
			this.getParent().showNotification("All information saved successfully.");
		}
		catch(Exception exp)
		{
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	public String ledgerId() 
	{
		String ledgerId = "";
		Transaction tx = null;

		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			String query = "Select cast(isnull(max(cast(replace(Ledger_Id, 'LL', '')as int))+1, 1)as varchar)" +
					" from tbLedger where Ledger_Id like 'LL%' ";
			Iterator iter = session.createSQLQuery(query).list().iterator();

			if (iter.hasNext()) 
			{
				ledgerId = "LL"+iter.next().toString();
			}
		}
		catch (Exception ex) 
		{
			System.out.print(ex);
		}
		return ledgerId;
	}

	public boolean updateData() 
	{
		String activity = cmbIsActive.getValue().toString();
		int acId = 0;
		if(activity.equalsIgnoreCase("Active"))
		{
			acId = 1;
		}
		if(activity.equalsIgnoreCase("Inactive"))
		{
			acId = 2;
		}

		String createForm = "";
		String subGroup = "";
		String subGroupCaption = "";
		String parentId = "";

		if(cmbSubGroup.getValue()!=null)
		{
			createForm = "L10-"+cmbGroup.getValue().toString()+"-"+cmbSubGroup.getValue().toString();
			subGroup = cmbSubGroup.getValue().toString();
			subGroupCaption = cmbSubGroup.getItemCaption(cmbSubGroup.getValue());
		}
		else
		{
			createForm = "L10-"+cmbGroup.getValue().toString();
			subGroup = "";
			subGroupCaption = "";
		}

		System.out.println("AutoID: "+createForm);

		Transaction tx = null;
		try
		{
			String SuppId=txtSuppId.getValue().toString();
			String attach = imagePath(1,SuppId)==null? imageLoc:imagePath(1,SuppId);
			String attachTin = imagePathTin(1,SuppId)==null? imageLocTin:imagePathTin(1,SuppId);
			String attachVat = imagePathVat(1,SuppId)==null? imageLocVat:imagePathVat(1,SuppId);

			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			String updateSupplier ="UPDATE tbSupplierInfo set" +
					" vSupplierCode = '"+txtSupplierCode.getValue().toString().trim()+"' ,"+
					" supplierName = '"+txtSupplierName.getValue().toString().trim()+"' ," +
					" address = '"+txtaddress.getValue().toString().trim()+"' ," +
					" vTinNo = '"+txtTinNo.getValue().toString()+"' ," +
					" vVatNo = '"+txtVatNo.getValue().toString()+"' ," +
					" telephone = '"+txtTele.getValue().toString()+"' ," +
					" mobile = '"+txtMobile.getValue().toString().trim()+"' ," +
					" fax = '"+txtFax.getValue().toString().trim()+"' ," +
					" email = '"+txtEmail.getValue().toString().trim()+"' ," +
					" contactPerson = '"+txtContactPerson.getValue().toString().trim()+"' ," +
					" personDesignation = '"+txtDesignation.getValue().toString().trim()+"' ," +
					" personMobile = '"+txtPersonMobile.getValue().toString().trim()+"' ," +
					" isActive = '"+acId+"' ," +
					" GroupId= '"+cmbGroup.getValue()+"'," +
					" groupName='"+cmbGroup.getItemCaption(cmbGroup.getValue())+"'," +
					" SubGroupId='"+cmbSubGroup.getValue()+"'," +
					" subgroupName='"+cmbSubGroup.getItemCaption(cmbSubGroup.getValue())+"'," +
					" userId = '"+sessionBean.getUserId()+"', " +
					" userIp = '"+sessionBean.getUserIp()+"', " +
					" entryTime = CURRENT_TIMESTAMP,vTradeLicense='"+attach+"', " 
					+ "vTinCertificate='"+attachTin+"' ,vVatCertificate='"+attachVat+"' " +
					" where ledgerCode='"+ledgerCode.getValue()+"'";

			session.createSQLQuery(updateSupplier).executeUpdate();

			if(cmbSubGroup.getValue()!=null)
			{
				parentId = cmbSubGroup.getValue().toString();
			}
			else
			{
				parentId = cmbGroup.getValue().toString();
			}

			String UpdateLedger="UPDATE tbLedger set" +
					" Ledger_Name = '"+txtSupplierName.getValue().toString().trim()+"', " +
					" Creation_Year = '"+dateFormat.format(sessionBean.getFiscalOpenDate())+"', " +
					" Parent_Id = '"+(cmbSubGroup.getValue()!=null?cmbSubGroup.getValue().toString():cmbGroup.getValue().toString())+"', " +
					" Create_From = 'L10"+"-"+cmbGroup.getValue().toString()+""+(cmbSubGroup.getValue()==null?"":"-"+cmbSubGroup.getValue().toString())+"', " +
					" userId = '"+sessionBean.getUserId()+"', " +
					" userIp = '"+sessionBean.getUserIp()+"', " +
					" entryTime = CURRENT_TIMESTAMP " +
					" where Ledger_Id='"+ledgerCode.getValue()+"'";

			session.createSQLQuery(UpdateLedger).executeUpdate();

			String UpdatetbLedgerOpBalance = "UPDATE tbLedger_Op_Balance set" +
					" DrAmount = '"+txtDrAmount.getValue().toString()+"', " +
					" CrAmount = '"+txtCrAmount.getValue().toString()+"' " +
					" where Ledger_Id='"+ledgerCode.getValue()+"' ";

			System.out.println("Update tbLedgerop: "+UpdatetbLedgerOpBalance);
			session.createSQLQuery(UpdatetbLedgerOpBalance).executeUpdate();

			this.getParent().showNotification("All information update successfully.");

			tx.commit();

			return true;
		}
		catch(Exception exp)
		{
			tx.rollback();
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
			return false;
		}
	}
	private void newButtonEvent() 
	{


		txtInit(false);
		btnIni(false);
		txtClear();	
		isNew=true;
		txtSuppId.setValue(selectSupplierCode());
	}

	public String autoId()
	{
		String s_id = null;
		Transaction tx = null;
		try{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			String query=" SELECT ISNULL(CONVERT(VARCHAR,REPLACE(MAX(supplierId),'','')+1), '1') as SD from tbSupplierInfo ";
			Iterator iter = session.createSQLQuery(query).list().iterator();
			if(iter.hasNext())
			{
				s_id=iter.next().toString().trim();
			}
		}
		catch(Exception ex){this.getParent().showNotification("Error",ex+"",Notification.TYPE_ERROR_MESSAGE);
		}
		return s_id;
	}

	private void focusEnter()
	{
		allComp.add(txtSupplierCode);
		allComp.add(txtSuppId);
		allComp.add(txtSupplierName);
		allComp.add(txtaddress);
		allComp.add(txtTinNo);
		allComp.add(txtVatNo);
		allComp.add(txtTele);
		allComp.add(txtMobile);
		allComp.add(txtFax);
		allComp.add(txtEmail);
		allComp.add(txtContactPerson);
		allComp.add(txtDesignation);
		allComp.add(txtPersonMobile);
		allComp.add(cmbIsActive);
		allComp.add(cmbGroup);
		allComp.add(cmbSubGroup);

		allComp.add(cButton.btnSave);

		new FocusMoveByEnter(this,allComp);
	}


	private void txtClear()
	{
		txtSuppIdBack.setValue("");
		txtSupplierCode.setValue("");
		txtSuppId.setValue("");
		txtSupplierName.setValue("");
		txtaddress.setValue("");
		txtTinNo.setValue("");
		txtVatNo.setValue("");
		txtEmail.setValue("");
		txtFax.setValue("");
		txtMobile.setValue("");
		txtTele.setValue("");
		txtContactPerson.setValue("");
		txtDesignation.setValue("");
		txtPersonMobile.setValue("");
		cmbIsActive.setValue(null);
		cmbGroup.setValue(null);
		cmbSubGroup.setValue(null);
		txtDrAmount.setValue("");
		txtCrAmount.setValue("");


		bpvUpload.fileName = "";
		bpvUpload.status.setValue(new Label("<font size=1px>(Select .pdf/.jpg Format)</font>",Label.CONTENT_XHTML));
		filePathTmp = "";
		bpvUpload.actionCheck = false;
		imageLoc = "0";
		btnPreview.setEnabled(false);
		////////Tin
		bpvUploadTin.fileName = "";
		bpvUploadTin.status.setValue(new Label("<font size=1px>(Select .pdf/.jpg Format)</font>",Label.CONTENT_XHTML));
		filePathTmpTin = "";
		bpvUploadTin.actionCheck = false;
		imageLocTin = "0";
		btnPreviewTin.setEnabled(false);
		//////////vat
		bpvUploadVat.fileName = "";
		bpvUploadVat.status.setValue(new Label("<font size=1px>(Select .pdf/.jpg Format)</font>",Label.CONTENT_XHTML));
		filePathTmpVat = "";
		bpvUploadVat.actionCheck = false;
		imageLocVat = "0";
		btnPreview.setEnabled(false);
		
		btnPreview.setCaption("Preview");
		btnPreviewTin.setCaption("Preview");
		btnPreviewVat.setCaption("Preview");
	}

	public void txtInit(boolean t)
	{
		txtSupplierCode.setEnabled(!t);
		txtSuppId.setEnabled(!t);
		txtSupplierName.setEnabled(!t);
		txtEmail.setEnabled(!t);
		txtaddress.setEnabled(!t);
		txtTinNo.setEnabled(!t);
		txtVatNo.setEnabled(!t);
		txtTele.setEnabled(!t);
		txtMobile.setEnabled(!t);
		txtFax.setEnabled(!t);
		txtContactPerson.setEnabled(!t);
		txtDesignation.setEnabled(!t);
		txtPersonMobile.setEnabled(!t);
		cmbIsActive.setEnabled(!t);
		imageUp.setEnabled(!t);

		cmbGroup.setEnabled(!t);
		cmbSubGroup.setEnabled(!t);

		nbGroup.setEnabled(!t);
		nbSubGroup.setEnabled(!t);

		txtDrAmount.setEnabled(!t);
		txtCrAmount.setEnabled(!t);

		btnPreview.setEnabled(!t);
		btnPreviewTin.setEnabled(!t);
		btnPreviewVat.setEnabled(!t);
		
		bpvUpload.setEnabled(!t);
		bpvUploadTin.setEnabled(!t);
		bpvUploadVat.setEnabled(!t); 
	}

	private void btnIni(boolean t)
	{
		cButton.btnNew.setEnabled(t);
		cButton.btnEdit.setEnabled(t);
		cButton.btnSave.setEnabled(!t);
		cButton.btnRefresh.setEnabled(!t);
		cButton.btnDelete.setEnabled(t);
		cButton.btnFind.setEnabled(t);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() 
	{

		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("545px");
		mainLayout.setHeight("580px");
		mainLayout.setMargin(false);

		// lblSupplierId
		lblSupplierId = new Label();
		lblSupplierId.setImmediate(false);
		lblSupplierId.setWidth("-1px");
		lblSupplierId.setHeight("-1px");
		lblSupplierId.setValue("Supplier Code :");
		mainLayout.addComponent(lblSupplierId, "top:25.0px; left:50.0px;");

		// txtSupplierId
		txtSuppId = new TextRead();
		txtSuppId.setImmediate(true);
		txtSuppId.setWidth("150px");
		txtSuppId.setHeight("24px");
		txtSuppId.setVisible(false);
		mainLayout.addComponent(txtSuppId, "top:22.0px;left:160.0px;");

		txtSupplierCode = new TextField();
		txtSupplierCode.setImmediate(true);
		txtSupplierCode.setWidth("150px");
		txtSupplierCode.setHeight("-1px");
		mainLayout.addComponent(txtSupplierCode, "top:22.0px;left:160.0px;");

		// lblSupplierName
		lblSupplierName = new Label();
		lblSupplierName.setImmediate(false);
		lblSupplierName.setWidth("-1px");
		lblSupplierName.setHeight("-1px");
		lblSupplierName.setValue("Supplier Name :");
		mainLayout.addComponent(lblSupplierName, "top:50.0px; left:50.0px;");

		// txtSupplierName
		txtSupplierName = new TextField();
		txtSupplierName.setImmediate(false);
		txtSupplierName.setWidth("320px");
		txtSupplierName.setHeight("-1px");
		mainLayout.addComponent(txtSupplierName, "top:47.0px; left:160.0px;");

		// lblAddress
		lblAddress = new Label();
		lblAddress.setImmediate(false);
		lblAddress.setWidth("-1px");
		lblAddress.setHeight("-1px");
		lblAddress.setValue("Address :");
		mainLayout.addComponent(lblAddress, "top:75.0px; left:50;");

		// txtaddress
		txtaddress = new TextArea();
		txtaddress.setImmediate(false);
		txtaddress.setWidth("320px");
		txtaddress.setHeight("46px");
		mainLayout.addComponent(txtaddress, "top:72.0px; left:160.0px;");

		// lblTele
		lblTele = new Label();
		lblTele.setImmediate(false);
		lblTele.setWidth("-1px");
		lblTele.setHeight("-1px");
		lblTele.setValue("Telephone :");
		mainLayout.addComponent(lblTele, "top:125.0px; left :50.0px;");

		// txtTele
		txtTele = new TextField();
		txtTele.setImmediate(false);
		txtTele.setWidth("158px");
		txtTele.setHeight("-1px");
		mainLayout.addComponent(txtTele, "top:123.0px; left:160.0px;");

		// lblMobile
		lblMobile = new Label();
		lblMobile.setImmediate(false);
		lblMobile.setWidth("-1px");
		lblMobile.setHeight("-1px");
		lblMobile.setValue("Mobile :");
		mainLayout.addComponent(lblMobile, "top:150.0px; left:50.0px;");

		// txtMobile
		txtMobile = new TextField();
		txtMobile.setImmediate(false);
		txtMobile.setWidth("158px");
		txtMobile.setHeight("-1px");
		txtMobile.setSecret(false);
		mainLayout.addComponent(txtMobile,"top:148.0px; left:160.0px");

		// lblFax
		lblFax = new Label();
		lblFax.setImmediate(false);
		lblFax.setWidth("-1px");
		lblFax.setHeight("-1px");
		lblFax.setValue("Fax :");
		mainLayout.addComponent(lblFax, "top:175.0px; left:50.0px;");

		// txtFax
		txtFax = new TextField();
		txtFax.setImmediate(false);
		txtFax.setWidth("158px");
		txtFax.setHeight("-1px");
		txtFax.setSecret(false);
		mainLayout.addComponent(txtFax, "top:173.0px; left:160.0px;");

		// lblEmail
		lblEmail = new Label();
		lblEmail.setImmediate(false);
		lblEmail.setWidth("-1px");
		lblEmail.setHeight("-1px");
		lblEmail.setValue("Email :");
		mainLayout.addComponent(lblEmail, "top:200.0px; left:50.0px;");

		// txtEmail
		txtEmail = new TextField();
		txtEmail.setImmediate(false);
		txtEmail.setWidth("158px");
		txtEmail.setHeight("-1px");
		txtEmail.setSecret(false);
		mainLayout.addComponent(txtEmail, "top:198.0px; left:160.0px;");

		// lblContactPerson
		lblContactPerson = new Label();
		lblContactPerson.setImmediate(false);
		lblContactPerson.setWidth("-1px");
		lblContactPerson.setHeight("-1px");
		lblContactPerson.setValue("Contact Person :");
		mainLayout.addComponent(lblContactPerson,"top:225.0px; left:50.0px;");

		// txtContactPerson
		txtContactPerson = new TextField();
		txtContactPerson.setImmediate(false);
		txtContactPerson.setWidth("318px");
		txtContactPerson.setHeight("-1px");
		mainLayout.addComponent(txtContactPerson,"top:223.0px;left:160.0px;");

		// lblDesignation
		lblDesignation = new Label();
		lblDesignation.setImmediate(false);
		lblDesignation.setWidth("-1px");
		lblDesignation.setHeight("-1px");
		lblDesignation.setValue("Designation :");
		mainLayout.addComponent(lblDesignation,"top:250.0px; left:50.0px;");

		// txtDesignation
		txtDesignation = new TextField();
		txtDesignation.setImmediate(false);
		txtDesignation.setWidth("318px");
		txtDesignation.setHeight("-1px");
		mainLayout.addComponent(txtDesignation,"top:248.0px; left:160.0px;");

		// lblmobile
		lblmobile = new Label();
		lblmobile.setImmediate(false);
		lblmobile.setWidth("-1px");
		lblmobile.setHeight("-1px");
		lblmobile.setValue("Mobile :");
		mainLayout.addComponent(lblmobile, "top:275.0px; left:50.0px;");

		// txtPersonMobile
		txtPersonMobile = new TextField();
		txtPersonMobile.setImmediate(false);
		txtPersonMobile.setWidth("158px");
		txtPersonMobile.setHeight("-1px");
		mainLayout.addComponent(txtPersonMobile,"top:273.0px; left:160.0px;");

		// lblIsActive
		lblIsActive = new Label("Status :");
		lblIsActive.setImmediate(false);
		lblIsActive.setWidth("-1px");
		lblIsActive.setHeight("-1px");
		mainLayout.addComponent(lblIsActive, "top:300.0px; left:50.0px;");

		// txtPersonMobile
		cmbIsActive = new NativeSelect();
		cmbIsActive.setNullSelectionAllowed(false);
		cmbIsActive.setImmediate(true);
		cmbIsActive.setWidth("80px");
		cmbIsActive.setHeight("-1px");
		for (int i = 0; i < cities.length; i++)
		{ cmbIsActive.addItem(cities[i]); }
		cmbIsActive.setValue(cities[0]);
		mainLayout.addComponent(cmbIsActive,"top:298.0px; left:160.0px;");

		// lblTinNo
		lblTinNo = new Label("TIN No. :");
		lblTinNo.setImmediate(false);
		lblTinNo.setWidth("-1px");
		lblTinNo.setHeight("-1px");
		mainLayout.addComponent(lblTinNo, "top:325.0px; left :50.0px;");

		// txtTinNo
		txtTinNo = new TextField();
		txtTinNo.setImmediate(true);
		txtTinNo.setWidth("158px");
		txtTinNo.setHeight("-1px");
		mainLayout.addComponent(txtTinNo, "top:323.0px; left:160.0px;");

		//////////////
		// Upload Tin
		/*lblCommon = new Label("Upload :");
		mainLayout.addComponent(lblCommon, "top:455.0px; left:50.0px;");*/

		mainLayout.addComponent(bpvUploadTin, "top:315.0px;left:350.0px;");
		// btnPreview Tin
		btnPreviewTin = new Button("Preview");
		btnPreviewTin.setStyleName(BaseTheme.BUTTON_LINK);
		btnPreviewTin.addStyleName("icon-after-caption");
		btnPreviewTin.setImmediate(true);
		btnPreviewTin.setIcon(new ThemeResource("../icons/document-pdf.png"));
		mainLayout.addComponent(btnPreviewTin, "top:325.0px;left:425.0px;");
		btnPreviewTin.setEnabled(false);


		// lblVatNo
		lblVatNo = new Label("VAT/BIN No. :");
		lblVatNo.setImmediate(false);
		lblVatNo.setWidth("-1px");
		lblVatNo.setHeight("-1px");
		mainLayout.addComponent(lblVatNo, "top:350.0px; left :50.0px;");

		// txtVatNo
		txtVatNo = new TextField();
		txtVatNo.setImmediate(true);
		txtVatNo.setWidth("158px");
		txtVatNo.setHeight("-1px");
		mainLayout.addComponent(txtVatNo, "top:348.0px; left:160.0px;");

		mainLayout.addComponent(bpvUploadVat, "top:341.0px;left:350.0px;");
		// btnPreview Tin
		btnPreviewVat = new Button("Preview");
		btnPreviewVat.setStyleName(BaseTheme.BUTTON_LINK);
		btnPreviewVat.addStyleName("icon-after-caption");
		btnPreviewVat.setImmediate(true);
		btnPreviewVat.setIcon(new ThemeResource("../icons/document-pdf.png"));
		mainLayout.addComponent(btnPreviewVat, "top:352.0px;left:425.0px;");
		btnPreviewVat.setEnabled(false);
		//lblGroup
		lblGroup = new Label();
		lblGroup.setImmediate(false);
		lblGroup.setWidth("-1px");
		lblGroup.setHeight("-1px");
		lblGroup.setValue("Group");
		mainLayout.addComponent(lblGroup, "top:375.0px; left:50.0px;");

		//cmbGroup
		cmbGroup = new ComboBox();
		cmbGroup.setImmediate(true);
		cmbGroup.setWidth("220px");
		cmbGroup.setHeight("-1px");
		mainLayout.addComponent(cmbGroup, "top:373.0px; left:160.0px;");

		// nbGroup
		nbGroup = new NativeButton();
		nbGroup.setIcon(new ThemeResource("../icons/add.png"));
		nbGroup.setImmediate(true);
		nbGroup.setWidth("30px");
		nbGroup.setHeight("25px");
		mainLayout.addComponent(nbGroup, "top:373.0px; left:382.0px;");

		//lblGroup
		lblSubGroup = new Label();
		lblSubGroup.setImmediate(false);
		lblSubGroup.setWidth("-1px");
		lblSubGroup.setHeight("-1px");
		lblSubGroup.setValue("Sub-Group");
		mainLayout.addComponent(lblSubGroup, "top:400.0px; left:50.0px;");

		//cmbGroup
		cmbSubGroup = new ComboBox();
		cmbSubGroup.setImmediate(true);
		cmbSubGroup.setWidth("220px");
		cmbSubGroup.setHeight("-1px");
		mainLayout.addComponent(cmbSubGroup, "top:398.0px; left:160.0px;");

		// nbSubGroup
		nbSubGroup = new NativeButton();
		nbSubGroup.setIcon(new ThemeResource("../icons/add.png"));
		nbSubGroup.setImmediate(true);
		nbSubGroup.setWidth("30px");
		nbSubGroup.setHeight("25px");
		mainLayout.addComponent(nbSubGroup, "top:398.0px; left:382.0px;");

		// lblopeningbalance
		lblOpeningBalance = new Label();
		lblOpeningBalance.setImmediate(false);
		lblOpeningBalance.setWidth("-1px");
		lblOpeningBalance.setHeight("-1px");
		lblOpeningBalance.setValue("Opening Balance :");
		mainLayout.addComponent(lblOpeningBalance, "top:425.0px; left:50.0px;");

		// txtDrAmount
		txtDrAmount = new AmountCommaSeperator();
		txtDrAmount.setInputPrompt("Dr. Amount");
		txtDrAmount.setImmediate(true);
		txtDrAmount.setWidth("120px");
		txtDrAmount.setHeight("-1px");
		mainLayout.addComponent(txtDrAmount,"top:423.0px; left:160.0px;");

		// txtCrAmount
		txtCrAmount = new AmountCommaSeperator();
		txtCrAmount.setInputPrompt("Cr. Amount");
		txtCrAmount.setImmediate(true);
		txtCrAmount.setWidth("120px");
		txtCrAmount.setHeight("-1px");
		mainLayout.addComponent(txtCrAmount,"top:423.0px; left:285.0px;");

		// bpvUpload
		lblCommon = new Label("Trade license:");
		mainLayout.addComponent(lblCommon, "top:455.0px; left:50.0px;");
		mainLayout.addComponent(bpvUpload, "top:453.0px;left:180.0px;");
		// btnPreview
		btnPreview = new Button("Preview");
		btnPreview.setStyleName(BaseTheme.BUTTON_LINK);
		btnPreview.addStyleName("icon-after-caption");
		btnPreview.setImmediate(true);
		btnPreview.setIcon(new ThemeResource("../icons/document-pdf.png"));
		mainLayout.addComponent(btnPreview, "top:465.0px;left:250.0px;");
		btnPreview.setEnabled(false);

		/*	NativeButton btnIcon=new NativeButton();
				btnIcon.setIcon(new ThemeResource("../icons/AttachBlk-44.png"));
				btnIcon.setStyleName(Button.STYLE_LINK);
				mainLayout.addComponent(btnIcon, "top:478.0px;left:175.0px;");*/
		return mainLayout;
	}

	private void buttonLayoutAdd()
	{
		btnLayout.addComponent(cButton);
		mainLayout.addComponent(btnLayout,"bottom:20px;left:18px;");
	}
}
