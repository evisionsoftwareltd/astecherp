package acc.appform.setupTransaction;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.Transaction;

import acc.appform.accountsSetup.GroupCreate;
import acc.appform.accountsSetup.SubGroupCreate;

import com.common.share.AmountCommaSeperator;
import com.common.share.AmountField;
import com.common.share.CommaSeparator;
import com.common.share.CommonButton;
import com.common.share.FocusMoveByEnter;
import com.common.share.ImmediateUploadExample;
import com.common.share.ImmediateUploadExample2;
import com.common.share.ImmediateUploadNote;
import com.common.share.MessageBox;
import com.common.share.SessionBean;
import com.common.share.SessionFactoryUtil;
import com.common.share.TextRead;
import com.common.share.MessageBox.ButtonType;
import com.common.share.MessageBox.EventListener;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.terminal.ExternalResource;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.NativeSelect;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Upload;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Upload.SucceededEvent;
import com.vaadin.ui.Window.Notification;
import com.vaadin.ui.themes.BaseTheme;

public class PartyInformation extends Window 
{
	CommonButton cButton = new CommonButton("New", "Save", "Edit", "", "Refresh", "Find", "", "","","Exit");
	private HorizontalLayout btnLayout = new HorizontalLayout();

	private TextField txtSuppID = new TextField();

	boolean isUpdate=false;
	boolean isNew=false;

	private AbsoluteLayout mainLayout;

	private TextField txtPersonMobile;
	private Label lblmobile;

	private TextField txtDesignation;
	private Label lblDesignation;

	private TextField txtContactPerson;
	private Label lblContactPerson;

	private Label lblTinNo;
	private TextField txtTinNo;

	private Label lblVatNo;
	private TextField txtVatNo;

	private TextField txtEmail;
	private Label lblEmail;

	private TextField txtFax;
	private Label lblFax;

	private TextField txtMobile;
	private Label lblMobile;

	private TextField txtTele;
	private Label lblTele;

	private TextArea txtaddress;
	private Label lblAddress;

	public TextRead txtPartyId;
	private TextField txtPartyName;

	private Label lblPartyName;
	private Label lblPartyId;

	private Label lblDivision;
	private ComboBox cmbDivision;

	private Label lblArea;
	private ComboBox cmbArea;

	private NativeButton nbDivision;
	private NativeButton nbArea;

	private Label lblIsActive;
	private NativeSelect cmbIsActive;

	private Label lblOpeningBalance;
	private AmountCommaSeperator txtDrAmount;
	private AmountCommaSeperator txtCrAmount;

	private TextField txtPartyCode;

	private TextField txtPartyIdBack = new TextField();

	SessionBean sessionBean;
	ArrayList<Component> allComp = new ArrayList<Component>();
	private static final String[] cities = new String[] { "Active", "Inactive" };
	private boolean isFind = false;
	String PartyId="";
	String LedgerId="";
	String GroupId="";

	private SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy");
	private CommaSeparator cm = new CommaSeparator();

	private TextRead ledgerCode = new TextRead();


	private TextField txtBinNo;
	private Label lblbinNO;

	private ImmediateUploadExample2 bpvUpload = new ImmediateUploadExample2("");
	Button btnPreview;
	String imageLoc = "0" ;
	String filePathTmp = "";
	String bpvPdf = null;
	String tempimg="";

	private ImmediateUploadExample2 bpvUploadTin = new ImmediateUploadExample2("");
	Button btnPreviewTin;
	String imageLocTin = "0" ;
	String filePathTmpTin = "";
	String bpvPdfTin = null;
	String tempimgTin="";

	private ImmediateUploadExample2 bpvUploadVat = new ImmediateUploadExample2("");
	Button btnPreviewVat;
	String imageLocVat = "0" ;
	String filePathTmpVat = "";
	String bpvPdfVat = null;
	String tempimgVat="";

	private Label lblCommon;
	public PartyInformation(SessionBean sessionBean)
	{
		this.sessionBean=sessionBean;
		this.setResizable(false);
		this.setCaption("PARTY INFORMATION :: "+sessionBean.getCompany());
		buildMainLayout();
		setContent(mainLayout);
		cmbDivisionAddData();
		buttonLayoutAdd();
		txtInit(true);
		btnIni(true);
		focusEnter();
		btnAction();
		authenticationCheck();
	}

	private void authenticationCheck()
	{
		if(!sessionBean.isSubmitable()){
			cButton.btnSave.setVisible(false);
		}
		if(!sessionBean.isUpdateable()){
			cButton.btnEdit.setVisible(false);
		}
		if(!sessionBean.isDeleteable()){
			cButton.btnDelete.setVisible(false);
		}
	}

	public void btnAction()
	{
		btnPreview.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				if(!isUpdate)
				{
					String link = getApplication().getURL().toString().replaceAll(sessionBean.getContextName(), "report")+filePathTmp;
					getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
				}
				if(isUpdate)
				{
					if(!bpvUpload.actionCheck)
					{
						if(!imageLoc.equalsIgnoreCase("0"))
						{
							String link = getApplication().getURL().toString().replaceAll(sessionBean.getContextName()+"/", imageLoc.substring(22, imageLoc.length()));
							getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
						}
						else
						{
							showNotification("There is no File",Notification.TYPE_HUMANIZED_MESSAGE);
						}
					}
					if(bpvUpload.actionCheck)
					{
						String link = getApplication().getURL().toString().replaceAll(sessionBean.getContextName(), "report")+filePathTmp;
						getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
					}
				}
			}
		});
		bpvUpload.upload.addListener(new Upload.SucceededListener() 
		{
			public void uploadSucceeded(SucceededEvent event) 
			{
				imagePath(0,"");
				btnPreview.setCaption("Preview");
				btnPreview.setEnabled(true);
				System.out.println("Done");
			}
		});

		///////////////////////////////Tin Upload
		btnPreviewTin.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				if(!isUpdate)
				{
					/*String link = getApplication().getURL().toString();

					System.out.println("link is:"+link);

					if(link.endsWith(""+sessionBean.getContextName()+"/"))
					{
						link = link.replaceAll(""+sessionBean.getContextName()+"", "report")+filePathTmpTin;
						link=imagePathTin(0,"");
						link=tempimgTin;
						link=link+"VAADIN/themes"+tempimgTin.substring(tempimgTin.lastIndexOf("/"));
						System.out.println(link);
					}
					getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);*/
					
					
					String link = getApplication().getURL().toString().replaceAll(sessionBean.getContextName(), "report")+filePathTmpTin;
					getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
				}
				if(isUpdate)
				{
					/*if(!bpvUploadTin.actionCheck)
					{
						if(!imageLocTin.equalsIgnoreCase("0"))
						{
							String link = getApplication().getURL().toString();

							if(link.endsWith(""+sessionBean.getContextName()+"/"))
							{
								link = link.replaceAll(""+sessionBean.getContextName()+"/", imageLocTin.substring(22, imageLocTin.length()));
							}
							getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
						}
						else
						{
							showNotification("There is no File",Notification.TYPE_HUMANIZED_MESSAGE);
						}
					}
					if(bpvUploadTin.actionCheck)
					{
						String link = getApplication().getURL().toString();

						if(link.endsWith(""+sessionBean.getContextName()+"/"))
						{
							link = link.replaceAll(""+sessionBean.getContextName()+"", "report")+filePathTmpTin;
						}
						getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
					}*/
					
					if(!bpvUploadTin.actionCheck)
					{
						if(!imageLocTin.equalsIgnoreCase("0"))
						{
							String link = getApplication().getURL().toString().replaceAll(sessionBean.getContextName()+"/", imageLocTin.substring(22, imageLocTin.length()));
							getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
						}
						else
						{
							showNotification("There is no File",Notification.TYPE_HUMANIZED_MESSAGE);
						}
					}
					if(bpvUploadTin.actionCheck)
					{
						String link = getApplication().getURL().toString().replaceAll(sessionBean.getContextName(), "report")+filePathTmpTin;
						getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
					}
				}
			}
		});
		bpvUploadTin.upload.addListener(new Upload.SucceededListener() 
		{
			public void uploadSucceeded(SucceededEvent event) 
			{
				imagePathTin(0,"");
				btnPreviewTin.setEnabled(true);
				System.out.println("Done");
			}
		});
		////////////////////////////////////////////////////////////tin upload End
		///////////////////////////////////////////////////////////Vat Upload 
		btnPreviewVat.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				if(!isUpdate)
				{
					/*String link = getApplication().getURL().toString();

					System.out.println("link is:"+link);

					if(link.endsWith(""+sessionBean.getContextName()+"/"))
					{
						link = link.replaceAll(""+sessionBean.getContextName()+"", "report")+filePathTmpVat;
						link=imagePathVat(0,"");
						link=tempimgVat;
						link=link+"VAADIN/themes"+tempimgVat.substring(tempimgVat.lastIndexOf("/"));
						System.out.println(link);
					}
					getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);*/
					String link = getApplication().getURL().toString().replaceAll(sessionBean.getContextName(), "report")+filePathTmpVat;
					getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
				}
				if(isUpdate)
				{
					/*if(!bpvUploadVat.actionCheck)
					{
						if(!imageLocVat.equalsIgnoreCase("0"))
						{
							String link = getApplication().getURL().toString();

							if(link.endsWith(""+sessionBean.getContextName()+"/"))
							{
								link = link.replaceAll(""+sessionBean.getContextName()+"/", imageLocVat.substring(22, imageLocVat.length()));
							}
							getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
						}
						else
						{
							showNotification("There is no File",Notification.TYPE_HUMANIZED_MESSAGE);
						}
					}
					if(bpvUploadVat.actionCheck)
					{
						String link = getApplication().getURL().toString();

						if(link.endsWith(""+sessionBean.getContextName()+"/"))
						{
							link = link.replaceAll(""+sessionBean.getContextName()+"", "report")+filePathTmpVat;
						}
						getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
					}*/
					
					if(!bpvUploadVat.actionCheck)
					{
						if(!imageLocVat.equalsIgnoreCase("0"))
						{
							String link = getApplication().getURL().toString().replaceAll(sessionBean.getContextName()+"/", imageLocVat.substring(22, imageLocVat.length()));
							getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
						}
						else
						{
							showNotification("There is no File",Notification.TYPE_HUMANIZED_MESSAGE);
						}
					}
					if(bpvUploadVat.actionCheck)
					{
						String link = getApplication().getURL().toString().replaceAll(sessionBean.getContextName(), "report")+filePathTmpVat;
						getWindow().open(new ExternalResource(link),"_blank",500,200,Window.BORDER_NONE);
					}
				}
			}
		});

		bpvUploadVat.upload.addListener(new Upload.SucceededListener() 
		{
			public void uploadSucceeded(SucceededEvent event) 
			{
				imagePathVat(0,"");
				btnPreviewVat.setEnabled(true);
				System.out.println("Done");
			}
		});
		////////////////////////////////////Vat uplad end
		cButton.btnNew.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				isFind = false;
				isUpdate = false;
				newButtonEvent();
			}
		});

		cButton.btnSave.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				formValidation();
			}
		});

		cButton.btnEdit.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				if(sessionBean.isUpdateable())
				{
					isFind = false;
					updateButtonEvent();
				}
				else
				{
					getParent().showNotification("Warning,","You have not Proper Authentication to Edit.", Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});
		nbDivision.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				DivisionLink();				
			}
		});

		nbArea.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				AreaLink();				
			}
		});
		cButton.btnRefresh.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				isFind = false;
				isUpdate=false;
				refreshButtonEvent();
				txtDrAmount.setEnabled(false);
				txtCrAmount.setEnabled(false);
			}
		});
		cButton.btnFind.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				isFind = true;
				findButtonEvent();
			}
		});
		cButton.btnExit.addListener(new ClickListener()
		{
			public void buttonClick(ClickEvent event)
			{
				close();
			}
		});

		cmbDivision.addListener(new ValueChangeListener()
		{
			public void valueChange(ValueChangeEvent event)
			{
				cmbArea.removeAllItems();
				if(cmbDivision.getValue()!=null)
				{
					cmbAreaAddData();
				}
			}
		});

		txtDrAmount.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				DrAmountfieldAction();
			}
		});

		txtCrAmount.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				CrAmountfieldAction();		
			}
		});

	}

	private String imagePath(int flag,String str)
	{
		String basePath = getWindow().getApplication().getContext().getBaseDirectory()+"".replace("\\","/")+"/VAADIN/themes/";
		System.out.println("basePath is:"+basePath+bpvUpload.fileName.trim());
		String stuImage = null;
		if(flag==0)
		{
			// image move
			if(bpvUpload.fileName.trim().length()>0)
				try {
					if(bpvUpload.fileName.toString().endsWith(".jpg")){
						String path = sessionBean.getUserId();
						fileMove(basePath+bpvUpload.fileName.trim(),SessionBean.imagePath+path+".jpg");
						tempimg=basePath+bpvUpload.fileName.trim();
						bpvPdf = SessionBean.imagePath+path+".jpg";
						filePathTmp = path+".jpg";
					}
					else{
						String path = sessionBean.getUserId();
						fileMove(basePath+bpvUpload.fileName.trim(),SessionBean.imagePath+path+".pdf");
						bpvPdf = SessionBean.imagePath+path+".pdf";
						filePathTmp = path+".pdf";
					}
				} 
			catch (IOException e){
				e.printStackTrace();
			}
			return bpvPdf;
		}

		if(flag==1)
		{
			// image move
			if(bpvUpload.fileName.trim().length()>0)
			{
				try
				{	
					if(bpvUpload.fileName.toString().endsWith(".jpg"))
					{
						String path = str;
						String projectName = sessionBean.getContextName();
						fileMove(basePath+bpvUpload.fileName.trim(),SessionBean.imagePath+projectName+"/PartyInformation/TradeLicence/"+path+".jpg");
						stuImage = SessionBean.imagePath+projectName+"/PartyInformation/TradeLicence/"+path+".jpg";
					}
					else
					{
						String path = str;
						String projectName = sessionBean.getContextName();
						fileMove(basePath+bpvUpload.fileName.trim(),SessionBean.imagePath+projectName+"/PartyInformation/TradeLicence/"+path+".pdf");
						stuImage = SessionBean.imagePath+projectName+"/PartyInformation/TradeLicence/"+path+".pdf";
					}
				}
				catch (IOException e)
				{
					e.printStackTrace();
				}
			}
			return stuImage;
		}
		return null;
	}

	/////////////////////////////////tin upload


	private String imagePathTin(int flag,String str)
	{
		String basePath = getWindow().getApplication().getContext().getBaseDirectory()+"".replace("\\","/")+"/VAADIN/themes/";
		System.out.println("basePath is:"+basePath+bpvUploadTin.fileName.trim());

		String stuImage = null;

		if(flag==0)
		{
			// image move
			if(bpvUploadTin.fileName.trim().length()>0)
				try {
					if(bpvUploadTin.fileName.toString().endsWith(".jpg")){
						String path = sessionBean.getUserId();
						fileMove(basePath+bpvUploadTin.fileName.trim(),SessionBean.imagePath+path+".jpg");
						tempimgTin=basePath+bpvUploadTin.fileName.trim();
						bpvPdfTin = SessionBean.imagePath+path+".jpg";
						filePathTmpTin = path+".jpg";
					}
					else{
						String path = sessionBean.getUserId();
						fileMove(basePath+bpvUploadTin.fileName.trim(),SessionBean.imagePath+path+".pdf");
						bpvPdfTin = SessionBean.imagePath+path+".pdf";
						filePathTmpTin = path+".pdf";
					}
				} 
			catch (IOException e){
				e.printStackTrace();
			}
			return bpvPdfTin;
		}

		if(flag==1)
		{
			// image move
			if(bpvUploadTin.fileName.trim().length()>0)
			{
				try
				{	
					if(bpvUploadTin.fileName.toString().endsWith(".jpg"))
					{
						String path = str;
						String projectName = sessionBean.getContextName();
						fileMove(basePath+bpvUploadTin.fileName.trim(),SessionBean.imagePath+projectName+"/PartyInformation/Tin/"+path+".jpg");
						stuImage = SessionBean.imagePath+projectName+"/PartyInformation/Tin/"+path+".jpg";
					}
					else
					{
						String path = str;
						String projectName = sessionBean.getContextName();
						fileMove(basePath+bpvUploadTin.fileName.trim(),SessionBean.imagePath+projectName+"/PartyInformation/Tin/"+path+".pdf");
						stuImage = SessionBean.imagePath+projectName+"/PartyInformation/Tin/"+path+".pdf";
					}
				}
				catch (IOException e)
				{
					e.printStackTrace();
				}
			}
			return stuImage;
		}
		return null;
	}
	//////////////////////////////////Tin upload end

	/////////////////////////////////vat upload


	private String imagePathVat(int flag,String str)
	{
		String basePath = getWindow().getApplication().getContext().getBaseDirectory()+"".replace("\\","/")+"/VAADIN/themes/";
		System.out.println("basePath is:"+basePath+bpvUploadVat.fileName.trim());

		String stuImage = null;

		if(flag==0)
		{
			// image move
			if(bpvUploadVat.fileName.trim().length()>0)
				try {
					if(bpvUploadVat.fileName.toString().endsWith(".jpg")){
						String path = sessionBean.getUserId();
						fileMove(basePath+bpvUploadVat.fileName.trim(),SessionBean.imagePath+path+".jpg");
						tempimgVat=basePath+bpvUploadVat.fileName.trim();
						bpvPdfVat = SessionBean.imagePath+path+".jpg";
						filePathTmpVat = path+".jpg";
					}
					else{
						String path = sessionBean.getUserId();
						fileMove(basePath+bpvUploadVat.fileName.trim(),SessionBean.imagePath+path+".pdf");
						bpvPdfVat = SessionBean.imagePath+path+".pdf";
						filePathTmpVat = path+".pdf";
					}
				} 
			catch (IOException e){
				e.printStackTrace();
			}
			return bpvPdfVat;
		}

		if(flag==1)
		{
			// image move
			if(bpvUploadVat.fileName.trim().length()>0)
			{
				try
				{	
					if(bpvUploadVat.fileName.toString().endsWith(".jpg"))
					{
						String path = str;
						String projectName = sessionBean.getContextName();
						fileMove(basePath+bpvUploadVat.fileName.trim(),SessionBean.imagePath+projectName+"/PartyInformation/Vat/"+path+".jpg");
						stuImage = SessionBean.imagePath+projectName+"/PartyInformation/Vat/"+path+".jpg";
					}
					else
					{
						String path = str;
						String projectName = sessionBean.getContextName();
						fileMove(basePath+bpvUploadVat.fileName.trim(),SessionBean.imagePath+projectName+"/PartyInformation/Vat/"+path+".pdf");
						stuImage = SessionBean.imagePath+projectName+"/PartyInformation/Vat/"+path+".pdf";
					}
				}
				catch (IOException e)
				{
					e.printStackTrace();
				}
			}
			return stuImage;
		}
		return null;
	}
	//////////////////////////////////Tin upload end
	private void fileMove(String fStr,String tStr) throws IOException
	{
		try
		{
			File f1 = new File(tStr);
			if(f1.isFile())
				f1.delete();
		}
		catch(Exception exp){}
		FileInputStream ff= new FileInputStream(fStr);

		File  ft = new File(tStr);
		FileOutputStream fos = new FileOutputStream(ft);

		while(ff.available()!=0)
		{
			fos.write(ff.read());
		}
		fos.close();
		ff.close();
	}

	public void AreaLink()
	{
		Window win = new AreaInformation(sessionBean);

		win.setStyleName("cwindow");
		win.setModal(true);
		win.addListener(new Window.CloseListener() 
		{
			public void windowClose(CloseEvent e) 
			{
				cmbAreaAddData();
			}
		});
		this.getParent().addWindow(win);
	}

	public void DivisionLink()
	{
		Window win = new DivisionInformation(sessionBean);

		win.setStyleName("cwindow");
		win.setModal(true);
		win.addListener(new Window.CloseListener() 
		{
			public void windowClose(CloseEvent e) 
			{
				cmbDivisionAddData();
			}
		});
		this.getParent().addWindow(win);
	}

	private void DrAmountfieldAction()
	{
		if(!txtDrAmount.getValue().toString().isEmpty())
		{
			txtCrAmount.setEnabled(false);
		}
		else
		{
			txtCrAmount.setEnabled(true);
		}
	}

	private void CrAmountfieldAction()
	{
		if(!txtCrAmount.getValue().toString().isEmpty())
		{
			txtDrAmount.setEnabled(false);
		}
		else
		{
			txtDrAmount.setEnabled(true);
		}
	}

	private void formValidation()
	{
		if(sessionBean.isSubmitable())
		{
			if(!txtPartyId.getValue().toString().isEmpty())
			{
				if(!txtPartyName.getValue().toString().isEmpty())
				{
					if(!txtaddress.getValue().toString().isEmpty())
					{
						//if(!txtTinNo.getValue().toString().isEmpty())
						if(true)
						{
							if(!txtMobile.getValue().toString().isEmpty())
							{
								if(!txtContactPerson.getValue().toString().isEmpty())
								{
									if(!txtDesignation.getValue().toString().isEmpty())
									{
										if(!txtPersonMobile.getValue().toString().isEmpty())
										{
											if(cmbIsActive.getValue()!=null)
											{
												if(cmbDivision.getValue()!=null)
												{
													if(!txtPartyName.getValue().toString().trim().equalsIgnoreCase(duplicateName()))
													{
														/*if(!isUpdate){
															if(imagePathTin(1,txtPartyId.getValue().toString())!=null){
																if(imagePathVat(1,txtPartyId.getValue().toString())!=null){
																	saveButtonEvent();
																}
																else{
																	getParent().showNotification("Warning!","Please upload Vat",Notification.TYPE_WARNING_MESSAGE);
																}
															}
															else{
																getParent().showNotification("Warning!","Please upload  Tin",Notification.TYPE_WARNING_MESSAGE);
															}
														}
														else{
															saveButtonEvent();
														}*/
														saveButtonEvent();
													}
													else
													{
														getParent().showNotification("Warning!","This party is already inserted",Notification.TYPE_WARNING_MESSAGE);
														txtPartyName.focus();
													}
												}
												else
												{
													getParent().showNotification("Warning!","Select Group.", Notification.TYPE_WARNING_MESSAGE);
													cmbDivision.focus();
												}
											}
											else
											{
												getParent().showNotification("Warning!","Select Activity.", Notification.TYPE_WARNING_MESSAGE);
												cmbIsActive.focus();
											}
										}
										else
										{
											getParent().showNotification("Warning!","Provide Person Mobile.", Notification.TYPE_WARNING_MESSAGE);
											txtPersonMobile.focus();
										}
									}
									else
									{
										getParent().showNotification("Warning!","Provide Person Designation.", Notification.TYPE_WARNING_MESSAGE);
										txtDesignation.focus();
									}
								}
								else
								{
									getParent().showNotification("Warning!","Provide Name of Contact Person.", Notification.TYPE_WARNING_MESSAGE);
									txtContactPerson.focus();
								}
							}
							else
							{
								getParent().showNotification("Warning!","Provide Mobile Number.", Notification.TYPE_WARNING_MESSAGE);
								txtMobile.focus();
							}
						}
						else
						{
							getParent().showNotification("Warning!","Provide Party TIN No.", Notification.TYPE_WARNING_MESSAGE);
							txtTinNo.focus();
						}
					}
					else
					{
						getParent().showNotification("Warning!","Provide Party Address.", Notification.TYPE_WARNING_MESSAGE);
						txtaddress.focus();
					}
				}
				else
				{
					getParent().showNotification("Warning!","Provide Party Name.", Notification.TYPE_WARNING_MESSAGE);
					txtPartyName.focus();
				}
			}
			else
			{
				getParent().showNotification("Warning!","Provide Party Code.", Notification.TYPE_WARNING_MESSAGE);
			}
		}
		else
		{
			getParent().showNotification("Warning!","You have not Proper Authentication to Save.", Notification.TYPE_WARNING_MESSAGE);
		}
	}

	private String duplicateName()
	{
		String productName="";
		if(!isUpdate)
		{
			Transaction tx = null;
			try 
			{
				Session session = SessionFactoryUtil.getInstance().getCurrentSession();
				tx = session.beginTransaction();

				String query = " select partyName from tbPartyInfo where partyName='"+txtPartyName.getValue().toString().trim()+"' ";
				Iterator iter = session.createSQLQuery(query).list().iterator();

				if (iter.hasNext()) 
				{
					productName = iter.next().toString();
				}
			}
			catch (Exception ex) 
			{
				System.out.print(ex);
			}
		}
		return productName;
	}

	private void findButtonEvent() 
	{
		Window win = new PartyFindWindow(sessionBean, txtSuppID,"PartyId");
		win.addListener(new Window.CloseListener() 
		{
			public void windowClose(CloseEvent e) 
			{
				if (txtSuppID.getValue().toString().length() > 0)
				{
					txtClear();
					txtPartyIdBack.setValue(txtSuppID.getValue().toString());
					findInitialise(txtSuppID.getValue().toString());

					if(imageLoc.equals("0"))
					{btnPreview.setCaption("attach");
						//btnPreview.setEnabled(false);
					}
					else
					{btnPreview.setCaption("Preview");
					//btnPreview.setEnabled(true);
					}

					if(imageLocTin.equals("0"))
					{btnPreviewTin.setCaption("attach");
					//btnPreviewTin.setEnabled(false);
					}
					else
					{btnPreviewTin.setCaption("Preview");
					//btnPreviewTin.setEnabled(true);
					}

					if(imageLocVat.equals("0"))
					{btnPreviewVat.setCaption("attach");
					//btnPreviewVat.setEnabled(false);
					}
					else
					{btnPreviewVat.setCaption("Preview");
					//btnPreviewVat.setEnabled(true);
					}
				}
			}
		});
		this.getParent().addWindow(win);	
	}

	private String selectPartyId()
	{
		String partyCode = "";
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			String query = " Select isnull(max(cast(partyCode as int)),0)+1 from tbPartyInfo";

			Iterator iter = session.createSQLQuery(query).list().iterator();

			if (iter.hasNext()) 
			{
				partyCode = iter.next().toString();
			}
		} 
		catch (Exception ex) 
		{
			System.out.print(ex);
		}

		return partyCode;
	}

	public void cmbDivisionAddData()
	{
		cmbDivision.removeAllItems();
		Transaction tx=null;
		try
		{
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();
			List list=session.createSQLQuery(" Select Group_Id,vDivisionName from tbDivisionInfo").list();

			for(Iterator iter=list.iterator();iter.hasNext();)
			{
				Object[] element = (Object[]) iter.next();
				cmbDivision.addItem(element[0]);
				cmbDivision.setItemCaption(element[0], element[1].toString());
			}
		}
		catch(Exception exp)
		{
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}
	}

	private void cmbAreaAddData()
	{
		Transaction tx=null;

		if(cmbDivision.getValue()!=null)
		{
			try
			{
				Session session=SessionFactoryUtil.getInstance().getCurrentSession();
				tx=session.beginTransaction();
				List list=session.createSQLQuery(" SELECT SubGroup_Id,vAreaName FROM tbAreaInfo WHERE Group_Id = '"+cmbDivision.getValue().toString()+"' ").list();

				for(Iterator iter=list.iterator();iter.hasNext();)
				{
					Object[] element = (Object[]) iter.next();
					cmbArea.addItem(element[0].toString());
					cmbArea.setItemCaption(element[0].toString(), element[1].toString());
				}
			}
			catch(Exception exp)
			{
				this.getParent().showNotification("Error:",exp+"",Notification.TYPE_ERROR_MESSAGE);
			}
		}
	}
	private void findInitialise(String txtParty) 
	{
		Transaction tx = null;
		String sql = null;
		String imgcap="";
		String imgcapTin="";
		String imgcapVat="";
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			sql = "select vPartryCode,partyName,address,tinNo,vVatNo,telephone,mobile,fax,email,"+
					" contactPerson,Designation,personMobile,isActive,DivisionId,AreaName,ledgerCode,vGroupId,b.DrAmount,b.CrAmount,partyCode,vTradeLicense,vTinCertificate,vVatCertificate from tbPartyInfo a"+
					" inner join tbLedger_Op_Balance b on a.ledgerCode=b.Ledger_Id Where partyCode = '"+txtParty+"'";
			System.out.println(sql);
			List led = session.createSQLQuery(sql).list();

			if (led.iterator().hasNext()) 
			{
				Object[] element = (Object[]) led.iterator().next();

				txtPartyCode.setValue(element[0]);
				txtPartyName.setValue(element[1]);
				txtaddress.setValue(element[2]);
				txtTinNo.setValue(element[3]);
				txtVatNo.setValue(element[4]);
				txtTele.setValue(element[5]);
				txtMobile.setValue(element[6]);
				txtFax.setValue(element[7]);
				txtEmail.setValue(element[8]);
				txtContactPerson.setValue(element[9]);
				txtDesignation.setValue(element[10]);
				txtPersonMobile.setValue(element[11]);

				if(element[12].toString().equalsIgnoreCase("1"))
				{
					cmbIsActive.setValue("Active");
				}
				else
				{
					cmbIsActive.setValue("Inactive");
				}

				cmbDivision.setValue(element[13]);
				cmbArea.setValue(element[14].toString());

				ledgerCode.setValue(element[15].toString());
				GroupId = (element[16].toString());

				txtDrAmount.setValue(cm.setComma(Double.parseDouble(element[17].toString())));
				txtCrAmount.setValue(cm.setComma(Double.parseDouble(element[18].toString())));
				txtPartyId.setValue(element[19]);
				///////////////////////// Trade Licence
				if(!element[20].toString().equals("0")){
					imageLoc=element[20].toString();
					imgcap=element[20].toString().substring(element[20].toString().lastIndexOf("/")+1,element[20].toString().length());
					bpvUpload.status.setValue(new Label("<font size=1px>("+imgcap+")</font>",Label.CONTENT_XHTML));
				}
				else{
					bpvUpload.fileName = "";
					bpvUpload.status.setValue(new Label("<font size=1px>(Select .pdf/.jpg Format)</font>",Label.CONTENT_XHTML));
					filePathTmp = "";
					bpvUpload.actionCheck = false;
					imageLoc = "0";
				}
				////////////////////////////Tin
				if(!element[21].toString().equals("0")){
					imageLocTin=element[21].toString();
					imgcapTin=element[21].toString().substring(element[21].toString().lastIndexOf("/")+1,element[21].toString().length());
					bpvUploadTin.status.setValue(new Label("<font size=1px>("+imgcapTin+")</font>",Label.CONTENT_XHTML));
				}
				else{
					bpvUploadTin.fileName = "";
					bpvUploadTin.status.setValue(new Label("<font size=1px>(Select .pdf/.jpg Format)</font>",Label.CONTENT_XHTML));
					filePathTmpTin = "";
					bpvUploadTin.actionCheck = false;
					imageLocTin = "0";
				}
				////////////////////////////Vat
				if(!element[22].toString().equals("0")){
					imageLocVat=element[22].toString();
					imgcapVat=element[22].toString().substring(element[22].toString().lastIndexOf("/")+1,element[22].toString().length());
					bpvUploadVat.status.setValue(new Label("<font size=1px>("+imgcapVat+")</font>",Label.CONTENT_XHTML));
				}
				else{
					bpvUploadVat.fileName = "";
					bpvUploadVat.status.setValue(new Label("<font size=1px>(Select .pdf/.jpg Format)</font>",Label.CONTENT_XHTML));
					filePathTmpVat = "";
					bpvUploadVat.actionCheck = false;
					imageLocVat = "0";
				}
			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	private void refreshButtonEvent() 
	{
		txtInit(true);
		btnIni(true);
		txtClear();
		isNew=false;
	}
	private void updateButtonEvent()
	{
		if(!txtPartyName.getValue().toString().isEmpty())
		{
			isUpdate = true;
			isFind = false;
			btnIni(false);
			txtInit(false);
		}
		else
		{
			this.getParent().showNotification("Update Failed","There are no data for update.",Notification.TYPE_WARNING_MESSAGE);
		}
	}

	private void saveButtonEvent()
	{
		if(!isUpdate)
		{
			PartyId = autoId();
			LedgerId=ledgerId();
			System.out.println("PartyId: "+PartyId+" LedgerId: "+LedgerId);
		}
		else
		{
			PartyId = "";
			LedgerId = "";
		}

		if(isUpdate)
		{
			MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to update  information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
			mb.show(new EventListener()
			{
				public void buttonClicked(ButtonType buttonType)
				{
					if(buttonType == ButtonType.YES)
					{
						updateData();
						isUpdate=false;
						btnIni(true);
						txtInit(true);
						txtClear();
						cButton.btnNew.focus();
						isFind = false;
						txtDrAmount.setEnabled(false);
						txtCrAmount.setEnabled(false);
					}
				}
			});
		}
		else
		{
			MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to save  information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
			mb.show(new EventListener()
			{
				public void buttonClicked(ButtonType buttonType)
				{
					if(buttonType == ButtonType.YES)
					{
						insertData();		
						btnIni(true);
						txtInit(true);
						txtClear();
					}
				}
			});
		}
	}

	private void insertData()
	{
		String GroupId= "";
		String activity = cmbIsActive.getValue().toString();
		String partyId=selectPartyId();

		//if(attach!="0"){
		int acId = 0;
		if(activity.equalsIgnoreCase("Active"))
		{
			acId = 1;
		}
		if(activity.equalsIgnoreCase("Inactive"))
		{
			acId = 2;
		}
		Transaction tx = null;
		try
		{
			String attach = imagePath(1,partyId)==null? imageLoc:imagePath(1,partyId);
			String attachTin = imagePathTin(1,partyId)==null? imageLocTin:imagePathTin(1,partyId);
			String attachVat = imagePathVat(1,partyId)==null? imageLocVat:imagePathVat(1,partyId);
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			Iterator iterMax = session.createSQLQuery("SELECT 'G'+ISNULL((SELECT cast((max(substring(Group_Id,2,len(Group_Id)-1))+1) as VARCHAR)" +
					" FROM TbMain_Group),101) ").list().iterator();

			GroupId = iterMax.next().toString();

			String InsertParty = " INSERT into dbo.tbPartyInfo(partyCode,partyName,address,tinNo,vVatNo,telephone,mobile,"+
					" fax,email,contactPerson,Designation,personMobile,isActive,DivisionId,"+ 
					" DivisionName,AreaId,AreaName,ledgerCode,userName,userIp,entryTime,vGroupId,"
					+ "vPartryCode,vTradeLicense,vTinCertificate,vVatCertificate) values(" +
					" '"+selectPartyId()+"'," +
					" '"+txtPartyName.getValue().toString().trim()+"'," +
					" '"+txtaddress.getValue().toString().trim()+"'," +
					" '"+txtTinNo.getValue().toString().trim()+"'," +
					" '"+txtVatNo.getValue().toString().trim()+"'," +
					" '"+txtTele.getValue().toString().trim()+"'," +
					" '"+txtMobile.getValue().toString().trim()+"'," +
					" '"+txtFax.getValue().toString().trim()+"'," +
					" '"+txtEmail.getValue().toString().trim()+"'," +
					" '"+txtContactPerson.getValue().toString().trim()+"'," +
					" '"+txtDesignation.getValue().toString().trim()+"'," +
					" '"+txtPersonMobile.getValue().toString().trim()+"'," +
					" '"+acId+"'," +
					" '"+cmbDivision.getValue()+"'," +
					" '"+cmbDivision.getItemCaption(cmbDivision.getValue())+"'," +
					" '"+(cmbArea.getValue()==null?"":cmbArea.getValue().toString())+"'," +
					" '"+(cmbArea.getValue()==null?"":cmbArea.getItemCaption(cmbArea.getValue()))+"'," +
					" '"+LedgerId+"'," +
					" '"+sessionBean.getUserId()+"','"+sessionBean.getUserIp()+"',CURRENT_TIMESTAMP," +
					" '"+GroupId+"'," +
					" '"+txtPartyCode.getValue().toString().trim()+"','"+attach+"','"+attachTin+"','"+attachVat+"')";

			session.createSQLQuery(InsertParty).executeUpdate();
			String InsertLedger="INSERT into dbo.tbLedger(Ledger_Id,Ledger_Name,Creation_Year,Parent_Id,Create_From,userId,userIp,entryTime,companyId) values(" +
					" '"+LedgerId+"', " +
					" '"+txtPartyName.getValue().toString().trim()+"', " +
					" '"+dateFormat.format(sessionBean.getFiscalOpenDate())+"', " +
					" '"+(cmbArea.getValue()!=null?cmbArea.getValue().toString():cmbDivision.getValue().toString())+"'," +
					" 'A6"+"-"+cmbDivision.getValue().toString()+""+(cmbArea.getValue()==null?"":"-"+cmbArea.getValue().toString())+"', " +
					" '"+sessionBean.getUserId()+"','"+sessionBean.getUserIp()+"', " +
					" CURRENT_TIMESTAMP, '"+sessionBean.getCompanyId()+"') ";
			session.createSQLQuery(InsertLedger).executeUpdate();

			String LedgerOpen="INSERT into dbo.tbLedger_Op_Balance(Ledger_Id,DrAmount,CrAmount,Op_Year,userId,userIp,entryTime,companyId) values(" +
					" '"+LedgerId+"', " +
					" '"+txtDrAmount.getValue().toString().replaceAll(",", "")+"'," +
					" '"+txtCrAmount.getValue().toString().replaceAll(",", "")+"'," +
					" '"+dateFormat.format(sessionBean.getFiscalOpenDate())+"', " +
					" '"+sessionBean.getUserId()+"','"+sessionBean.getUserIp()+"', " +
					" CURRENT_TIMESTAMP, '"+sessionBean.getCompanyId()+"') ";
			session.createSQLQuery(LedgerOpen).executeUpdate();

			String sql = "INSERT INTO dbo.tbMain_Group(Group_Id,Group_Name,Head_Id,userId,userIp,entryTime) VALUES(" +
					" '"+GroupId+"', " +
					" '"+txtPartyName.getValue().toString().trim()+"', " +
					" 'I1'," +
					" '"+sessionBean.getUserId()+"'," +
					" '"+sessionBean.getUserIp()+"',CURRENT_TIMESTAMP)";
			session.createSQLQuery(sql).executeUpdate();


			tx.commit();
			this.getParent().showNotification("All information saved successfully.");
		}
		catch(Exception exp)
		{
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
		/*}
		else{
			showNotification(null,"Please upload attachment",Notification.TYPE_TRAY_NOTIFICATION);
		}*/

	}

	public String ledgerId() 
	{
		String ledgerId = "";
		Transaction tx = null;

		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			String query = "Select cast(isnull(max(cast(replace(Ledger_Id, 'AL', '')as int))+1, 1)as varchar)" +
					" from tbLedger where Ledger_Id like 'AL%' ";
			Iterator iter = session.createSQLQuery(query).list().iterator();

			if (iter.hasNext()) 
			{
				ledgerId = "AL"+iter.next().toString();
			}
		}
		catch (Exception ex) 
		{
			System.out.print(ex);
		}
		return ledgerId;
	}

	public boolean updateData() 
	{

		Transaction tx = null;
		try

		{
			String partyId=txtPartyId.getValue().toString();

			String attach = imagePath(1,partyId)==null? imageLoc:imagePath(1,partyId);
			String attachTin = imagePathTin(1,partyId)==null? imageLocTin:imagePathTin(1,partyId);
			String attachVat = imagePathVat(1,partyId)==null? imageLocVat:imagePathVat(1,partyId);
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			String updateParty ="UPDATE tbPartyInfo set" +
					" vPartryCode = '"+txtPartyCode.getValue().toString().trim()+"' ,"+
					" partyName = '"+txtPartyName.getValue().toString().trim()+"' ," +
					" address = '"+txtaddress.getValue().toString().trim()+"' ," +
					" tinNo = '"+txtTinNo.getValue().toString()+"' ," +
					" vVatNo = '"+txtVatNo.getValue().toString()+"' ," +
					" telephone = '"+txtTele.getValue().toString()+"' ," +
					" mobile = '"+txtMobile.getValue().toString().trim()+"' ," +
					" fax = '"+txtFax.getValue().toString().trim()+"' ," +
					" email = '"+txtEmail.getValue().toString().trim()+"' ," +
					" contactPerson = '"+txtContactPerson.getValue().toString().trim()+"' ," +
					" Designation = '"+txtDesignation.getValue().toString().trim()+"' ," +
					" personMobile = '"+txtPersonMobile.getValue().toString().trim()+"' ," +
					" isActive = '"+(cmbIsActive.getValue().toString().equals("Active")?"1":"2")+"' ," +
					" DivisionId = '"+cmbDivision.getValue().toString()+"' ," +
					" DivisionName = '"+cmbDivision.getItemCaption(cmbDivision.getValue())+"' ," +
					" AreaId = '"+(cmbArea.getValue()!=null?cmbArea.getValue().toString():"")+"' ," +
					" AreaName = '"+(cmbArea.getValue()!=null?cmbArea.getItemCaption(cmbArea.getValue()):"")+"' ," +
					" userName = '"+sessionBean.getUserId()+"', " +
					" userIp = '"+sessionBean.getUserIp()+"', " +
					" entryTime = CURRENT_TIMESTAMP,vTradeLicense = '"+attach+"' ,"
					+ "vTinCertificate='"+attachTin+"' ,vVatCertificate='"+attachVat+"' " +
					" where ledgerCode='"+ledgerCode.getValue()+"'";

			System.out.println("UpdateProduct: "+updateParty);
			session.createSQLQuery(updateParty).executeUpdate();

			String UpdateLedger = "UPDATE tbLedger set" +
					" Ledger_Name = '"+txtPartyName.getValue().toString().trim()+"' " +
					" where Ledger_Id='"+ledgerCode.getValue()+"' ";

			System.out.println("UpdateLedger: "+UpdateLedger);
			session.createSQLQuery(UpdateLedger).executeUpdate();

			String UpdatetbLedgerOpBalance = "UPDATE tbLedger_Op_Balance set" +
					" DrAmount = '"+txtDrAmount.getValue().toString()+"', " +
					" CrAmount = '"+txtCrAmount.getValue().toString()+"' " +
					" where Ledger_Id='"+ledgerCode.getValue()+"' ";

			System.out.println("UpdatetbLedgerop: "+UpdatetbLedgerOpBalance);
			session.createSQLQuery(UpdatetbLedgerOpBalance).executeUpdate();

			String UpdateGroup = "UPDATE tbMain_Group set" +
					" Group_Name = '"+txtPartyName.getValue().toString().trim()+"' " +
					" where Group_Id = '"+GroupId+"' ";

			System.out.println("UpdateLedger: "+UpdateGroup);
			session.createSQLQuery(UpdateGroup).executeUpdate();

			this.getParent().showNotification("All information update successfully.");

			tx.commit();

			return true;
		}
		catch(Exception exp)
		{
			tx.rollback();
			this.getParent().showNotification("Error to Update",exp+"",Notification.TYPE_ERROR_MESSAGE);
			return false;
		}
	}

	private void newButtonEvent() 
	{
		txtInit(false);
		btnIni(false);
		txtClear();	
		isNew=true;
		txtPartyId.setValue(selectPartyId());
		txtPartyCode.focus();
	}

	public String autoId()
	{
		String s_id = null;
		Transaction tx = null;
		try{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			String query=" SELECT ISNULL(CONVERT(VARCHAR,REPLACE(MAX(partyCode),'','')+1), '1') as SD from tbPartyInfo ";
			Iterator iter = session.createSQLQuery(query).list().iterator();
			if(iter.hasNext())
			{
				s_id=iter.next().toString().trim();
			}
		}
		catch(Exception ex){this.getParent().showNotification("Error",ex+"",Notification.TYPE_ERROR_MESSAGE);
		}
		return s_id;
	}

	private void focusEnter()
	{
		allComp.add(txtPartyCode);
		allComp.add(txtPartyName);
		allComp.add(txtaddress);
		allComp.add(txtTinNo);
		allComp.add(txtVatNo);
		allComp.add(txtTele);
		allComp.add(txtMobile);
		allComp.add(txtFax);
		allComp.add(txtEmail);
		allComp.add(txtContactPerson);
		allComp.add(txtDesignation);
		allComp.add(txtPersonMobile);
		allComp.add(cmbIsActive);
		allComp.add(cmbDivision);
		allComp.add(cmbArea);

		allComp.add(cButton.btnSave);

		new FocusMoveByEnter(this,allComp);
	}

	private void txtClear()
	{
		txtPartyIdBack.setValue("");
		txtPartyId.setValue("");
		txtPartyCode.setValue("");
		txtPartyName.setValue("");
		txtaddress.setValue("");
		txtTinNo.setValue("");
		txtVatNo.setValue("");
		txtEmail.setValue("");
		txtFax.setValue("");
		txtMobile.setValue("");
		txtTele.setValue("");
		txtContactPerson.setValue("");
		txtDesignation.setValue("");
		txtPersonMobile.setValue("");
		cmbIsActive.setValue(null);
		cmbArea.setValue(null);
		cmbDivision.setValue(null);
		txtDrAmount.setValue("");
		txtCrAmount.setValue("");

		bpvUpload.fileName = "";
		bpvUpload.status.setValue(new Label("<font size=1px>(Select .pdf/.jpg Format)</font>",Label.CONTENT_XHTML));
		filePathTmp = "";
		bpvUpload.actionCheck = false;
		imageLoc = "0";
		btnPreview.setEnabled(false);
		////////Tin
		bpvUploadTin.fileName = "";
		bpvUploadTin.status.setValue(new Label("<font size=1px>(Select .pdf/.jpg Format)</font>",Label.CONTENT_XHTML));
		filePathTmpTin = "";
		bpvUploadTin.actionCheck = false;
		imageLocTin = "0";
		btnPreviewTin.setEnabled(false);
		//////////vat
		bpvUploadVat.fileName = "";
		bpvUploadVat.status.setValue(new Label("<font size=1px>(Select .pdf/.jpg Format)</font>",Label.CONTENT_XHTML));
		filePathTmpVat = "";
		bpvUploadVat.actionCheck = false;
		imageLocVat = "0";
		btnPreviewVat.setEnabled(false);
		
		btnPreview.setCaption("Preview");
		btnPreviewTin.setCaption("Preview");
		btnPreviewVat.setCaption("Preview");
		
	}

	public void txtInit(boolean t)
	{
		txtPartyCode.setEnabled(!t);
		txtPartyName.setEnabled(!t);
		txtTinNo.setEnabled(!t);
		txtVatNo.setEnabled(!t);
		txtEmail.setEnabled(!t);
		txtaddress.setEnabled(!t);
		txtTele.setEnabled(!t);
		txtMobile.setEnabled(!t);
		txtFax.setEnabled(!t);
		txtContactPerson.setEnabled(!t);
		txtDesignation.setEnabled(!t);
		txtPersonMobile.setEnabled(!t);
		cmbIsActive.setEnabled(!t);
		cmbDivision.setEnabled(!t);
		cmbArea.setEnabled(!t);
		nbDivision.setEnabled(!t);
		nbArea.setEnabled(!t);
		txtDrAmount.setEnabled(!t);
		txtCrAmount.setEnabled(!t);
		btnPreview.setEnabled(!t);
		bpvUpload.setEnabled(!t);
		btnPreviewTin.setEnabled(!t);
		btnPreviewVat.setEnabled(!t);
		
		bpvUploadTin.setEnabled(!t);
		bpvUploadVat.setEnabled(!t);
	}

	private void btnIni(boolean t)
	{
		cButton.btnNew.setEnabled(t);
		cButton.btnEdit.setEnabled(t);
		cButton.btnSave.setEnabled(!t);
		cButton.btnRefresh.setEnabled(!t);
		cButton.btnDelete.setEnabled(t);
		cButton.btnFind.setEnabled(t);
	}

	private AbsoluteLayout buildMainLayout() 
	{
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("550px");
		mainLayout.setHeight("580px");
		mainLayout.setMargin(false);
	

		lblPartyId = new Label();
		lblPartyId.setImmediate(false);
		lblPartyId.setWidth("-1px");
		lblPartyId.setHeight("-1px");
		lblPartyId.setValue("Dealer / Party Code :");
		mainLayout.addComponent(lblPartyId, "top:25.0px; left:50.0px;");

		txtPartyCode = new TextField();
		txtPartyCode.setImmediate(true);
		txtPartyCode.setWidth("120px");
		txtPartyCode.setHeight("-1px");
		mainLayout.addComponent(txtPartyCode, "top:22.0px;left:180.0px;");

		txtPartyId = new TextRead();
		txtPartyId.setImmediate(true);
		txtPartyId.setWidth("120px");
		txtPartyId.setHeight("24px");
		txtPartyId.setVisible(false);
		mainLayout.addComponent(txtPartyId, "top:22.0px;left:180.0px;");

		lblPartyName = new Label();
		lblPartyName.setImmediate(false);
		lblPartyName.setWidth("-1px");
		lblPartyName.setHeight("-1px");
		lblPartyName.setValue("Dealer / Party Name :");
		mainLayout.addComponent(lblPartyName, "top:50.0px; left:50.0px;");

		txtPartyName = new TextField();
		txtPartyName.setImmediate(false);
		txtPartyName.setWidth("320px");
		txtPartyName.setHeight("-1px");
		mainLayout.addComponent(txtPartyName, "top:47.0px; left:180.0px;");

		// lblAddress
		lblAddress = new Label();
		lblAddress.setImmediate(false);
		lblAddress.setWidth("-1px");
		lblAddress.setHeight("-1px");
		lblAddress.setValue("Address :");
		mainLayout.addComponent(lblAddress, "top:75.0px; left:50;");

		// txtaddress
		txtaddress = new TextArea();
		txtaddress.setImmediate(false);
		txtaddress.setWidth("320px");
		txtaddress.setHeight("48px");
		mainLayout.addComponent(txtaddress, "top:73.0px; left:180.0px;");

		// lblTele
		lblTele = new Label();
		lblTele.setImmediate(false);
		lblTele.setWidth("-1px");
		lblTele.setHeight("-1px");
		lblTele.setValue("Telephone :");
		mainLayout.addComponent(lblTele, "top:125.0px; left :50.0px;");

		// txtTele
		txtTele = new TextField();
		txtTele.setImmediate(false);
		txtTele.setWidth("158px");
		txtTele.setHeight("-1px");
		mainLayout.addComponent(txtTele, "top:122.0px; left:180.0px;");

		// lblMobile
		lblMobile = new Label();
		lblMobile.setImmediate(false);
		lblMobile.setWidth("-1px");
		lblMobile.setHeight("-1px");
		lblMobile.setValue("Mobile :");
		mainLayout.addComponent(lblMobile, "top:150.0px; left:50.0px;");

		// txtMobile
		txtMobile = new TextField();
		txtMobile.setImmediate(false);
		txtMobile.setWidth("158px");
		txtMobile.setHeight("-1px");
		txtMobile.setSecret(false);
		mainLayout.addComponent(txtMobile,"top:148.0px; left:180.0px");

		// lblFax
		lblFax = new Label();
		lblFax.setImmediate(false);
		lblFax.setWidth("-1px");
		lblFax.setHeight("-1px");
		lblFax.setValue("Fax :");
		mainLayout.addComponent(lblFax, "top:175.0px; left:50.0px;");

		// txtFax
		txtFax = new TextField();
		txtFax.setImmediate(false);
		txtFax.setWidth("158px");
		txtFax.setHeight("-1px");
		txtFax.setSecret(false);
		mainLayout.addComponent(txtFax, "top:173.0px; left:180.0px;");

		// lblEmail
		lblEmail = new Label();
		lblEmail.setImmediate(false);
		lblEmail.setWidth("-1px");
		lblEmail.setHeight("-1px");
		lblEmail.setValue("Email :");
		mainLayout.addComponent(lblEmail, "top:200.0px; left:50.0px;");

		// txtEmail
		txtEmail = new TextField();
		txtEmail.setImmediate(false);
		txtEmail.setWidth("250px");
		txtEmail.setHeight("-1px");
		txtEmail.setSecret(false);
		mainLayout.addComponent(txtEmail, "top:198.0px; left:180.0px;");

		// lblContactPerson
		lblContactPerson = new Label();
		lblContactPerson.setImmediate(false);
		lblContactPerson.setWidth("-1px");
		lblContactPerson.setHeight("-1px");
		lblContactPerson.setValue("Contact Person :");
		mainLayout.addComponent(lblContactPerson,"top:225.0px; left:50.0px;");

		// txtContactPerson
		txtContactPerson = new TextField();
		txtContactPerson.setImmediate(false);
		txtContactPerson.setWidth("318px");
		txtContactPerson.setHeight("-1px");
		mainLayout.addComponent(txtContactPerson,"top:223.0px;left:180.0px;");

		// lblDesignation
		lblDesignation = new Label();
		lblDesignation.setImmediate(false);
		lblDesignation.setWidth("-1px");
		lblDesignation.setHeight("-1px");
		lblDesignation.setValue("Designation :");
		mainLayout.addComponent(lblDesignation,"top:250.0px; left:50.0px;");

		// txtDesignation
		txtDesignation = new TextField();
		txtDesignation.setImmediate(false);
		txtDesignation.setWidth("318px");
		txtDesignation.setHeight("-1px");
		mainLayout.addComponent(txtDesignation,"top:248.0px; left:180.0px;");

		// lblmobile
		lblmobile = new Label();
		lblmobile.setImmediate(false);
		lblmobile.setWidth("-1px");
		lblmobile.setHeight("-1px");
		lblmobile.setValue("Mobile :");
		mainLayout.addComponent(lblmobile, "top:275.0px; left:50.0px;");

		// txtPersonMobile
		txtPersonMobile = new TextField();
		txtPersonMobile.setImmediate(false);
		txtPersonMobile.setWidth("158px");
		txtPersonMobile.setHeight("-1px");
		mainLayout.addComponent(txtPersonMobile,"top:273.0px; left:180.0px;");

		// lblIsActive
		lblIsActive = new Label("Status :");
		lblIsActive.setImmediate(false);
		lblIsActive.setWidth("-1px");
		lblIsActive.setHeight("-1px");
		mainLayout.addComponent(lblIsActive, "top:300.0px; left:50.0px;");

		// txtPersonMobile
		cmbIsActive = new NativeSelect();
		cmbIsActive.setNullSelectionAllowed(false);
		cmbIsActive.setImmediate(true);
		cmbIsActive.setWidth("80px");
		cmbIsActive.setHeight("-1px");
		for (int i = 0; i < cities.length; i++) {
			cmbIsActive.addItem(cities[i]);
		}
		cmbIsActive.setValue(cities[0]);
		mainLayout.addComponent(cmbIsActive,"top:298.0px; left:181.0px;");

		// lblTinNo
		lblTinNo = new Label("TIN No. :");
		lblTinNo.setImmediate(false);
		lblTinNo.setWidth("-1px");
		lblTinNo.setHeight("-1px");
		mainLayout.addComponent(lblTinNo, "top:325.0px; left :50.0px;");

		// txtTinNo
		txtTinNo = new TextField();
		txtTinNo.setImmediate(true);
		txtTinNo.setWidth("158px");
		txtTinNo.setHeight("-1px");
		mainLayout.addComponent(txtTinNo, "top:323.0px; left:180.0px;");
		//////////////
		// Upload Tin
		/*lblCommon = new Label("Upload :");
		mainLayout.addComponent(lblCommon, "top:455.0px; left:50.0px;");*/

		mainLayout.addComponent(bpvUploadTin, "top:315.0px;left:350.0px;");
		// btnPreview Tin
		btnPreviewTin = new Button("Preview");
		btnPreviewTin.setStyleName(BaseTheme.BUTTON_LINK);
		btnPreviewTin.addStyleName("icon-after-caption");
		btnPreviewTin.setImmediate(true);
		btnPreviewTin.setIcon(new ThemeResource("../icons/document-pdf.png"));
		mainLayout.addComponent(btnPreviewTin, "top:325.0px;left:425.0px;");
		btnPreviewTin.setEnabled(false);

		// lblVatNo
		lblVatNo = new Label("VAT/BIN No. :");
		lblVatNo.setImmediate(false);
		lblVatNo.setWidth("-1px");
		lblVatNo.setHeight("-1px");
		mainLayout.addComponent(lblVatNo, "top:350.0px; left :50.0px;");

		// txtVatNo
		txtVatNo = new TextField();
		txtVatNo.setImmediate(true);
		txtVatNo.setWidth("158px");
		txtVatNo.setHeight("-1px");
		mainLayout.addComponent(txtVatNo, "top:348.0px; left:180.0px;");

		mainLayout.addComponent(bpvUploadVat, "top:341.0px;left:350.0px;");
		// btnPreview Tin
		btnPreviewVat = new Button("Preview");
		btnPreviewVat.setStyleName(BaseTheme.BUTTON_LINK);
		btnPreviewVat.addStyleName("icon-after-caption");
		btnPreviewVat.setImmediate(true);
		btnPreviewVat.setIcon(new ThemeResource("../icons/document-pdf.png"));
		mainLayout.addComponent(btnPreviewVat, "top:352.0px;left:425.0px;");
		btnPreviewVat.setEnabled(false);
		//lblDivision
		lblDivision = new Label();
		lblDivision.setImmediate(false);
		lblDivision.setWidth("-1px");
		lblDivision.setHeight("-1px");
		lblDivision.setValue("Division");
		mainLayout.addComponent(lblDivision, "top:375.0px; left:50.0px;");

		//cmbDivision
		cmbDivision = new ComboBox();
		cmbDivision.setImmediate(true);
		cmbDivision.setWidth("220px");
		cmbDivision.setHeight("-1px");
		mainLayout.addComponent(cmbDivision, "top:373.0px; left:180.0px;");

		// nbDivision
		nbDivision = new NativeButton();
		nbDivision.setIcon(new ThemeResource("../icons/add.png"));
		nbDivision.setImmediate(true);
		nbDivision.setWidth("30px");
		nbDivision.setHeight("25px");
		mainLayout.addComponent(nbDivision, "top:373.0px; left:405.0px;");

		//lblDivision
		lblArea = new Label();
		lblArea.setImmediate(false);
		//lblArea.setVisible(false);
		lblArea.setWidth("-1px");
		lblArea.setHeight("-1px");
		lblArea.setValue("Zone");
		mainLayout.addComponent(lblArea, "top:400.0px; left:50.0px;");

		//cmbDivision
		cmbArea = new ComboBox();
		cmbArea.setImmediate(true);
		cmbArea.setWidth("220px");
		cmbArea.setHeight("-1px");
		mainLayout.addComponent(cmbArea, "top:398.0px; left:180.0px;");

		// nbArea
		nbArea = new NativeButton();
		nbArea.setIcon(new ThemeResource("../icons/add.png"));
		nbArea.setImmediate(true);
		nbArea.setWidth("30px");
		nbArea.setHeight("25px");
		mainLayout.addComponent(nbArea, "top:398.0px; left:405.0px;");

		// lblopeningbalance
		lblOpeningBalance = new Label();
		lblOpeningBalance.setImmediate(false);
		lblOpeningBalance.setWidth("-1px");
		lblOpeningBalance.setHeight("-1px");
		lblOpeningBalance.setValue("Opening Balance :");
		mainLayout.addComponent(lblOpeningBalance, "top:425.0px; left:50.0px;");

		// txtDrAmount
		txtDrAmount = new AmountCommaSeperator();
		txtDrAmount.setInputPrompt("Dr. Amount");
		txtDrAmount.setImmediate(true);
		txtDrAmount.setWidth("120px");
		txtDrAmount.setHeight("-1px");
		mainLayout.addComponent(txtDrAmount,"top:423.0px; left:180.0px;");

		// txtCrAmount
		txtCrAmount = new AmountCommaSeperator();
		txtCrAmount.setInputPrompt("Cr. Amount");
		txtCrAmount.setImmediate(true);
		txtCrAmount.setWidth("120px");
		txtCrAmount.setHeight("-1px");
		mainLayout.addComponent(txtCrAmount,"top:423.0px; left:300.0px;");

		////////////////////
		// bpvUpload
		lblCommon = new Label("Trade License :");
		mainLayout.addComponent(lblCommon, "top:455.0px; left:50.0px;");
		mainLayout.addComponent(bpvUpload, "top:453.0px;left:180.0px;");
		// btnPreview
		btnPreview = new Button("Preview");
		btnPreview.setStyleName(BaseTheme.BUTTON_LINK);
		btnPreview.addStyleName("icon-after-caption");
		btnPreview.setImmediate(true);
		btnPreview.setIcon(new ThemeResource("../icons/document-pdf.png"));
		mainLayout.addComponent(btnPreview, "top:465.0px;left:250.0px;");
		btnPreview.setEnabled(false);
		/*	NativeButton btnIcon=new NativeButton();
		btnIcon.setIcon(new ThemeResource("../icons/AttachBlk-44.png"));
		btnIcon.setStyleName(Button.STYLE_LINK);
		mainLayout.addComponent(btnIcon, "top:478.0px;left:175.0px;");*/
		return mainLayout;
	}
	private void buttonLayoutAdd()
	{
		btnLayout.addComponent(cButton);
		mainLayout.addComponent(btnLayout,"bottom:20px;left:18px;");
	}
}
