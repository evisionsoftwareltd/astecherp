package acc.appform.setupTransaction;

import java.net.InetAddress;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import com.common.share.CommonButton;
import com.common.share.SessionBean;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.gwt.server.WebApplicationContext;
import com.vaadin.terminal.gwt.server.WebBrowser;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.Window;

import org.hibernate.Session;
import org.hibernate.Transaction;
import com.common.share.FocusMoveByEnter;
import com.common.share.MessageBox;
import com.common.share.SessionFactoryUtil;
import com.common.share.MessageBox.ButtonType;
import com.common.share.MessageBox.EventListener;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Component;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Window.CloseEvent;
import com.vaadin.ui.Window.Notification;

public class DeptInformation extends Window 
{
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private TextArea txtAddress;
	@AutoGenerated
	private Label lblAddress;
	@AutoGenerated
	private TextField txtDeptName;
	@AutoGenerated
	private Label lblDeptName;
	private Label lblline;

	CommonButton cButton = new CommonButton("New", "Save", "Edit", "", "Refresh", "Find", "", "","","Exit");
	String px="250px";
	boolean isUpdate=false;
	String updateSID;
	private TextField txtSectionID = new TextField();

	SessionBean sessionBean;
	ArrayList<Component> allComp = new ArrayList<Component>();

	public DeptInformation(SessionBean sessionBean) 
	{
		this.sessionBean=sessionBean;
		buildMainLayout();
		setContent(mainLayout);
		this.setResizable(false);
		this.setCaption("SECTION / DEPARTMENT INFORMATION ::" +" "+sessionBean.getCompany() );

		txtInit(true);
		btnIni(true);
		btnAction();
		focusEnter();
		
		authenticationCheck();
	}

	private void authenticationCheck()
	{
		if(!sessionBean.isSubmitable()){
			cButton.btnSave.setVisible(false);
		}
		
		if(!sessionBean.isUpdateable()){
			cButton.btnEdit.setVisible(false);
		}
		
		if(!sessionBean.isDeleteable()){
			cButton.btnDelete.setVisible(false);
		}
	}
	
	private void focusEnter()
	{
		allComp.add(txtDeptName);
		allComp.add(txtAddress);

		allComp.add(cButton.btnNew);
		allComp.add(cButton.btnEdit);
		allComp.add(cButton.btnSave);
		allComp.add(cButton.btnRefresh);
		allComp.add(cButton.btnDelete);
		allComp.add(cButton.btnFind);

		new FocusMoveByEnter(this,allComp);
	}

	public void btnAction()
	{
		cButton.btnNew.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				txtDeptName.focus();
				newButtonEvent();
				txtClear();
			}
		});

		cButton.btnSave.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				if(!txtDeptName.getValue().toString().isEmpty()){
					if(sessionBean.isSubmitable()){
						saveBtnAction();
					}else{
						showNotification("Warning,","You have not Proper Authentication to Save.", Notification.TYPE_WARNING_MESSAGE);
					}
				}else{
					showNotification("Provide Section Name",Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});


		cButton.btnEdit.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				if(!txtDeptName.getValue().toString().isEmpty())
				{
					updateButtonEvent();
				}
				else
				{
					getParent().showNotification("Warning!,","There are nothing to update", Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

		cButton.btnExit.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				close();
			}
		});

		cButton.btnRefresh.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				refreshButtonEvent();
				txtClear();
			}
		});

		cButton.btnFind.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				findButtonEvent();
			}
		});
	}

	private void findButtonEvent() 
	{
		Window win = new DeptFindWindow(sessionBean, txtSectionID,"SectionId");
		win.addListener(new Window.CloseListener() 
		{
			public void windowClose(CloseEvent e) 
			{
				if (txtSectionID.getValue().toString().length() > 0)
				{
					txtClear();
					findInitialise(txtSectionID.getValue().toString());
				}
			}
		});

		this.getParent().addWindow(win);
	}

	private void findInitialise(String txtSectonId) 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			updateSID  = txtSectonId;

			List led = session.createSQLQuery("Select AutoId,SectionName,Address from tbSectionInfo Where AutoId = '"+txtSectonId+"'").list();

			if (led.iterator().hasNext()) 
			{
				Object[] element = (Object[]) led.iterator().next();

				txtDeptName.setValue(element[1]);
				txtAddress.setValue(element[2]);
			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	private void updateButtonEvent()
	{
		if(!txtDeptName.getValue().toString().isEmpty())
		{
			isUpdate = true;
			txtAddress.setEnabled(true);
			btnIni(false);
			txtInit(false);
		}
		else{
			this.getParent().showNotification("Update Failed","There are no data for update.",Notification.TYPE_WARNING_MESSAGE);
		}
	}

	private void saveBtnAction()
	{
		if(isUpdate)
		{
			MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to update information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
			mb.show(new EventListener()
			{
				public void buttonClicked(ButtonType buttonType)
				{
					if(buttonType == ButtonType.YES)
					{
						updateData();
						isUpdate = false;
						txtInit(false);
						btnIni(true);
						txtClear();
						cButton.btnNew.focus();
					}
				}
			});
		}
		else
		{
			MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to save all information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
			mb.show(new EventListener()
			{
				public void buttonClicked(ButtonType buttonType)
				{
					if(buttonType == ButtonType.YES)
					{
						insertData();
						isUpdate = false;		
						txtInit(false);
						btnIni(true);
						txtClear();
						cButton.btnNew.focus();
					}
				}
			});
		}

	}
	public void updateData() 
	{
		Transaction tx = null;
		try
		{			
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			session.createSQLQuery("Update tbSectionInfo set SectionName= '"+txtDeptName.getValue().toString().trim()+"', " +
					"Address='"+txtAddress.getValue().toString().trim()+"',userName = '"+sessionBean.getUserName()+"'," +
					"userIp = '"+sessionBean.getUserIp()+"', entryDate = CURRENT_TIMESTAMP where AutoID = '"+updateSID+"'").executeUpdate();
			
			System.out.println("User IP : "+sessionBean.getUserIp());
			
			tx.commit();
			this.getParent().showNotification("Desire information update successfully.");

			isUpdate=false;
		}
		catch(Exception exp){
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	private void insertData()
	{
		Transaction tx = null;
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			//Insert Into tbSectionInfo(SectionName,Address,userName,userIp,entryDate) values('sd','df','df','d',CURRENT_TIMESTAMP)
			session.createSQLQuery("Insert Into tbSectionInfo(SectionName,Address,userName,userIp,entryDate) values('"+txtDeptName.getValue().toString().trim()+"'," +
					"'"+txtAddress.getValue().toString().trim()+"','"+sessionBean.getUserName()+"','"+sessionBean.getUserIp()+"',CURRENT_TIMESTAMP)").executeUpdate();
			tx.commit();
			this.getParent().showNotification("All information save successfully.");
			btnIni(true);
		}
		catch(Exception exp){
			this.getParent().showNotification("Errora",exp+"",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	private void refreshButtonEvent() 
	{
		txtInit(true);
		btnIni(true);
	}

	private void newButtonEvent()
	{
		txtInit(false);
		btnIni(false);
	}

	private void txtClear()
	{
		txtDeptName.setValue("");
		txtAddress.setValue("");
	}

	private void btnIni(boolean t)
	{
		cButton.btnNew.setEnabled(t);
		cButton.btnEdit.setEnabled(t);
		cButton.btnSave.setEnabled(!t);
		cButton.btnRefresh.setEnabled(!t);
		cButton.btnDelete.setEnabled(t);
		cButton.btnFind.setEnabled(t);
	}

	public void txtInit(boolean t)
	{
		txtDeptName.setEnabled(!t);
		txtAddress.setEnabled(!t);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() 
	{
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("535px");
		mainLayout.setHeight("190px");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("560px");
		setHeight("230px");

		// lblStoreLocation
		lblDeptName= new Label();
		lblDeptName.setImmediate(false);
		lblDeptName.setWidth("-1px");
		lblDeptName.setHeight("-1px");
		lblDeptName.setValue("Section/Department Name :");
		mainLayout.addComponent(lblDeptName, "top:27.0px;left:25.0px;");

		// cmbSLocation
		txtDeptName = new TextField();
		txtDeptName.setImmediate(false);
		txtDeptName.setWidth("290px");
		txtDeptName.setHeight("-1px");
		mainLayout.addComponent(txtDeptName, "top:25.0px;left:180.0px;");

		// lblStoreLocationAddress
		lblAddress = new Label();
		lblAddress.setImmediate(false);
		lblAddress.setWidth("-1px");
		lblAddress.setHeight("-1px");
		lblAddress.setValue(" Address :");
		mainLayout.addComponent(lblAddress,"top:62.0px;left:80.0px;");

		// txtAddress
		txtAddress = new TextArea();
		txtAddress.setImmediate(false);
		txtAddress.setWidth("290px");
		txtAddress.setHeight("48px");
		mainLayout.addComponent(txtAddress, "top:60.0px;left:180.0px;");

		lblline = new Label();
		lblline.setImmediate(false);
		lblline.setWidth("-1");
		lblline.setHeight("-1");
		lblline.setValue("________________________________________________________________________");
		mainLayout.addComponent(lblline,"top:105.0px; left:18.0px;");

		mainLayout.addComponent(cButton, "top:135.0px; left:20.0px ");		
		return mainLayout;
	}
}
