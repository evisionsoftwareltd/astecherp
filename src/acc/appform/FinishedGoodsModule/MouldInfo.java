package acc.appform.FinishedGoodsModule;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;


import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperRunManager;

import com.common.share.AmountField;
import com.common.share.CommonButton;
import com.common.share.FocusMoveByEnter;
import com.common.share.ReportDate;
import com.common.share.SessionBean;
import com.common.share.TextRead;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.InlineDateField;
import com.vaadin.ui.Label;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Window;

import java.net.InetAddress;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;

import net.sf.jasperreports.components.barbecue.BarcodeProviders.ShipmentIdentificationNumberProvider;
import net.sf.jasperreports.engine.xml.JRPenFactory.Left;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hsqldb.types.Binary;

import com.common.share.MessageBox;
import com.common.share.SessionFactoryUtil;
import com.common.share.MessageBox.ButtonType;
import com.common.share.MessageBox.EventListener;
import com.example.productionSetup.ProductionFindWindow;
//import com.ibm.icu.text.SimpleDateFormat;
import com.vaadin.terminal.gwt.server.WebApplicationContext;
import com.vaadin.terminal.gwt.server.WebBrowser;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Window.Notification;




public class MouldInfo extends Window 
{
	SessionBean sessionBean;
	private AbsoluteLayout mainLayout;

	private TextRead txtmouldId;
	private Label lblmouldId;

	private TextField txtmouldName;
	private Label lblmouldName;

	private Label lblproductionType;
	private ComboBox cmbproductionType;

	private Label lblproductionStep ;
	private ComboBox cmbproductionstep;

	/*	private Label lblsemifgName;
	private ComboBox cmbsemifgName;*/

	private Label lblownership;
	private CheckBox chkown= new CheckBox();
	private CheckBox chkparty= new CheckBox();

	/*private Label lblstdWeight;
	private TextField txtstdweight;*/

	private Label lblsuppliername=new Label();
	private TextField txtSupplier=new TextField();

	private Label lblAddress=new Label();
	private TextField txtAddress=new TextField();

	private Label lblCost;
	private AmountField txtCost;

	private Label lbllifeTime;
	private TextField txtlifeTime;

	private Label lblCycleTime;
	private AmountField txtcycletime;

	private Label  lblcavityNo;
	private AmountField txtcavityNo;

	private Label  lbltargetperhour;
	private AmountField txttergetperhour;

	private Label  lblDate;
	private PopupDateField dDate;


	boolean isUpdate=false;
	boolean isFind =false;


	private Label lblsemiproductQtyPcs;
	private AmountField txtSemiproductQtyPcs;

	private Label lblsemirate;
	private  AmountField  txtsemirate;
	private Label lblRawRate;
	private AmountField txtrawRate;



	private java.text.SimpleDateFormat df= new java.text.SimpleDateFormat("yyyy-MM-dd");
	private SimpleDateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
	private DecimalFormat dformat=new DecimalFormat("#0.00");
	private DecimalFormat decformat=new DecimalFormat("#0");

	private Label lblInitialLine  =new Label("_________________________________________________________________________________");
	private Label lblFinalline  =new Label("___________________________________________________________________________________________");

	private Label lblline;
	CommonButton button = new CommonButton("New", "Save", "Edit", "Delete", "Refresh", "Find", "", "", "","Exit");
	String Autoid="";

	private TextField txtstepid=new TextField();
	private TextField txttypeid=new TextField();
	private TextField txtrawid=new TextField();
	private TextField txtfinishid=new TextField();
	private TextField txtyear=new TextField();
	private TextField txtfgId=new TextField();

	ArrayList<Component> allComp = new ArrayList<Component>();
	OptionGroup ownertype;
	private static final List<String>areatype  = Arrays.asList(new String[] {"Own" ,"Party" });

	Panel panelSearch=new Panel();
	Label lblpanenSearch=new Label();

	//private ComboBox cmbFindsemifg= new ComboBox();
	private ComboBox cmbFindMould= new ComboBox();
	private ComboBox cmbFindDate= new ComboBox();

	OptionGroup optGroup;
	private static final List<String>optStatus  = Arrays.asList(new String[] {"Active" ,"Inactive" });
	private FileWriter log;
	public MouldInfo(SessionBean sessionBean) 
	{
		this.sessionBean=sessionBean;
		setContent(buildMainLayout());
		this.setResizable(false);
		this.setCaption("MOULD INFORMATION:: " + sessionBean.getCompany());
		btnIni(true);
		componentIni(true);
		setEventAction();
		productionTypeLoad();
		//supplierdataload();
		button.btnNew.focus();

	}

	private void focusEnter()
	{
		allComp.add(txtmouldName);
		allComp.add(cmbproductionType);
		allComp.add(cmbproductionstep);
		//allComp.add(cmbsemifgName);
		allComp.add(ownertype);
		//allComp.add(txtstdweight);
		allComp.add(txtSupplier);
		allComp.add(txtAddress);
		allComp.add(txtCost);
		allComp.add(txtlifeTime);
		allComp.add(txtcycletime);
		allComp.add(txtcavityNo);
		allComp.add(txttergetperhour);
		allComp.add(dDate);

		allComp.add(button.btnNew);
		allComp.add(button.btnSave);
		allComp.add(button.btnEdit);
		allComp.add(button.btnRefresh);
		allComp.add(button.btnFind);
		allComp.add(button.btnExit);

		new FocusMoveByEnter(this,allComp);
	}

	private Iterator dbService(String sql)
	{
		Transaction tx=null;
		Session session=null;
		try{
			session=SessionFactoryUtil.getInstance().openSession();
			tx=session.beginTransaction();
			return session.createSQLQuery(sql).list().iterator();
		}
		catch(Exception exp)
		{
			tx.rollback();
			showNotification(""+exp,Notification.TYPE_ERROR_MESSAGE);
		}
		finally{
			if(tx!=null||session!=null)
			{
				tx.commit();
				session.close();
			}
		}
		return null;
	}

	private void productionTypeLoad()
	{
		Iterator iter=dbService("select productTypeId,productTypeName from tbProductionType");
		while(iter.hasNext()){
			Object element[]=(Object[]) iter.next();
			cmbproductionType.addItem(element[0]);
			cmbproductionType.setItemCaption(element[0], element[1].toString());
		}
	}


	/*private void cmbFindSemifgLoad()
	{
		Iterator iter=dbService("select distinct semiFgCode,semiFgName from tbSemiFgInfo where semiFgCode in (select semiFgCode from tbmouldInfo)");
		while(iter.hasNext()){
			Object element[]=(Object[]) iter.next();
			cmbFindsemifg.addItem(element[0]);
			cmbFindsemifg.setItemCaption(element[0], element[1].toString());
		}
	}*/

	private void FindDateLoad()
	{
		cmbFindDate.removeAllItems();
		String sql="select distinct 0,CONVERT(varchar(20),declareationDate,103)date from tbmouldInfo where mouldid like '"+cmbFindMould.getValue().toString()+"' ";
		Iterator iter=dbService(sql);
		while(iter.hasNext()){
			Object element[]=(Object[]) iter.next();
			cmbFindDate.addItem(element[1]);
			System.out.println(element[1]);
			//cmbFindDate.setItemCaption(element[0], element[1].toString());
		}
	}

	/*private void supplierdataload()
	{
		Iterator iter=dbService("select supplierId,supplierName from tbSupplierInfo order by subGroupName");
		while(iter.hasNext()){
			Object element[]=(Object[]) iter.next();
			txtSupplier.addItem(element[0].toString());
			txtSupplier.setItemCaption(element[0].toString(), element[1].toString());
		}
	}*/


	private void Dataload()

	{
		String sql= "select mouldid,mouldName,productionType,productionstep,semifgCode,ownership,stdweight,supplierId,address,cost,lifetime,cycletime,cavityNo,terget,declareationDate,status from tbmouldInfo "
				+"where declareationDate =(select MAX(declareationDate) from tbmouldInfo where mouldid like '"+cmbFindMould.getValue().toString()+"'  and CONVERT(varchar(20),declareationDate,103) like '"+cmbFindDate.getValue()+"' ) and  "
				+" mouldid like '"+cmbFindMould.getValue()+"' ";
		Iterator iter=dbService(sql);
		if(iter.hasNext())
		{
			Object element[]=(Object[]) iter.next();
			txtmouldId.setValue(element[0].toString().replaceAll("`", "'"));
			txtmouldName.setValue(element[1].toString().replaceAll("`", "'"));
			cmbproductionType.setValue(element[2].toString());
			cmbproductionstep.setValue(element[3].toString());
			//cmbsemifgName.setValue(element[4].toString());
			ownertype.select(element[5].toString());
			//txtstdweight.setValue(element[6].toString());
			txtCost.setValue(dformat.format(Double.parseDouble(element[9].toString())));
			txtlifeTime.setValue(element[10].toString());
			txtcycletime.setValue(dformat.format( Double.parseDouble(element[11].toString())) );
			txtcavityNo.setValue(dformat.format(Double.parseDouble(element[12].toString()))  );
			txttergetperhour.setValue(( dformat.format(Double.parseDouble(element[13].toString())) ));
			dDate.setValue(element[14]);
			txtSupplier.setValue(element[7].toString().replaceAll("`", "'"));
			txtAddress.setValue(element[8].toString().replaceAll("`", "'"));
			optGroup.setValue(element[15]);
		}
	}
	public void setEventAction()
	{
		button.btnNew.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				newButtonEvent();
				txtmouldName.focus();
				focusEnter();

			}
		});

		button.btnEdit.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				if(sessionBean.isUpdateable())
				{
					updateButtonEvent();

				}else{
					getParent().showNotification("You are not Permitted to Update",Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

		button.btnSave.addListener(new Button.ClickListener()
		{
			public void buttonClick(ClickEvent event) {
				if(sessionBean.isSubmitable())
				{
					saveButtonEvent();
				}else
				{
					getParent().showNotification("You are not Permitted to Save",Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});


		button.btnFind.addListener(new ClickListener() 
		{

			public void buttonClick(ClickEvent event) 
			{
				findButtonEvent();
				findMouldDataLoad();

			}

		});

		button.btnRefresh.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				refreshButtonEvent();
			}
		});

		button.btnExit.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				close();
			}
		});

		cmbproductionType.addListener(new ValueChangeListener() {


			public void valueChange(ValueChangeEvent event) 
			{

				if(cmbproductionType.getValue()!=null)
				{
					stepdataload();
					//semifgLoad();

				}

			}
		});

		cmbproductionstep.addListener(new ValueChangeListener() 
		{

			public void valueChange(ValueChangeEvent event) 
			{
				dataclear(); 
				if(cmbproductionstep.getValue()!=null)
				{

				}

			}
		});

		/*txtSupplier.addListener(new ValueChangeListener() 
		{

			public void valueChange(ValueChangeEvent event) 
			{

				if(txtSupplier.getValue()!=null)
				{
					Addressload();	
				}

			}
		});*/

		/*cmbFindsemifg.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				if(cmbFindsemifg.getValue()!=null)
				{
					findMouldDataLoad();
				}
			}
		});*/

		cmbFindMould.addListener(new ValueChangeListener() 
		{

			public void valueChange(ValueChangeEvent event) {
				if(cmbFindMould.getValue()!=null)
				{

					FindDateLoad();
				}
				else
				{

				}
			}
		});

		cmbFindDate.addListener(new ValueChangeListener() 
		{

			public void valueChange(ValueChangeEvent event) 
			{
				if(cmbFindDate.getValue()!=null)
				{
					txtClear();
					Dataload();
				}
				else
				{
					txtClear();
				}
			}
		});
		button.btnDelete.addListener(new ClickListener() {

			public void buttonClick(ClickEvent event) {
				deleteButtonEvent();
			}
		});

		txtcycletime.addListener(new ValueChangeListener() {
			
			public void valueChange(ValueChangeEvent event) {
				getTarget();
			}
		});
		txtcavityNo.addListener(new ValueChangeListener() {
			
			public void valueChange(ValueChangeEvent event) {
				getTarget();
			}
		});
	}
	private void getTarget(){
		double cycleTime=0.0,cavity=0.0,target;
		cycleTime=Double.parseDouble(txtcycletime.getValue().toString().isEmpty()?"0.0":txtcycletime.getValue().toString());
		cavity=Double.parseDouble(txtcavityNo.getValue().toString().isEmpty()?"0.0":txtcavityNo.getValue().toString());
		target=((3600/cycleTime)*cavity)*24;
		txttergetperhour.setValue(decformat.format(target));
	}
	private boolean checkReference(){
		String sql="select mouldName from tbFinishedGoodsStandardInfo where mouldName='"+txtmouldId.getValue()+"' "+
				" union select mouldId from tbProductionSemiFgDetails where mouldId='"+txtmouldId.getValue()+"' "+
				" union select mouldId from tbMixtureIssueEntryDetails where mouldId='"+txtmouldId.getValue()+"' "+
				" union select mouldNo from tbMouldProductionDetails where mouldNo='"+txtmouldId.getValue()+"'";
		Iterator<?> iter=dbService(sql);
		if(iter.hasNext()){
			return false;

		}
		return true;
	}
	private void deleteButtonEvent(){
		if(!txtmouldId.getValue().toString().isEmpty()){
			if(checkReference()){

				MessageBox mb = new MessageBox(getParent(), "", MessageBox.Icon.QUESTION, "Do you want to Delete ?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
				mb.show(new EventListener()
				{
					public void buttonClicked(ButtonType buttonType)
					{
						if(buttonType == ButtonType.YES)
						{
							Transaction tx=null;
							Session session = SessionFactoryUtil.getInstance().getCurrentSession();
							tx = session.beginTransaction();
							if(deleteData(session,tx)){
								btnIni(true);
								componentIni(true);
								txtClear();
								button.btnNew.focus();
								showNotification("Delete Data Successfully",Notification.TYPE_HUMANIZED_MESSAGE);
							}
						}
					}
				});	
			}
			else{
				showNotification("Referenced Data Can't be delete",Notification.TYPE_WARNING_MESSAGE);
			}
		}
		else{
			showNotification("There is no Data",Notification.TYPE_WARNING_MESSAGE);
		}
	}
	private void findButtonEvent()
	{
		componentIni(true);
		panelSearch.setEnabled(true);
		isFind=true;
	}



	private void  dataclear()
	{

	}

	private void stepdataload() 
	{

		try 
		{
			cmbproductionstep.removeAllItems();
			String porductionType=cmbproductionType.getValue().toString();
			Iterator iter=dbService("select StepId,StepName from tbProductionStep where productionTypeId like '"+porductionType+"'");
			while(iter.hasNext()){
				Object element[]=(Object[]) iter.next();
				cmbproductionstep.addItem(element[0]);
				cmbproductionstep.setItemCaption(element[0], element[1].toString());
			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);

		}
	}

	/*private void semifgLoad() 
	{

		try 
		{
			cmbsemifgName.removeAllItems();
			String porductionType=cmbproductionType.getValue().toString();
			Iterator iter=dbService("select  semiFgCode,semiFgName from tbsemifgInfo where productionTypeId like '"+porductionType+"' ");
			while(iter.hasNext()){
				Object element[]=(Object[]) iter.next();
				cmbsemifgName.addItem(element[0]);
				cmbsemifgName.setItemCaption(element[0], element[1].toString());
			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);

		}
	}*/

	private String  autocode() 
	{

		try 
		{
			String sql= "select 0, 'MOULD-'+  CAST(ISNULL(MAX(CAST(SUBSTRING(mouldid,CHARINDEX('-',mouldid)+1,LEN(mouldid)) as int) ),0)+1 as varchar(120)) "
					+" as MouldNo  from tbmouldInfo ";

			Iterator iter=dbService(sql);
			while(iter.hasNext())
			{
				Object element[]=(Object[]) iter.next();

				return (String) element[1];		
			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);

		}
		return null;
	}


	/*private void Addressload() 
	{
		try 
		{
			txtAddress.setValue("");
			String supplierId=txtSupplier.getValue().toString();
			Iterator iter=dbService(" select 0, address from tbSupplierInfo where supplierId like '"+supplierId+"' ");
			while(iter.hasNext())
			{
				Object element[]=(Object[]) iter.next();
				txtAddress.setValue(element[1]);

			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);

		}
	}*/


	private void findMouldDataLoad() 
	{
		try 
		{
			cmbFindMould.removeAllItems();
			Iterator iter=dbService(" select mouldid,mouldName from tbmouldInfo");
			while(iter.hasNext())
			{
				Object element[]=(Object[]) iter.next();
				cmbFindMould.addItem(element[0].toString());
				cmbFindMould.setItemCaption(element[0].toString(), element[1].toString());

			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);

		}
	}







	private void dataload( String step,String ProductionType) 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}


	private void refreshButtonEvent()
	{
		isUpdate=false;
		componentIni(true);
		btnIni(true);
		txtClear();
		findclear();
	}


	private void saveButtonEvent() 
	{
		if(!txtmouldName.getValue().toString().isEmpty())
		{
			if( cmbproductionType.getValue()!=null)
			{
				if(cmbproductionstep.getValue()!=null )
				{

					if(!txtcycletime.getValue().toString().isEmpty())
					{
						if(!txtcavityNo.getValue().toString().isEmpty())
						{
							if(!txttergetperhour.getValue().toString().isEmpty())
							{
								if(isUpdate)
								{
									MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to update product information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
									mb.show(new EventListener()
									{
										public void buttonClicked(ButtonType buttonType)
										{
											if(buttonType == ButtonType.YES)
											{
												Transaction tx=null;
												Session session = SessionFactoryUtil.getInstance().getCurrentSession();
												tx = session.beginTransaction();
												if(deleteData(session,tx))
												{
													insertData();
													//emailSend() ;
												}

												else
												{
													tx.rollback();
												}

												//updateData();
												button.btnNew.focus();
												isUpdate=false;
												componentIni(true);
												txtClear();
												findclear();
												btnIni(true);
											}
										}
									});		
								}
								else
								{
									MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to Save information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
									mb.show(new EventListener()
									{
										public void buttonClicked(ButtonType buttonType)
										{
											if(buttonType == ButtonType.YES)
											{
												insertData();
												btnIni(true);
												componentIni(true);
												txtClear();
												findclear();
												button.btnNew.focus();
											}
										}
									});		
								}	
							}

							else
							{
								this.getParent().showNotification("Warning :", "Please Provide Terget Per Hour", Notification.TYPE_WARNING_MESSAGE);	
							}


						}
						else
						{
							this.getParent().showNotification("Warning :", "Please Provide Cavity No", Notification.TYPE_WARNING_MESSAGE);	
						}			
					}
					else
					{
						this.getParent().showNotification("Warning :", "Please Provide Cycle Time", Notification.TYPE_WARNING_MESSAGE);	
					}	



				}

				else
				{
					this.getParent().showNotification("Warning :", "Please Select Production Step", Notification.TYPE_WARNING_MESSAGE);
				}
			}

			else
			{
				this.getParent().showNotification("Warning :", "Please Select Production Type", Notification.TYPE_WARNING_MESSAGE);

			}
		}

		else{
			this.getParent().showNotification("Warning :", "Please Provide Mould Name", Notification.TYPE_WARNING_MESSAGE);

		}
	}
	
	
	private void emailSend() 
	{

		//public static String emailPath = "D:/Tomcat 7.0/webapps/report/astecherp/Email/";
		
		ReportDate reportTime = new ReportDate();
		
		System.out.printf("1");
		//HashMap hm = new HashMap();
		try
		{
			System.out.printf("2");
			File f = new File(sessionBean.emailPathmould);
			f.mkdirs();
			System.out.printf("3");
			System.out.printf("f"+f);
			String MasterId="";
			log = new FileWriter("D:/Tomcat 7.0/webapps/report/astecherp/Mould/log.txt");
			System.out.printf("log"+log);
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			Transaction tx = session.beginTransaction();
			
			
			String host = "smtp.gmail.com";
			String from = "";
			String pass = "";
			
			
			from="evisionsoftwareltd@gmail.com";
			pass="786@esl10";
			

			String EmailTo="support@eslctg.com";
			String EmailSubject="Mould Information Edit";
			String EmailTxt="Mould Name "+txtmouldName.getValue().toString()+" has been Edited \n"+
			"by User Name: "+sessionBean.getUserName()+", \nUser IP: "+sessionBean.getUserIp()+" \n and Date Time: "+reportTime.getTime+" , " +
			"and please check here with attached PDF report";
			
			System.out.printf("\nHost"+from);
			System.out.printf("\nPass"+pass);

			Properties props = System.getProperties();
			props.put("mail.smtp.starttls.enable", "true"); // added this line
			props.put("mail.smtp.host", host);
			props.put("mail.smtp.user", from);
			props.put("mail.smtp.password", pass);
			props.put("mail.smtp.port", "587");
			props.put("mail.smtp.auth", "true");

			javax.mail.Session esession = javax.mail.Session.getDefaultInstance(props, null);
			MasterId=txtmouldId.getValue().toString();
			
			System.out.printf("4");
			System.out.printf("\n4.1"+MasterId);
			reportGenerate(MasterId,sessionBean.emailPathmould+"Email/"+MasterId+"_"+"_"+EmailSubject+".pdf");
			
			
			
			MimeMessage message = new MimeMessage(esession);
			
			
			message.setFrom(new InternetAddress(from));
			message.addRecipient(Message.RecipientType.TO, new InternetAddress("ahmedtalba@astechbd.com"));
			message.addRecipient(Message.RecipientType.TO, new InternetAddress("sanjoy@astechbd.com"));
			//message.addRecipient(Message.RecipientType.TO, new InternetAddress("support@eslctg.com"));
			message.addRecipient(Message.RecipientType.TO, new InternetAddress("rabiulbgcctg2016@gmail.com"));
			//message.addRecipient(Message.RecipientType.CC, new InternetAddress("nazimesl@yahoo.com"));
			//message.addRecipient(Message.RecipientType.CC, new InternetAddress("emdidar@gmail.com"));
			
			
			
			//message.addRecipient(Message.RecipientType.CC, new InternetAddress("akidahmed@astechbd.com"));
			//message.addRecipient(Message.RecipientType.CC, new InternetAddress("sharif@astechbd.com"));
			//message.addRecipient(Message.RecipientType.CC, new InternetAddress("ashim@astechbd.com"));
			//message.addRecipient(Message.RecipientType.CC, new InternetAddress("hr.desk@astechbd.com"));
			//message.addRecipient(Message.RecipientType.CC, new InternetAddress("nazimesl@yahoo.com"));
			
			
			
			message.setSubject(EmailSubject);
			message.setText(EmailTxt);
			System.out.printf("7");
			// create the message part 
			MimeBodyPart messageBodyPart = new MimeBodyPart();
			//fill message
			messageBodyPart.setText(EmailTxt);
			Multipart multipart = new MimeMultipart();
			multipart.addBodyPart(messageBodyPart);
			
			// Part two is attachment
			messageBodyPart = new MimeBodyPart();
			
			DataSource source = (DataSource) new FileDataSource(sessionBean.emailPathmould+"Email/"+MasterId+"_"+"_"+EmailSubject+".pdf");
			System.out.println("Hello Banglaedsh3");
			messageBodyPart.setDataHandler( new DataHandler((javax.activation.DataSource) source));
			messageBodyPart.setFileName(MasterId+"_"+"_"+EmailSubject+".pdf");
			multipart.addBodyPart(messageBodyPart);
			System.out.printf("9");
			// Put parts in message
			message.setContent(multipart);
			System.out.printf("10");
			Transport transport = esession.getTransport("smtp");
			System.out.println(sessionBean.emailPathmould+"Email/"+MasterId+"_"+"_"+EmailSubject+".pdf");
			System.out.printf("11");
			System.out.printf("host "+host+" from "+from+" pass "+pass);
			transport.connect(host, from, pass);
			System.out.printf("12");
			transport.sendMessage(message, message.getAllRecipients());
			System.out.printf("13");
			transport.close();
			System.out.printf("14");
			//log.write("Info:"+"E-mail Send for client id: "+MasterId+"\n");
			System.out.printf("15");
			this.getParent().showNotification("E-mail Send Successfully.");	
		}
		catch(Exception exp){
			showNotification("mail send :"+exp,Notification.TYPE_ERROR_MESSAGE);
		}

	}
	
	
	private void reportGenerate(String iclientId, String fpath) throws HibernateException, JRException, IOException 
	{	
		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx = session.beginTransaction();
		String query = "";
		ReportDate reportTime = new ReportDate();

		query=     "select a.status, a.productionType,b.productTypeName,a.productionstep,c.StepName, "
				   +"a.supplierId,isnull(d.supplierName,'')supplierName,isnull(d.address,'')address,stdweight, "
				  +"cost,lifetime,cycletime,cavityNo,terget, mouldid,mouldName,ownership, "
				  +"(select name from tbLogin where userId like a.userId) Username ,a.userIp,a.entryTime,a.vFlag " 
				  +"from tbudMouldInfo  a inner join tbProductionType b on a.productionType=b.productTypeId " 
				  +"inner join tbProductionStep c on c.StepId=a.productionstep left join tbSupplierInfo d "
				  +"on d.supplierName=a.supplierId  where productionType like '%' and productionstep "
				  +"like '%' and a.supplierId like '%' and mouldid like '"+txtmouldId.getValue().toString()+"' and a.status ='Active' "
				  +"order by a.autoId desc ";

				   
		
		if(queryValueCheck(query))
		{
			HashMap <String,Object> hm = new HashMap <String,Object> ();
			hm.put("company", sessionBean.getCompany());
			hm.put("address", sessionBean.getCompanyAddress());
			hm.put("phone", sessionBean.getCompanyContact());
			//hm.put("phone", "Phone : "+sessionBean.get+" Fax : "+sessionBean.getCompanyFax()+" E-Mail : "+sessionBean.getCompanyEmail());
			//System.out.println(sessionBean.getCompanyPhone());
			hm.put("UserName", sessionBean.getUserName()+"  "+sessionBean.getUserIp());
			hm.put("URL",getApplication().getURL().toString().replace("uptd/", ""));
			hm.put("logo", sessionBean.getCompanyLogo());
			hm.put("parentType", "Mould Information");
			hm.put("Phone", sessionBean.getCompanyContact());
			hm.put("sql", query);
			System.out.println("Done!!");
			FileOutputStream of = new FileOutputStream(fpath);
				
            try
            {
            	JasperRunManager.runReportToPdfStream(getClass().getClassLoader().getResourceAsStream("report/production/rptUdMouldInformation.jasper"), of, hm,session.connection());
    			System.out.println("Done!!");	
            }
            
            catch(Exception ex)
            {
              System.out.print("Exception is:"+ex)	;
            }
			
			tx.commit();
			of.close();
		}		
	}
	
	
	private boolean queryValueCheck(String sql)
	{
		Session session=SessionFactoryUtil.getInstance().openSession();
		session.beginTransaction();
		try 
		{
			List <?> lst = session.createSQLQuery(sql).list();
			if (!lst.isEmpty()) 
			{
				return true;
			}
		} 
		catch (Exception ex) 
		{
			System.out.print(ex);
		}
		finally{session.close();}
		return false;
	}





	private boolean deleteData(Session session,Transaction tx){
		try{
			String udquery="";
			udquery=
					"insert into tbudMouldInfo(mouldid,mouldname,productionType,productionstep,semifgCode,ownership,stdweight,supplierid,address,cost,lifetime,cycletime,cavityNo,terget,declareationdate,userip,userid,EntryTime,status,vFlag) "
			       + "select mouldid,mouldName,productionType,productionstep,semifgCode,ownership,stdweight,supplierId,address,cost,lifetime,cycletime,cavityNo,terget,declareationDate,userip,userId,EntryTime,status,'Update' as flag from tbmouldInfo  "
			        +"where mouldid='"+txtmouldId.getValue().toString()+"' ";
			session.createSQLQuery(udquery).executeUpdate();
			session.createSQLQuery("delete from tbmouldInfo where mouldid = '"+txtmouldId.getValue().toString()+"'").executeUpdate();
			tx.commit();
			return true;
		}
		catch(Exception exp){
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
			return false;
		} 
	}

	private void insertData()
	{
		Transaction tx = null;
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			System.out.println("Username : "+sessionBean.getUserName());
			System.out.println("User IP : "+sessionBean.getUserIp());

			String mouldId="";
			String mouldname="";
			String productionType="";
			String productionStep="";
			String semifg="";
			String owner="";
			String stdweight="";
			String supplierName="";
			String Address="";
			double cost=0.00;
			String lifetime="";
			String cycletime="";
			String cavityNo="";
			String terget="0.00";


			if(!isUpdate)
			{
				mouldId=autocode();	
			}
			else   
			{
				mouldId=txtmouldId.getValue().toString();	
			}

			mouldname=txtmouldName.getValue().toString().replaceAll("'", "`");
			productionType=cmbproductionType.getValue().toString();
			productionStep=cmbproductionstep.getValue().toString();
			owner=ownertype.getValue().toString();
			//stdweight=txtstdweight.getValue().toString();
			if(txtSupplier.getValue()!=null)
			{
				supplierName=txtSupplier.getValue().toString().replaceAll("'", "`");	
			}

			Address=txtAddress.getValue().toString().replaceAll("'", "`");

			if(!txtCost.getValue().toString().isEmpty())
			{
				cost=Double.parseDouble(txtCost.getValue().toString()); 
			}

			lifetime=txtlifeTime.getValue().toString();
			cycletime=txtcycletime.getValue().toString();
			cavityNo=txtcavityNo.getValue().toString();
			terget=txttergetperhour.getValue().toString();


			String insertQuery ="insert into tbmouldInfo(mouldid,mouldname,productionType,productionstep,semifgCode,ownership,stdweight,supplierid,address,cost,lifetime,cycletime,cavityNo,terget,declareationdate,userip,userid,EntryTime,status) "
					+" values('"+mouldId+"','"+mouldname+"','"+productionType+"','"+productionStep+"', '"+semifg+"', '"+owner+"','"+stdweight+"','"+supplierName+"',  "
					+ " '"+Address+"','"+cost+"','"+lifetime+"','"+cycletime+"','"+cavityNo+"','"+terget+"', '"+dateformat.format(dDate.getValue())+"','"+sessionBean.getUserIp()+"','"+sessionBean.getUserId()+"',getdate(),'"+optGroup.getValue()+"' )";


			session.createSQLQuery(insertQuery).executeUpdate();
			
			String udQuery ="insert into tbudMouldInfo(mouldid,mouldname,productionType,productionstep,semifgCode,ownership,stdweight,supplierid,address,cost,lifetime,cycletime,cavityNo,terget,declareationdate,userip,userid,EntryTime,status,vFlag) "
					+" values('"+mouldId+"','"+mouldname+"','"+productionType+"','"+productionStep+"', '"+semifg+"', '"+owner+"','"+stdweight+"','"+supplierName+"',  "
					+ " '"+Address+"','"+cost+"','"+lifetime+"','"+cycletime+"','"+cavityNo+"','"+terget+"', '"+dateformat.format(dDate.getValue())+"','"+sessionBean.getUserIp()+"','"+sessionBean.getUserId()+"',getdate(),'"+optGroup.getValue()+"','NEW' )";


			session.createSQLQuery(udQuery).executeUpdate();
			
			
			tx.commit();

			this.getParent().showNotification("All Information Save successfully.");
			//btnIni(true);
		}
		catch(Exception exp)
		{
			this.getParent().showNotification("Error ",exp+"",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	public void updateData() 
	{
		Transaction tx = null;
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			WebApplicationContext context = ((WebApplicationContext) getApplication().getContext());
			WebBrowser webBrowser = context.getBrowser();
			sessionBean.setUserIp(webBrowser.getAddress());    

			InetAddress inetAddress =InetAddress.getByName(webBrowser.getAddress().toString());//get the host Inet using ip
			System.out.println ("Host Name: "+ inetAddress.getHostName());//display the host
			tx.commit();
			this.getParent().showNotification("Update successfully.");

		}
		catch(Exception exp)
		{
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}	
	}

	private void updateButtonEvent()
	{
		if(cmbproductionType.getValue()!=null)
		{
			isUpdate = true;
			btnIni(false);
			componentIni(false);

		}
		else
		{
			this.getParent().showNotification("Update Failed","There are no data for update.",Notification.TYPE_WARNING_MESSAGE);
		}
	}

	private void newButtonEvent() 
	{
		componentIni(false);
		btnIni(false);
		txtClear();
		findclear();
		panelSearch.setEnabled(false);
	}

	public void newBtnData(int flag)
	{
		/*if(txtGroup.getValue().toString().isEmpty() || flag==1)
		{
			Transaction tx = null;
			try
			{
				Session session = SessionFactoryUtil.getInstance().getCurrentSession();
				tx = session.beginTransaction();
				String sql = "select isnull(max(cast(SUBSTRING(productTypeId,4,LEN(productTypeId))as int)),0)+1 as cat from tbProductionType";
				Iterator iter = session.createSQLQuery(sql).list().iterator();
				int num = 0;
				if (iter.hasNext()) 
				{
					num = Integer.parseInt(iter.next().toString());
					groupRead.setValue("PT-"+num);
				}
			}
			catch(Exception ex)
			{
				this.getParent().showNotification("Error",ex+"",Notification.TYPE_ERROR_MESSAGE);
			}
		}
		else
		{}*/
	}

	public void txtClear()
	{
		txtmouldId.setValue("");;
		txtmouldName.setValue("");;
		cmbproductionType.setValue(null);
		cmbproductionstep.setValue(null);;
		//cmbsemifgName.setValue(null);;
		ownertype.select("Own");
		//txtstdweight.setValue("");
		txtSupplier.setValue("");
		txtAddress.setValue("");
		txtCost.setValue("");
		txtlifeTime.setValue("");
		txtcycletime.setValue("");
		txtcavityNo.setValue("");
		txttergetperhour.setValue("");
		dDate.setValue(new java.util.Date());
		optGroup.setValue("Active");
	}


	public void findclear()
	{
		//cmbFindsemifg.setValue(null);
		cmbFindMould.setValue(null);
		cmbFindDate.setValue(null);
		panelSearch.setEnabled(false);
	}



	private void componentIni(boolean b) 
	{
		txtmouldId.setEnabled(!b);
		txtmouldName.setEnabled(!b);
		cmbproductionType.setEnabled(!b);
		cmbproductionstep.setEnabled(!b);
		//cmbsemifgName.setEnabled(!b);
		ownertype.setEnabled(!b);
		//txtstdweight.setEnabled(!b);
		txtSupplier.setEnabled(!b);
		txtAddress.setEnabled(!b);
		txtCost.setEnabled(!b);
		txtlifeTime.setEnabled(!b);
		txtcycletime.setEnabled(!b);
		txtcavityNo.setEnabled(!b);
		txttergetperhour.setEnabled(!b);
		dDate.setEnabled(!b);
		optGroup.setEnabled(!b);
	}

	private void btnIni(boolean t)
	{
		button.btnNew.setEnabled(t);
		button.btnEdit.setEnabled(t);
		button.btnSave.setEnabled(!t);
		button.btnRefresh.setEnabled(!t);
		button.btnDelete.setEnabled(t);
		button.btnFind.setEnabled(t);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() 
	{
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("960px");
		setHeight("564px");

		lblmouldId = new Label("Mould Id:");
		lblmouldId.setImmediate(false);
		lblmouldId.setWidth("-1px");
		lblmouldId.setHeight("-1px");		

		txtmouldId = new TextRead();
		txtmouldId.setImmediate(true);
		txtmouldId.setWidth("100px");
		txtmouldId.setHeight("24px");

		lblmouldName = new Label("Mould Name:");
		lblmouldName.setImmediate(false);
		lblmouldName.setWidth("-1px");
		lblmouldName.setHeight("-1px");		

		txtmouldName = new TextField();
		txtmouldName.setImmediate(true);
		txtmouldName.setWidth("280px");
		txtmouldName.setHeight("24px");

		lblproductionType = new Label("Production Type :");
		lblproductionType.setImmediate(false);
		lblproductionType.setWidth("-1px");
		lblproductionType.setHeight("-1px");		

		cmbproductionType= new ComboBox();
		cmbproductionType.setImmediate(true);
		cmbproductionType.setWidth("180px");
		cmbproductionType.setHeight("24px");
		cmbproductionType.setNullSelectionAllowed(true);
		cmbproductionType.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);

		lblproductionStep = new Label("Production Step :");
		lblproductionStep.setImmediate(false);
		lblproductionStep.setWidth("-1px");
		lblproductionStep.setHeight("-1px");		

		cmbproductionstep= new ComboBox();
		cmbproductionstep.setImmediate(true);
		cmbproductionstep.setWidth("180px");
		cmbproductionstep.setHeight("24px");
		cmbproductionstep.setNullSelectionAllowed(true);
		cmbproductionstep.setNewItemsAllowed(false);
		cmbproductionstep.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);
		/*
		lblsemifgName = new Label("Semi Fg Name :");
		lblsemifgName.setImmediate(false);
		lblsemifgName.setWidth("-1px");
		lblsemifgName.setHeight("-1px");		

		cmbsemifgName= new ComboBox();
		cmbsemifgName.setImmediate(true);
		cmbsemifgName.setWidth("280px");
		cmbsemifgName.setHeight("24px");
		cmbsemifgName.setNullSelectionAllowed(true);
		cmbsemifgName.setNewItemsAllowed(false);
		cmbsemifgName.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);*/

		lblownership = new Label("Ownership:");
		lblownership.setImmediate(false);
		lblownership.setWidth("-1px");
		lblownership.setHeight("-1px");

		//chkown = new CheckBox();
		chkown.setCaption("Own");
		chkown.setImmediate(false);
		chkown.setWidth("60px");
		chkown.setHeight("24px");
		chkown.setImmediate(true);

		//chkparty = new CheckBox();
		chkparty.setCaption("Party");
		chkparty.setImmediate(false);
		chkparty.setWidth("60px");
		chkparty.setHeight("24px");
		chkparty.setImmediate(true);

		ownertype= new OptionGroup("",areatype);
		ownertype.setImmediate(true);
		ownertype.setWidth("-1px");
		ownertype.setHeight("-1px");
		ownertype.setStyleName("horizontal");
		ownertype.select("Own");


		/*		lblstdWeight = new Label("Std Weight:");
		lblstdWeight.setImmediate(false);
		lblstdWeight.setWidth("-1px");
		lblstdWeight.setHeight("-1px");		

		txtstdweight = new TextField();
		txtstdweight.setImmediate(true);
		txtstdweight.setWidth("100px");
		txtstdweight.setHeight("24px");*/


		lblsuppliername = new Label("Supplier Name:");
		lblsuppliername.setImmediate(false);
		lblsuppliername.setWidth("-1px");
		lblsuppliername.setHeight("-1px");		

		txtSupplier= new TextField();
		txtSupplier.setImmediate(true);
		txtSupplier.setWidth("280px");
		txtSupplier.setHeight("48px");
		//txtSupplier.setNullSelectionAllowed(true);
		//txtSupplier.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);


		lblAddress = new Label("Address :");
		lblAddress.setImmediate(false);
		lblAddress.setWidth("-1px");
		lblAddress.setHeight("-1px");		

		txtAddress = new TextField();
		txtAddress.setImmediate(true);
		txtAddress.setWidth("280px");
		txtAddress.setHeight("48px");


		lblCost = new Label("Cost :");
		lblCost.setImmediate(false);
		lblCost.setWidth("-1px");
		lblCost.setHeight("-1px");		

		txtCost = new AmountField();
		txtCost.setImmediate(true);
		txtCost.setWidth("100px");
		txtCost.setHeight("24px");

		lbllifeTime = new Label("Life Time :");
		lbllifeTime.setImmediate(false);
		lbllifeTime.setWidth("-1px");
		lbllifeTime.setHeight("-1px");		

		txtlifeTime = new TextField();
		txtlifeTime.setImmediate(true);
		txtlifeTime.setWidth("100px");
		txtlifeTime.setHeight("24px");

		lblCycleTime = new Label("CycleTime in second :");
		lblCycleTime.setImmediate(false);
		lblCycleTime.setWidth("-1px");
		lblCycleTime.setHeight("-1px");		

		txtcycletime = new AmountField();
		txtcycletime.setImmediate(true);
		txtcycletime.setWidth("100px");
		txtcycletime.setHeight("24px");

		lblcavityNo = new Label("Cavity No :");
		lblCycleTime.setImmediate(false);
		lblCycleTime.setWidth("-1px");
		lblCycleTime.setHeight("-1px");		

		txtcavityNo = new AmountField();
		txtcavityNo.setImmediate(true);
		txtcavityNo.setWidth("100px");
		txtcavityNo.setHeight("24px");

		lbltargetperhour = new Label("Target Per Day In Pcs :");
		lbltargetperhour.setImmediate(false);
		lbltargetperhour.setWidth("-1px");
		lbltargetperhour.setHeight("-1px");		

		txttergetperhour = new AmountField();
		txttergetperhour.setImmediate(true);
		txttergetperhour.setWidth("100px");
		txttergetperhour.setHeight("24px");


		lblDate = new Label();
		lblDate.setImmediate(false);
		lblDate.setWidth("-1px");
		lblDate.setHeight("-1px");
		lblDate.setValue("Declaration Date :");


		dDate= new PopupDateField();
		dDate.setWidth("108px");
		dDate.setHeight("24px");
		dDate.setResolution(PopupDateField.RESOLUTION_DAY);
		dDate.setDateFormat("dd-MM-yyyy");
		dDate.setValue(new java.util.Date());
		dDate.setImmediate(true);



		lblline= new Label();
		lblline.setImmediate(false);
		lblline.setWidth("-1px");
		lblline.setHeight("-1px");
		lblline.setContentMode(Label.CONTENT_XHTML);

		lblline.setValue("<b><font color='#e65100'>======================================================================================================================</font></b>");

		/*	
		cmbFindsemifg=new ComboBox("Semi Finished Goods");
		cmbFindsemifg.setImmediate(true);
		cmbFindsemifg.setWidth("180px");
		cmbFindsemifg.setHeight("24px");
		cmbFindsemifg.setNullSelectionAllowed(true);*/

		cmbFindMould=new ComboBox("Mould :");
		cmbFindMould.setImmediate(true);
		cmbFindMould.setWidth("250px");
		cmbFindMould.setHeight("24px");
		cmbFindMould.setNullSelectionAllowed(true);



		cmbFindDate=new ComboBox("Date");
		cmbFindDate.setImmediate(true);
		cmbFindDate.setWidth("107px");
		cmbFindDate.setHeight("24px");
		cmbFindDate.setNullSelectionAllowed(true);

		optGroup=new OptionGroup("", optStatus);
		optGroup.setImmediate(true);
		optGroup.setStyleName("horizontal");
		optGroup.setValue("Active");


		mainLayout.addComponent(lblmouldId, "top:20.0px;left:70.0px;");
		mainLayout.addComponent(txtmouldId, "top:18.0px;left:200.0px;");

		mainLayout.addComponent(lblmouldName, "top:46.0px;left:70.0px;");
		mainLayout.addComponent(txtmouldName, "top:44.0px;left:200.0px;");

		mainLayout.addComponent(lblproductionType, "top:72.0px;left:70.0px;");
		mainLayout.addComponent(cmbproductionType, "top:70.0px;left:200.0px;");

		mainLayout.addComponent(lblproductionStep, "top:98.0px;left:70.0px;");
		mainLayout.addComponent(cmbproductionstep, "top:96.0px;left:200.0px;");


		/*		mainLayout.addComponent(lblsemifgName, "top:124.0px;left:70.0px;");
		mainLayout.addComponent(cmbsemifgName, "top:122.0px;left:200.0px;");*/

		mainLayout.addComponent(lblownership, "top:124.0px;left:70.0px;");
		mainLayout.addComponent(ownertype, "top:122.0px;left:200.0px;");



		/*mainLayout.addComponent(lblstdWeight, "top:176.0px;left:70.0px;");
		mainLayout.addComponent(txtstdweight, "top:174.0px;left:200.0px;");*/

		mainLayout.addComponent(lblsuppliername, "top:150.0px;left:70.0px;");
		mainLayout.addComponent(txtSupplier, "top:148.0px;left:200.0px;");

		mainLayout.addComponent(lblAddress, "top:200.0px;left:70.0px;");
		mainLayout.addComponent(txtAddress, "top:198.0px;left:200.0px;");

		mainLayout.addComponent(lblCost, "top:252.0px;left:70.0px;");
		mainLayout.addComponent(txtCost, "top:250.0px;left:200.0px;");

		mainLayout.addComponent(lbllifeTime, "top:278.0px;left:70.0px;");
		mainLayout.addComponent(txtlifeTime, "top:276.0px;left:200.0px;");

		mainLayout.addComponent(lblCycleTime, "top:304.0px;left:70.0px;");
		mainLayout.addComponent(txtcycletime, "top:302.0px;left:200.0px;");

		mainLayout.addComponent(lblcavityNo, "top:330.0px;left:70.0px;");
		mainLayout.addComponent(txtcavityNo, "top:328.0px;left:200.0px;");

		mainLayout.addComponent(lbltargetperhour, "top:356.0px;left:70.0px;");
		mainLayout.addComponent(txttergetperhour, "top:354.0px;left:200.0px;");

		mainLayout.addComponent(lblDate, "top:382px;left:70.0px;");
		mainLayout.addComponent(dDate, "top:380.0px;left:200.0px;");

		mainLayout.addComponent(new Label("Status: "), "top:410px;left:70.0px;");
		mainLayout.addComponent(optGroup, "top:408.0px;left:200.0px;");


		lblpanenSearch= new Label(" <font color='##0000FF' size='4px'><b><Strong>Search :<Strong></b></font>");
		lblpanenSearch.setContentMode(Label.CONTENT_XHTML);
		mainLayout.addComponent(lblpanenSearch, "top:174px;left:500px;");

		panelSearch=new Panel();
		panelSearch.setWidth("400px");
		panelSearch.setHeight("134px");
		panelSearch.setEnabled(false);
		panelSearch.setStyleName("panelSearch");
		mainLayout.addComponent(panelSearch,"top:200px;left:500px;");

		FormLayout frmLayout=new FormLayout();
		frmLayout.setSpacing(true);
		frmLayout.setMargin(true);
		//frmLayout.addComponent(cmbFindsemifg);
		frmLayout.addComponent(cmbFindMould);
		frmLayout.addComponent(cmbFindDate);

		cmbFindDate.setImmediate(true);
		panelSearch.addComponent(frmLayout);


		mainLayout.addComponent(lblline, "top:430.0px;left:12.0px;");
		mainLayout.addComponent(button, "top:456.0px;left:120.0px;");

		return mainLayout;
	}
}
