package acc.appform.FinishedGoodsModule;

import com.common.share.CommonButton;
import com.common.share.FocusMoveByEnter;
import com.common.share.MessageBox;
import com.common.share.MessageBox.ButtonType;
import com.common.share.SessionBean;
import com.common.share.SessionFactoryUtil;
import com.common.share.TextRead;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Component;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Window;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.Transaction;
import com.vaadin.terminal.gwt.server.WebApplicationContext;
import com.vaadin.terminal.gwt.server.WebBrowser;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;

public class ItemCategory extends Window 
{
	SessionBean sessionBean;

	private AbsoluteLayout mainLayout;
	private TextField txtCategoryname;
	private Label labCategoryName;
	private TextRead categoryRead;
	private Label lblCategoryId;

	private Label lblExistCategoryName;
	private Label GroupId=new Label();

	boolean isUpdate=false;
	boolean isFind=false;

	private Label lblline;
	CommonButton button = new CommonButton("New", "Save", "Edit", "", "Refresh", "Find", "", "","","Exit");

	private TextField txtCategoryID = new TextField();
	ArrayList<Component> allComp = new ArrayList<Component>();

	public ItemCategory(SessionBean sessionBean) 
	{
		this.sessionBean=sessionBean;
		buildMainLayout();
		setContent(mainLayout);
		this.setResizable(false);
		this.setCaption("FINISH GOODS CATEGORY :: " + sessionBean.getCompany());
		btnIni(true);
		componentIni(true);
		setEventAction();
		button.btnNew.focus();
		authencationCheck();
		button.btnNew.focus();
	}

	private void authencationCheck()
	{
		if(sessionBean.isSubmitable())
		{
			button.btnSave.setVisible(true);
		}
		else
		{
			button.btnSave.setVisible(false);
		}
		if(sessionBean.isUpdateable())
		{
			button.btnEdit.setVisible(true);
		}
		else
		{
			button.btnEdit.setVisible(false);
		}
		if(sessionBean.isDeleteable())
		{
			button.btnDelete.setVisible(true);
		}
		else
		{
			button.btnDelete.setVisible(false);
		}
	}

	private void focusEnter()
	{
		allComp.add(txtCategoryname);

		allComp.add(button.btnNew);
		allComp.add(button.btnSave);
		allComp.add(button.btnEdit);
		allComp.add(button.btnRefresh);
		allComp.add(button.btnFind);
		allComp.add(button.btnExit);

		new FocusMoveByEnter(this,allComp);
	}

	public void setEventAction()
	{
		button.btnNew.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				focusEnter();
				isFind = true;
				newButtonEvent();
			}
		});

		button.btnEdit.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				if(sessionBean.isUpdateable()){
					isFind = true;
					updateButtonEvent();
					txtCategoryname.focus();
				}else{
					getParent().showNotification("You are not Permitted to Update",Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

		button.btnSave.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				if(sessionBean.isSubmitable()){
					saveButtonEvent();
				}else{
					getParent().showNotification("You are not Permitted to Save",Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

		button.btnFind.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				isFind = true;
				txtClear();
				findButtonEvent();
				isFind = false;
			}
		});

		button.btnRefresh.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				refreshButtonEvent();
			}
		});

		button.btnExit.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				close();
			}
		});

		txtCategoryname.addListener(new ValueChangeListener()
		{
			public void valueChange(ValueChangeEvent event)
			{
				if(isFind)
				{
					if(!txtCategoryname.getValue().toString().isEmpty())
					{
						if(duplicateName())
						{
							lblExistCategoryName.setVisible(true);
							lblExistCategoryName.setValue("<b><Font Color='#CD0606'>! Already Exist</Font></b>");
							txtCategoryname.setValue("");
							txtCategoryname.focus();
						}
						else
						{	
							lblExistCategoryName.setVisible(false);
						}
					}
				}
			}
		});
	}


	private boolean duplicateName()
	{
		String CategoryName="";

		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			String query = " select vCategoryName from tbProductCategory where vCategoryName='"+txtCategoryname.getValue().toString().trim()+"' ";
			Iterator iter = session.createSQLQuery(query).list().iterator();

			if (iter.hasNext()) 
			{
				return true;
			}
		}
		catch (Exception ex) 
		{
			System.out.print(ex);
		}

		return false;
	}
	private void findButtonEvent() 
	{
		Window win = new ItemCategoryFind(sessionBean, txtCategoryID);
		win.addListener(new Window.CloseListener() 
		{
			public void windowClose(CloseEvent e) 
			{
				if (txtCategoryID.getValue().toString().length() > 0)
				{
					txtClear();
					findInitialise(txtCategoryID.getValue().toString());
					button.btnEdit.focus();
				}
			}
		});

		this.getParent().addWindow(win);
	}


	private void findInitialise(String txtCategoryId) 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			List led = session.createSQLQuery("Select iCategoryCode,vCategoryName,Group_Id from tbProductCategory Where iCategoryCode = '"+txtCategoryId+"'").list();

			if (led.iterator().hasNext()) 
			{
				Object[] element = (Object[]) led.iterator().next();

				categoryRead.setValue(element[0]);
				txtCategoryname.setValue(element[1]);
				GroupId.setValue(element[2]);

			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	private void refreshButtonEvent()
	{
		isUpdate=false;
		componentIni(true);
		btnIni(true);
		txtClear();
	}

	private void saveButtonEvent() 
	{
		if(!txtCategoryname.getValue().toString().isEmpty())
		{
			if(isUpdate)
			{
				MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to update product information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
				mb.show(new MessageBox.EventListener()
				{
					public void buttonClicked(ButtonType buttonType)
					{
						if(buttonType == ButtonType.YES)
						{
							updateData();
							button.btnNew.focus();
							isUpdate=false;
							txtClear();
						}
					}
				});		
			}
			else
			{
				MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to Save information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
				mb.show(new MessageBox.EventListener()
				{
					public void buttonClicked(ButtonType buttonType)
					{
						if(buttonType == ButtonType.YES)
						{
							insertData();
							btnIni(true);
							//cmbValueAdd();
							componentIni(true);
							txtClear();
							btnIni(true);
							button.btnNew.focus();
						}
					}
				});		
			}
		}

		else{
			this.getParent().showNotification("Warning :", "Please select Category Name", Notification.TYPE_WARNING_MESSAGE);
			txtCategoryname.focus();
		}
	}

	private void insertData()
	{
		Transaction tx = null;
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			System.out.println("CateName : "+txtCategoryname.getValue());
			System.out.println("Username : "+sessionBean.getUserName());
			System.out.println("User IP : "+sessionBean.getUserIp());

			//String insertQuery = "Insert Into tbProductCategory (iCategoryCode,vCategoryName,vUserName,vUserIP,dtEntryTime) values ('5','Twist Department','esl12','10.201.0232.10',CURRENT_TIMESTAMP)";
			String insertQuery = "Insert Into tbProductCategory (iCategoryCode,vCategoryName,Group_Id,vUserName,vUserIP,dtEntryTime) values ('"+categoryRead.getValue()+"','"+txtCategoryname.getValue()+"','G'+ISNULL((SELECT cast((max(substring(Group_Id,2,len(Group_Id)-1))+1) as VARCHAR) FROM TbMain_Group),101),'"+sessionBean.getUserName()+"','"+sessionBean.getUserIp()+"',CURRENT_TIMESTAMP)";

			System.out.println("insertQuery : "+insertQuery);

			session.createSQLQuery(insertQuery).executeUpdate();
			String sql = "INSERT INTO tbMain_Group(Group_Id,Group_Name,Head_Id,userId,userIp,entryTime) VALUES('G'+ISNULL((SELECT cast((max(substring(Group_Id,2,len(Group_Id)-1))+1) as VARCHAR) FROM TbMain_Group),101) ,'"+
					txtCategoryname.getValue()+"','I1','"+sessionBean.getUserId()+"','"+sessionBean.getUserIp()+"',CURRENT_TIMESTAMP)";
			session.createSQLQuery(sql).executeUpdate();
			tx.commit();

			this.getParent().showNotification("All Information Save successfully.");
			btnIni(true);
		}
		catch(Exception exp)
		{
			this.getParent().showNotification("Error ",exp+"",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	public void updateData() 
	{
		Transaction tx = null;
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			String updateQuery = "Update tbProductCategory set vCategoryName = '"+txtCategoryname.getValue().toString().trim()+"', vUserName ='"+sessionBean.getUserName()+"', vUserIP='"+sessionBean.getUserIp()+"', dtEntryTime= CURRENT_TIMESTAMP where Group_Id = '"+GroupId.getValue()+"'";
			session.createSQLQuery(updateQuery).executeUpdate();
			System.out.println("updateQuery : "+updateQuery);

			System.out.println("GroupId : "+GroupId.getValue());

			String UpdateLedger="UPDATE tbMain_Group set" +
					" Group_Name = '"+txtCategoryname.getValue()+"', " +
					" userId = '"+sessionBean.getUserId()+"', " +
					" userIp = '"+sessionBean.getUserIp()+"', " +
					" entryTime = CURRENT_TIMESTAMP " +
					" where Group_Id='"+GroupId.getValue()+"'";

			System.out.println("UpdateLedger: "+UpdateLedger);
			session.createSQLQuery(UpdateLedger).executeUpdate();
			tx.commit();
			this.getParent().showNotification("Update successfully.");
		}
		catch(Exception exp)
		{
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}	
	}

	private void updateButtonEvent()
	{
		if(!txtCategoryname.getValue().toString().isEmpty())
		{
			isUpdate = true;
			btnIni(false);
			componentIni(false);//Enable(true);
			categoryRead.setEnabled(false);
		}
		else{
			this.getParent().showNotification("Update Failed","There are no data for update.",Notification.TYPE_WARNING_MESSAGE);
		}
	}

	private void newButtonEvent() 
	{
		componentIni(false);
		btnIni(false);
		txtClear();
		newBtnData(1);
		txtCategoryname.focus();
		categoryRead.setEnabled(false);
	}

	public void newBtnData(int flag)
	{
		if(txtCategoryname.getValue().toString().isEmpty() || flag==1)
		{
			Transaction tx = null;
			try{
				Session session = SessionFactoryUtil.getInstance().getCurrentSession();
				tx = session.beginTransaction();
				String sql = "Select isnull(max(iCategoryCode)+1,1) as cat from tbProductCategory";
				Iterator iter = session.createSQLQuery(sql).list().iterator();
				int num = 0;
				if (iter.hasNext()) {
					num = Integer.parseInt(iter.next().toString());
					categoryRead.setValue(num);
				}
			}
			catch(Exception ex){
				this.getParent().showNotification("Error",ex+"",Notification.TYPE_ERROR_MESSAGE);
			}
		}
		else{

		}
	}

	public void txtClear()
	{
		txtCategoryname.setValue("");
		categoryRead.setValue("");
		lblExistCategoryName.setValue("");
	}


	private void componentIni(boolean b) 
	{
		lblline.setEnabled(!b);
		categoryRead.setEnabled(!b);
		txtCategoryname.setEnabled(!b);
	}

	private void btnIni(boolean t)
	{
		button.btnNew.setEnabled(t);
		button.btnEdit.setEnabled(t);
		button.btnSave.setEnabled(!t);
		button.btnFind.setEnabled(t);
		button.btnRefresh.setEnabled(!t);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() 
	{
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("530px");
		mainLayout.setHeight("200px");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("540px");
		setHeight("240px");

		// lblCategoryId
		lblCategoryId = new Label();
		lblCategoryId.setImmediate(false);
		lblCategoryId.setWidth("-1px");
		lblCategoryId.setHeight("-1px");
		lblCategoryId.setValue("Category ID:");
		mainLayout.addComponent(lblCategoryId, "top:40.0px;left:70.0px;");

		// categoryRead
		categoryRead = new TextRead();
		categoryRead.setImmediate(false);
		categoryRead.setWidth("101px");
		categoryRead.setHeight("24px");
		mainLayout.addComponent(categoryRead, "top:34.0px;left:140.0px;");

		// labCategoryName
		labCategoryName = new Label();
		labCategoryName.setImmediate(false);
		labCategoryName.setWidth("-1px");
		labCategoryName.setHeight("-1px");
		labCategoryName.setValue("Category Name :");
		mainLayout.addComponent(labCategoryName, "top:64.0px;left:45.0px;");

		// txtCategoryname
		txtCategoryname = new TextField();
		txtCategoryname.setImmediate(false);
		txtCategoryname.setWidth("280px");
		txtCategoryname.setHeight("-1px");
		txtCategoryname.setSecret(false);
		mainLayout.addComponent(txtCategoryname, "top:60.0px;left:140.0px;");

		lblExistCategoryName = new Label();
		lblExistCategoryName.setWidth("-1px");
		lblExistCategoryName.setHeight("-1px");
		lblExistCategoryName.setImmediate(true);
		lblExistCategoryName.setContentMode(Label.CONTENT_XHTML);
		lblExistCategoryName.setVisible(false);
		lblExistCategoryName.setValue("");
		mainLayout.addComponent(lblExistCategoryName, " top:64.0px;left:450.0px;");


		lblline= new Label();
		lblline.setImmediate(false);
		lblline.setWidth("-1px");
		lblline.setHeight("-1px");
		lblline.setValue("__________________________________________________________________________");
		mainLayout.addComponent(lblline, "top:100.0px;left:10.0px;");

		mainLayout.addComponent(button, "top:130.0px;left:12.0px;");

		return mainLayout;
	}

}
