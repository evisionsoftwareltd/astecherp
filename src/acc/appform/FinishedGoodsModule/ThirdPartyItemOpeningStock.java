package acc.appform.FinishedGoodsModule;

import java.net.InetAddress;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Formatter;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.Transaction;

import com.common.share.AmountField;
import com.common.share.CommonButtonNew;
import com.common.share.FocusMoveByEnter;
import com.common.share.MessageBox;
import com.common.share.MessageBox.ButtonType;
import com.common.share.MessageBox.EventListener;
import com.common.share.SessionBean;
import com.common.share.SessionFactoryUtil;
import com.common.share.TextRead;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.terminal.gwt.server.WebApplicationContext;
import com.vaadin.terminal.gwt.server.WebBrowser;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.InlineDateField;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

public class ThirdPartyItemOpeningStock extends Window 
{

	String unit1[]={"Pcs", "No", "Bag", "gm", "Kgs", "Lbs", "Ton", "Ltr", "Ft", "Cft", "Rft", "Mtr", "Cubic Mtr", "Inch", "Watt", "K. Watt"};

	private CommonButtonNew button = new CommonButtonNew( "New",  "Save",  "Edit",  "",  "Refresh",  "Find", "", "Exit","","");
	private VerticalLayout btnLayout = new VerticalLayout();

	private AbsoluteLayout mainLayout;
	private InlineDateField dOpeningYear;
	private Label lblOpeningYear;

	private Label lblItemCode;
	private TextRead txtItemCodeR;

	private Label lblItemNameDeliveryStage;
	private ComboBox cmbItemNameDeliveryStage;
	private Label lblItemNameReceivingStage;
	private ComboBox cmbItemNameReceivingStage;

	private Label lblOwnerNameParty;
	private ComboBox cmbOwnerNameParty;

	private Label lblSupplierNameSource;
	private ComboBox cmbSupplierNameSource;

	private String ProductLedeger="";

	private Label lblUnit;
	private ComboBox cmbUnit;

	private Label lblQuantity;

	private AmountField amtQuantity;

	private Label lblRate;
	@AutoGenerated
	private AmountField txtRate;

	@AutoGenerated
	private Label lblAmount;
	@AutoGenerated
	private TextRead amtAmount;

	@AutoGenerated
	private Label lblline;

	boolean isUpdate=false;
	int index;

	private TextRead txtCategoryID = new TextRead();
	private TextRead txtSubCategoryID = new TextRead();

	private TextField txtProductID = new TextField();
	private TextField txtOpeningYear = new TextField();

	private SimpleDateFormat dateDBFormat = new SimpleDateFormat("yyyy-MM-dd");
	private SimpleDateFormat dateDBYear = new SimpleDateFormat("yyyy");
	
	ArrayList<Component> allComp = new ArrayList<Component>();

	private DecimalFormat df = new DecimalFormat("#0.00");

	private Formatter fmt = new Formatter();

	private SessionBean sessionBean;

	/*public BtUpload fileAttUpload;
	private String fileName = "";*/
	
	TextField txtTransectionid=new TextField();
	TextField txtTransectionidfind=new TextField();

	public ThirdPartyItemOpeningStock(SessionBean sessionBean)
	{

		this.sessionBean = sessionBean;
		this.setCaption("THIRD PARTY ITEM OPENING STOCK:: "+sessionBean.getCompany());
		this.setResizable(false);
		buildMainLayout();
		this.setContent(mainLayout);
		buttonLayoutAdd();
		btnIni(true);
		componentIni(true);
		updateBtnFileldED(true);
		setEventAction();
		cmbPartyNameLoad();
		cmbStoreload();
		focusEnter();
	}

	private void focusEnter()
	{
		allComp.add(dOpeningYear);
		allComp.add(cmbOwnerNameParty);
		allComp.add(cmbSupplierNameSource);
		allComp.add(cmbItemNameDeliveryStage);
		allComp.add(cmbItemNameReceivingStage);		
		allComp.add(amtQuantity);
		allComp.add(txtRate);
		allComp.add(button.btnNew);
		allComp.add(button.btnUpdate);
		allComp.add(button.btnSave);
		allComp.add(button.btnRefresh);
		allComp.add(button.btnDelete);
		allComp.add(button.btnFind);
		new FocusMoveByEnter(this,allComp);
	}

	public void setEventAction()
	{
		button.btnNew.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				//cmbProductNameData();
				focusEnter();
				cmbOwnerNameParty.focus();
				newButtonEvent();
				cmbPartyNameLoad();
			}
		});

		button.btnUpdate.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				if(sessionBean.isUpdateable()){
					updateButtonEvent();
				}else{
					getParent().showNotification("You are not Permitted to Update", Notification.TYPE_WARNING_MESSAGE);	
				}
			}
		});

		button.btnDelete.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				//deleteButtonEvent();
				txtClear();
			}
		});

		button.btnSave.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				if(sessionBean.isSubmitable()){
					if(checkValidation()){
						saveButtonEvent();
					}
				}
				else{
					getParent().showNotification("You are not Permitted to Save",Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

		button.btnFind.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				findButtonEvent();
			}
		});

		button.btnExit.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				close();
				//showData();
			}
		});

		button.btnRefresh.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event){ 
				refreshButtonEvent();
				cmbPartyNameLoad();
			}
		});


		cmbOwnerNameParty.addListener(new ValueChangeListener() {


			public void valueChange(ValueChangeEvent event) 
			{
				if(cmbOwnerNameParty.getValue()!=null)
				{
					cmbSourceName(cmbOwnerNameParty.getValue().toString());
				}
			}
		});


		cmbSupplierNameSource.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				if(cmbSupplierNameSource.getValue()!=null)
				{
					dataload();
				}
			}
		});

		cmbItemNameDeliveryStage.addListener(new ValueChangeListener() {
			public void valueChange(ValueChangeEvent event)
			{
				if(cmbItemNameDeliveryStage.getValue()!=null){
					cmbItemNameReceivingStage.setValue(cmbItemNameDeliveryStage.getValue().toString());
					ProductDataLoad(cmbItemNameDeliveryStage.getValue().toString());
				}
				else{
					cmbItemNameReceivingStage.setValue(null);
				}
			}
		});

		cmbItemNameReceivingStage.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				if(cmbItemNameReceivingStage.getValue()!=null)
				{
					cmbItemNameDeliveryStage.setValue(cmbItemNameReceivingStage.getValue().toString());
					ProductDataLoad(cmbItemNameDeliveryStage.getValue().toString());
				}
				else{
					cmbItemNameDeliveryStage.setValue(null);
				}
			}
		});



		amtQuantity.addListener(new ValueChangeListener() {
			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				try
				{

					double tamount,unitPrice,requiredQty; 
					if(!event.getProperty().toString().trim().isEmpty() && !txtRate.getValue().toString().trim().isEmpty())
					{
						requiredQty= Double.parseDouble(event.getProperty().toString().trim().replaceAll(",", ""));
						unitPrice= Double.parseDouble(txtRate.getValue().toString().replaceAll(",", ""));

						System.out.println("column Action");
						tamount=unitPrice*requiredQty;
						fmt = new Formatter();


						amtAmount.setValue(fmt.format("%.2f",tamount));
					}						


				}
				catch(Exception exp)
				{
					getParent().showNotification("Errora",exp.toString(),Notification.TYPE_ERROR_MESSAGE);
				}
			}
		});

		txtRate.addListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				try
				{
					double tamount,unitPrice,requiredQty; 
					if(!event.getProperty().toString().trim().isEmpty() && !txtRate.getValue().toString().trim().isEmpty())
					{
						requiredQty= Double.parseDouble(event.getProperty().toString().trim().replaceAll(",", ""));
						unitPrice= Double.parseDouble(amtQuantity.getValue().toString().replaceAll(",", ""));
						System.out.println("column Action");
						tamount=unitPrice*requiredQty;
						fmt = new Formatter();
						amtAmount.setValue(fmt.format("%.2f",tamount));
					}						


				}
				catch(Exception exp)
				{
					getParent().showNotification("Errora",exp.toString(),Notification.TYPE_ERROR_MESSAGE);
				}
			}
		});


	}

	private void updateButtonEvent()
	{
		if(cmbOwnerNameParty.getValue()!= null)
		{
			isUpdate = true;
			btnIni(false);
			//componentIni(false);
			//updateBtnFileldED(false);
			updateinit(true);
		}
		else
			this.getParent().showNotification("Update Failed","There are no data for update.",Notification.TYPE_WARNING_MESSAGE);
	}

	private void findButtonEvent() 
	{
		Window win = new ThirdPartyOpeningStockFindWindow(sessionBean, txtTransectionidfind);
		win.addListener(new Window.CloseListener() 
		{
			public void windowClose(CloseEvent e) 
			{
				if (txtTransectionidfind.getValue().toString().length() > 0)
				{
					txtClear();
					findInitialise(txtTransectionidfind.getValue().toString());
				}
			}
		});
		this.getParent().addWindow(win);
	}
	private void findInitialise(String txtTransectionId) 
	{
		Transaction tx=null;
		try{
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();
		
			String sql= "select iTransectionId,dOpeningYear, vOwnerNamePartyId, "
					+ "vSupplierNameSourceId,vItemId, vItemNameDeliveryStage, "
					+ "vItemNameReceivingStage, vUnit, mqty, mRate, mAmount,vProductCode from tb3rdPartyItemOpening"
					+ " where iTransectionId like '"+txtTransectionId+"'";

			System.out.println("query is"+sql);

			List list=session.createSQLQuery(sql).list();
			for(Iterator iter=list.iterator();iter.hasNext();){

				Object element[]=(Object[]) iter.next();
				txtTransectionid.setValue(element[0]);
				dOpeningYear.setValue(element[1]);
				cmbOwnerNameParty.setValue(element[2]);
				cmbSupplierNameSource.setValue(element[3]);
				cmbItemNameDeliveryStage.setValue(element[4].toString());
				//cmbItemNameReceivingStage.setValue(element[4].toString());
				//txtItemCodeR.setValue(element[4]);
				System.out.println("Product ID: "+element[4]);
				//cmbUnit.setValue(element[7]);
				fmt=new Formatter();
				amtQuantity.setValue(fmt.format("%.2f",Double.parseDouble(element[8].toString().trim())));
				fmt=new Formatter();
				txtRate.setValue(fmt.format("%.2f", Double.parseDouble(element[9].toString().trim())));
				fmt=new Formatter();

			}
		}
		catch(Exception exp){
			this.getParent().showNotification(""+exp,Notification.TYPE_ERROR_MESSAGE);
		}
	}
	public boolean checkValidation(){
		if(cmbOwnerNameParty.getValue()!=null)
		{
			if(cmbSupplierNameSource.getValue()!=null)
			{
				if(cmbItemNameDeliveryStage.getValue()!=null)
				{
					if(cmbItemNameReceivingStage.getValue()!=null)
					{
						if(!amtQuantity.getValue().toString().isEmpty())
						{
							if(!txtRate.getValue().toString().isEmpty())
							{
								return true;
							}
							else
							{
								showNotification("Please, provide item rate ",Notification.TYPE_WARNING_MESSAGE);	
							}
						}
						else
						{
							showNotification("Please, provide item Qty ",Notification.TYPE_WARNING_MESSAGE);
						}
					}
					else
					{
						getParent().showNotification("Warning","Please provide Item name (Receiving stage)",Notification.TYPE_WARNING_MESSAGE);
						cmbItemNameReceivingStage.focus();
					}
				}
				else
				{
					getParent().showNotification("Warning","Please provide Item name (Delivery stage)",Notification.TYPE_WARNING_MESSAGE);
					cmbItemNameDeliveryStage.focus();
				}
			}
			else
			{
				getParent().showNotification("Warning","Please provide supplier name(source)",Notification.TYPE_WARNING_MESSAGE);
				cmbSupplierNameSource.focus();
			}
		}
		else
		{
			getParent().showNotification("Warning","Please provide Owner name(party)",Notification.TYPE_WARNING_MESSAGE);
			cmbOwnerNameParty.focus();
		}
		return false;
	}

	private void saveButtonEvent()
	{
		if(isUpdate)
		{
			final MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to update ?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
			mb.show(new EventListener()
			{
				public void buttonClicked(ButtonType buttonType)
				{
					if(buttonType == ButtonType.YES)
					{
						//if(fiscalyearcheck()==1)
						//{
							mb.buttonLayout.getComponent(0).setEnabled(false);
							Transaction tx = null;
							Session session = SessionFactoryUtil.getInstance().getCurrentSession();
							tx = session.beginTransaction();
							if(deleteData(session, tx)){
								if(insertData(session, tx)){
									isUpdate=false;
									componentIni(true);
									updateBtnFileldED(true);
									txtClear();
									btnIni(true);
									button.btnNew.focus();
									mb.close();
								}	
							}
						//}
						//else
						//{
						//	showNotification("Not Allowed to give Opening Update",Notification.TYPE_WARNING_MESSAGE);	
						//}
					}
				}
			});	
		}
		else
		{
			final MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to Save ?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
			mb.show(new EventListener()
			{
				public void buttonClicked(ButtonType buttonType)
				{
					if(buttonType == ButtonType.YES)
					{	
						//if(fiscalyearcheck()==1)
						//{
							mb.buttonLayout.getComponent(0).setEnabled(false);
							Transaction tx = null;
							Session session = SessionFactoryUtil.getInstance().getCurrentSession();
							tx = session.beginTransaction();
							if(insertData(session,tx)){
								btnIni(true);
								componentIni(true);
								txtClear();
								mb.close();
							}
							
						//}
						//else
						//{
						//	showNotification("Not Allowed to give Opening",Notification.TYPE_WARNING_MESSAGE);
						//}
					}
				}
			});	
		}

	}
	
	public boolean deleteData(Session session,Transaction tx){
		try {
			String UdInsert="insert into tbUd3rdPartyItemOpening select  iTransectionId, dDate, dOpeningYear, "
					+ "vOwnerNamePartyId, vOwnerNameParty, vSupplierNameSourceId, vSupplierNameSource, vItemId,"
					+ " vItemNameDeliveryStage, vItemNameReceivingStage, vUnit, mqty, mRate, mAmount, vUserIp, "
					+ "vUserId, vUserName, dEntryTime,'Update',vProductCode from tb3rdPartyItemOpening "
					+ "where iTransectionId like '"+txtTransectionid.getValue()+"'";
			
			System.out.println("delete : "+UdInsert);
			session.createSQLQuery(UdInsert).executeUpdate();
			
			String sqlDelete="delete from tb3rdPartyItemOpening where iTransectionId like '"+txtTransectionid.getValue()+"'";
			System.out.println("delete : "+sqlDelete);
			session.createSQLQuery(sqlDelete).executeUpdate();
			return true;
		}
		catch (Exception e) {
			showNotification("DeleteData",null,Notification.TYPE_ERROR_MESSAGE);
		}
		return false;
	}

	private boolean insertData(Session session,Transaction tx)
	{
		String itemCode="",itemNameDeliveryStage="",itemNameReceivingStage="",partyId="",
			oWnerNameParty="",sourcId="",suppliernameSource="",Transecid="";
		try
		{
			////////
			if(isUpdate){
				Transecid = txtTransectionid.getValue().toString();
			}
			else{
				String query = "select isnull(MAX(iTransectionId),0)+1 id from tb3rdPartyItemOpening";
				Iterator<?> iter = session.createSQLQuery(query).list().iterator();
				if (iter.hasNext())
				{
					Transecid = iter.next().toString();
				}
			}
			////////
			if(cmbOwnerNameParty.getValue()!=null){
				partyId=cmbOwnerNameParty.getValue().toString();
				oWnerNameParty=cmbOwnerNameParty.getItemCaption(cmbOwnerNameParty.getValue()).toString();
			}
			if(cmbSupplierNameSource.getValue()!=null){
				sourcId=cmbSupplierNameSource.getValue().toString();
				suppliernameSource=cmbSupplierNameSource.getItemCaption(cmbSupplierNameSource.getValue()).toString();
			}
			if(cmbItemNameDeliveryStage.getValue()!=null){
				itemCode=cmbItemNameDeliveryStage.getValue().toString();
				itemNameDeliveryStage=cmbItemNameDeliveryStage.getItemCaption(cmbItemNameDeliveryStage.getValue()).toString();
			}
			if(cmbItemNameReceivingStage.getValue()!=null){
				itemNameReceivingStage=cmbItemNameReceivingStage.getItemCaption(cmbItemNameReceivingStage.getValue()).toString();
			}
			String insertProductOpening = "insert into tb3rdPartyItemOpening (iTransectionId,dDate,dOpeningYear, "
					+ "vOwnerNamePartyId, vOwnerNameParty, vSupplierNameSourceId, vSupplierNameSource, vItemId, "
					+ "vItemNameDeliveryStage, vItemNameReceivingStage, vUnit, mqty, mRate, mAmount, vUserIp, "
					+ "vUserId, vUserName, dEntryTime,vProductCode ) "
					+ "values('"+Transecid+"','"+dateDBFormat.format(dOpeningYear.getValue())+"',"
					+ "'"+dateDBYear.format(dOpeningYear.getValue())+"','"+partyId+"','"+oWnerNameParty+"',"
					+ "'"+sourcId+"','"+suppliernameSource+"','"+itemCode+"','"+itemNameDeliveryStage+"',"
					+ "'"+itemNameReceivingStage+"','"+cmbUnit.getValue().toString()+"','"+amtQuantity.getValue()+"',"
					+ "'"+txtRate.getValue()+"','"+amtAmount.getValue()+"','"+sessionBean.getUserIp()+"',"
					+ "'"+sessionBean.getUserId()+"','"+sessionBean.getUserName()+"',CURRENT_TIMESTAMP,'"+txtItemCodeR.getValue()+"')";
			
			System.out.println("insertProductInfo : "+insertProductOpening);
			session.createSQLQuery(insertProductOpening).executeUpdate();
			
			if(isUpdate){
				String insertUdProductOpening = "insert into tbUd3rdPartyItemOpening (iTransectionId,dDate,dOpeningYear, "
						+ "vOwnerNamePartyId, vOwnerNameParty, vSupplierNameSourceId, vSupplierNameSource, vItemId, "
						+ "vItemNameDeliveryStage, vItemNameReceivingStage, vUnit, mqty, mRate, mAmount, vUserIp, "
						+ "vUserId, vUserName, dEntryTime,vUdFlag,vProductCode ) "
						+ "values('"+Transecid+"','"+dateDBFormat.format(dOpeningYear.getValue())+"',"
						+ "'"+dateDBYear.format(dOpeningYear.getValue())+"','"+partyId+"','"+oWnerNameParty+"',"
						+ "'"+sourcId+"','"+suppliernameSource+"','"+itemCode+"','"+itemNameDeliveryStage+"',"
						+ "'"+itemNameReceivingStage+"','"+cmbUnit.getValue().toString()+"','"+amtQuantity.getValue()+"',"
						+ "'"+txtRate.getValue()+"','"+amtAmount.getValue()+"','"+sessionBean.getUserIp()+"',"
						+ "'"+sessionBean.getUserId()+"','"+sessionBean.getUserName()+"',CURRENT_TIMESTAMP,'New','"+txtItemCodeR.getValue()+"')";
				
				System.out.println("insertUdProductInfo : "+insertUdProductOpening);
				session.createSQLQuery(insertUdProductOpening).executeUpdate();
			}
			tx.commit();
			showNotification("All information save successfully.");
			return true;
		}
		catch(Exception exp){
			if(tx!=null){
				tx.rollback();
			}
			showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}
		return false;
	}

	public void updateData()
	{
		Transaction tx = null;
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			WebApplicationContext context = ((WebApplicationContext) getApplication().getContext());
			WebBrowser webBrowser = context.getBrowser();
			sessionBean.setUserIp(webBrowser.getAddress());    

			InetAddress inetAddress =InetAddress.getByName(webBrowser.getAddress().toString());//get the host Inet using ip

			String updateQuery = "Update tbRawProductDetails set CreationYear = '"+Calendar.getInstance().get(Calendar.YEAR)+"',vUserName = '"+sessionBean.getUserName()+"',vUserIP = '"+inetAddress.getHostName()+"',dEntryTime = CURRENT_TIMESTAMP, vDepoId = '', vDepoName = '' WHERE ProductID = '"+cmbItemNameDeliveryStage.getValue()+"'";
			System.out.println("updateQuery :"+updateQuery);
			session.createSQLQuery(updateQuery).executeUpdate();

			String updateQOS = "Update tbRawProductOpening set Qty = '"+amtQuantity.getValue().toString().trim()+"', " +
					"Rate = '"+(txtRate.getValue().toString().equals("") ?"0.00":txtRate.getValue().toString().trim())+"',vUserName = '"+sessionBean.getUserName()+"'," +
					"vUserIP = '"+inetAddress.getHostName()+"'," +
					"dtEntryTime = CURRENT_TIMESTAMP, amount='"+amtAmount.getValue().toString().trim()+"'," +
					"openingYear = '"+dateDBFormat.format(dOpeningYear.getValue())+"' WHERE ProductID = '"+cmbItemNameDeliveryStage.getValue()+"'";

			System.out.println("updateQOS :"+updateQOS);
			session.createSQLQuery(updateQOS).executeUpdate();

			String LedgerOpen=" update tbLedger_Op_Balance set  DrAmount='"+amtAmount.getValue()+"',CrAmount='0.00' ,userId='"+sessionBean.getUserId()+"' ,userIp='"+sessionBean.getUserIp()+"',entryTime=getdate() where Ledger_Id like '"+ProductLedeger+"' ";
			System.out.println("LedgerOpen : "+LedgerOpen);
			session.createSQLQuery(LedgerOpen).executeUpdate();





			tx.commit();
			this.getParent().showNotification("All information update successfully.");

		}catch(Exception exp){
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	public String productlededger() 
	{
		String autoCode = "";

		Transaction tx = null;

		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			String query="select Ledger_Id  from tbLedger where Ledger_Id=(select vLedgerCode from tbRawItemInfo where vRawItemCode like '"+cmbItemNameDeliveryStage.getValue().toString()+"')";
			System.out.println("ledgerpr"+query);
			Iterator iter = session.createSQLQuery(query).list().iterator();

			if (iter.hasNext()) 
			{
				autoCode = iter.next().toString();
			}
		} 
		catch (Exception ex) 
		{
			System.out.print(ex);
		}

		return autoCode;
	}
	private int fiscalyearcheck()
	{
		Transaction tx=null;
		Session session=SessionFactoryUtil.getInstance().getCurrentSession();
		String sql="select SlNo from tbFiscal_Year  where convert(date,getdate(),105) between Op_Date and Cl_Date ";
		List lst=session.createSQLQuery(sql).list();
		Iterator<?>itr=lst.iterator();
		if(itr.hasNext())
		{
			return Integer.parseInt(itr.next().toString()) ;
		}
		return 0;

	}

	private void refreshButtonEvent()
	{
		componentIni(true);
		updateBtnFileldED(true);
		btnIni(true);
		txtClear();
	}

	private void newButtonEvent() 
	{
		componentIni(false);
		updateBtnFileldED(false);
		btnIni(false);
		txtClear();
		isUpdate = false;
		txtTransectionid.setValue(selectTransectionNo());
	}

	private String selectTransectionNo()
	{
		String TransectionNo = "";
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			session.beginTransaction();
			String query = "select isnull(MAX(iTransectionId),0)+1 id from tb3rdPartyItemOpening ";
			Iterator<?> iter = session.createSQLQuery(query).list().iterator();
			if (iter.hasNext())
			{
				TransectionNo = iter.next().toString();
			}
		} 
		catch (Exception ex) 
		{
			System.out.print(ex);
		}
		return TransectionNo;
	}
	
	public void txtClear()
	{
		cmbItemNameDeliveryStage.setValue(null);
		txtItemCodeR.setValue("");
		txtCategoryID.setValue("");
		cmbOwnerNameParty.setValue(null);
		cmbSupplierNameSource.setValue(null);
		cmbUnit.setValue(null);
		amtQuantity.setValue("");
		txtRate.setValue("");
		amtAmount.setValue("");
		cmbItemNameReceivingStage.setValue(null);
		txtTransectionid.setValue(selectTransectionNo());
		dOpeningYear.setValue(new Date());
	}

	public void ProductDataLoad(String id){
		String sql="select vUnit,mthirdPartyItemRate,vProductCode from tb3rdPartylabelInformation "
				+ "where vLabelCode like '"+id+"' ";
		Iterator<?> iter=dbService(sql);
		while(iter.hasNext()){
			Object element[]=(Object[]) iter.next();
			cmbUnit.setValue(element[0]);
			txtItemCodeR.setValue(element[2]);
			//txtRate.setValue(df.format(element[1]));
		}
	}

	public void prodataAction()
	{
		//cmbOwnerNameParty.removeAllItems();
		Transaction tx = null;
		try {
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();

			//String squery = "Select  ProductCode,ProductName from  tbRawProductInfo where ProductCode not in(select productID from tbRawProductDetails) order by ProductName";

			String squery="select vRawItemCode,vUnitName from tbRawItemInfo where vRawItemCode like '"+cmbItemNameDeliveryStage.getValue()+"' ";
			System.out.println("squery : "+squery);
			List list = session.createSQLQuery(squery).list();

			for (Iterator iter = list.iterator();iter.hasNext();) 
			{
				Object[] element = (Object[]) iter.next();
				txtItemCodeR.setValue(element[0].toString());
				cmbUnit.setValue(element[1].toString());
				/*cmbOwnerNameParty.addItem(element[1]);
				cmbOwnerNameParty.setItemCaption(element[1], element[2].toString());*/
				//				amtQuantity.focus();

			}
		}
		catch (Exception ex){
			this.getParent().showNotification("Error", ex.toString(),Notification.TYPE_ERROR_MESSAGE);
		}
	}

	public void dataload()
	{
		try{
			cmbItemNameDeliveryStage.removeAllItems();
			cmbItemNameReceivingStage.removeAllItems();
			String sql="select vLabelCode,vLabelName,vlabelNamesource from tb3rdPartylabelInformation where "
					+ "vSource like '"+cmbSupplierNameSource.getValue().toString()+"' "
					+ "and vPartyId like '"+cmbOwnerNameParty.getValue().toString()+"'";
			Iterator<?> iter=dbService(sql);
			while(iter.hasNext())
			{
				Object[] element = (Object[]) iter.next();
				cmbItemNameDeliveryStage.addItem(element[0].toString());
				cmbItemNameDeliveryStage.setItemCaption(element[0].toString(),element[1].toString());
				cmbItemNameReceivingStage.addItem(element[0].toString());
				cmbItemNameReceivingStage.setItemCaption(element[0].toString(),element[2].toString());
			}
		}
		catch(Exception exp){
			this.getParent().showNotification("Error", Notification.TYPE_ERROR_MESSAGE);
		}
	}

	public void cmbPartyNameLoad()
	{
		cmbOwnerNameParty.removeAllItems();
		try
		{
			String sql="select distinct partyCode,partyName from tbPartyInfo where partyCode in (select distinct vPartyId from tb3rdPartylabelInformation)";
			Iterator<?> iter=dbService(sql);
			while(iter.hasNext())
			{
				Object[] element = (Object[]) iter.next();
				cmbOwnerNameParty.addItem(element[0].toString());
				cmbOwnerNameParty.setItemCaption(element[0].toString(), element[1].toString());
			}
		}
		catch(Exception exp)
		{
			showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}
	}

	public void cmbSourceName(String partyId)
	{
		cmbSupplierNameSource.removeAllItems();
		try
		{
			cmbSupplierNameSource.removeAllItems();
			String sql="select iSourceID,vSourceName from tbSourceInfo where  iSourceID in (select distinct vSource from tb3rdPartylabelInformation) and vPartyID like  '"+partyId+"'";
			Iterator<?> iter=dbService(sql);
			while(iter.hasNext())
			{
				Object[] element = (Object[]) iter.next();
				cmbSupplierNameSource.addItem(element[0].toString());
				cmbSupplierNameSource.setItemCaption(element[0].toString(), element[1].toString());
			}
		}
		catch(Exception exp)
		{
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}
	}
	private Iterator<?> dbService(String sql){

		System.out.println(sql);
		Transaction tx=null;
		Iterator<?> iter=null;
		try {
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();
			iter=session.createSQLQuery(sql).list().iterator();
		} 
		catch (Exception e) {
			showNotification(null,""+e,Notification.TYPE_ERROR_MESSAGE);
		}
		return iter;
	}

	public void cmbStoreload()
	{
		//cmbStore.removeAllItems();

		Transaction tx = null;

		try 
		{
			Session session=SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();

			String squery= "select vDepoId, vDepoName from tbDepoInformation order by vDepoName";
			System.out.println("squery : "+squery);

			List list = session.createSQLQuery(squery).list();

			for (Iterator iter = list.iterator();iter.hasNext();) 
			{
				Object[] element = (Object[]) iter.next();
				//cmbStore.addItem(element[0].toString());
				//cmbStore.setItemCaption(element[0].toString(), element[1].toString());
			}
		}
		catch (Exception ex)
		{
			this.getParent().showNotification("Error", ex.toString(),Notification.TYPE_ERROR_MESSAGE);
		}
	}


	private void updateBtnFileldED(boolean b)
	{
		lblQuantity.setEnabled(!b);
		amtQuantity.setEnabled(!b);

		lblRate.setEnabled(!b);
		txtRate.setEnabled(!b);

		lblAmount.setEnabled(!b);
		amtAmount.setEnabled(!b);

		lblline.setEnabled(!b);
	}

	private void componentIni(boolean b) 
	{
		lblOpeningYear.setEnabled(!b);
		dOpeningYear.setEnabled(!b);

		lblOwnerNameParty.setEnabled(!b);
		cmbOwnerNameParty.setEnabled(!b);

		lblSupplierNameSource.setEnabled(!b);
		cmbSupplierNameSource.setEnabled(!b);

		lblItemNameDeliveryStage.setEnabled(!b);
		cmbItemNameDeliveryStage.setEnabled(!b);

		cmbItemNameReceivingStage.setEnabled(!b);
		lblItemNameReceivingStage.setEnabled(!b);

		lblItemCode.setEnabled(!b);
		txtItemCodeR.setEnabled(!b);

		lblUnit.setEnabled(!b);
		cmbUnit.setEnabled(!b);

		lblQuantity.setEnabled(!b);
		amtQuantity.setEnabled(!b);

		lblRate.setEnabled(!b);
		txtRate.setEnabled(!b);

		lblAmount.setEnabled(!b);
		amtAmount.setEnabled(!b);

		lblline.setEnabled(!b);
	}

	private void updateinit(boolean b) 
	{
		lblOpeningYear.setEnabled(b);
		dOpeningYear.setEnabled(b);

		lblOwnerNameParty.setEnabled(!b);
		cmbOwnerNameParty.setEnabled(!b);

		lblSupplierNameSource.setEnabled(!b);
		cmbSupplierNameSource.setEnabled(!b);

		lblItemNameDeliveryStage.setEnabled(!b);
		cmbItemNameDeliveryStage.setEnabled(!b);

		cmbItemNameReceivingStage.setEnabled(!b);
		lblItemNameReceivingStage.setEnabled(!b);

		lblItemCode.setEnabled(!b);
		txtItemCodeR.setEnabled(!b);

		lblUnit.setEnabled(!b);
		cmbUnit.setEnabled(!b);

		lblQuantity.setEnabled(b);
		amtQuantity.setEnabled(b);

		lblRate.setEnabled(b);
		txtRate.setEnabled(b);

		lblAmount.setEnabled(b);
		amtAmount.setEnabled(b);

		lblline.setEnabled(!b);
	}
	private void btnIni(boolean t)
	{
		button.btnNew.setEnabled(t);
		button.btnUpdate.setEnabled(t);
		button.btnSave.setEnabled(!t);
		button.btnSave.setEnabled(!t);
		button.btnRefresh.setEnabled(!t);
		button.btnDelete.setEnabled(t);
		button.btnFind.setEnabled(t);
	}
	@AutoGenerated
	private AbsoluteLayout buildMainLayout()
	{
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("566px");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("650px");
		setHeight("454px");

		// lblOpeningYear
		lblOpeningYear = new Label();
		lblOpeningYear.setImmediate(false);
		lblOpeningYear.setWidth("-1px");
		lblOpeningYear.setHeight("-1px");
		lblOpeningYear.setValue("Opening Year :");
		// dOpeningYear
		dOpeningYear = new InlineDateField();
		dOpeningYear.setImmediate(true);
		dOpeningYear.setDateFormat("yyyy");
		dOpeningYear.setWidth("-1px");
		dOpeningYear.setHeight("-1px");
		dOpeningYear.setInvalidAllowed(false);
		dOpeningYear.setResolution(6);

		lblOwnerNameParty = new Label();
		lblOwnerNameParty.setImmediate(false);
		lblOwnerNameParty.setWidth("-1px");
		lblOwnerNameParty.setHeight("-1px");
		lblOwnerNameParty.setValue("Owner Name (Party) :");

		cmbOwnerNameParty = new ComboBox();
		cmbOwnerNameParty.setImmediate(true);
		cmbOwnerNameParty.setNullSelectionAllowed(false);
		cmbOwnerNameParty.setNewItemsAllowed(false);
		cmbOwnerNameParty.setWidth("350px");
		cmbOwnerNameParty.setHeight("-1px");
		cmbOwnerNameParty.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);

		lblSupplierNameSource = new Label();
		lblSupplierNameSource.setImmediate(false);
		lblSupplierNameSource.setWidth("-1px");
		lblSupplierNameSource.setHeight("-1px");
		lblSupplierNameSource.setValue("Supplier Name (Source) :");

		cmbSupplierNameSource = new ComboBox();
		cmbSupplierNameSource.setImmediate(true);
		cmbSupplierNameSource.setNullSelectionAllowed(false);
		cmbSupplierNameSource.setNewItemsAllowed(false);
		cmbSupplierNameSource.setWidth("350px");
		cmbSupplierNameSource.setHeight("-1px");
		cmbSupplierNameSource.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);

		lblItemNameReceivingStage = new Label();
		lblItemNameReceivingStage.setImmediate(false);
		lblItemNameReceivingStage.setWidth("-1px");
		lblItemNameReceivingStage.setHeight("-1px");
		lblItemNameReceivingStage.setValue("Item Name (Receiving stage) :");

		cmbItemNameReceivingStage = new ComboBox();
		cmbItemNameReceivingStage.setImmediate(true);
		cmbItemNameReceivingStage.setNullSelectionAllowed(false);
		cmbItemNameReceivingStage.setNewItemsAllowed(false);
		cmbItemNameReceivingStage.setWidth("350px");
		cmbItemNameReceivingStage.setHeight("-1px");
		cmbItemNameReceivingStage.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);

		// lblProductList
		lblItemNameDeliveryStage = new Label();
		lblItemNameDeliveryStage.setImmediate(false);
		lblItemNameDeliveryStage.setWidth("-1px");
		lblItemNameDeliveryStage.setHeight("-1px");
		lblItemNameDeliveryStage.setValue("Item Name (Delivery stage) :");

		// comProductName
		cmbItemNameDeliveryStage = new ComboBox();
		cmbItemNameDeliveryStage.setImmediate(true);
		cmbItemNameDeliveryStage.setNullSelectionAllowed(false);
		cmbItemNameDeliveryStage.setNewItemsAllowed(false);
		cmbItemNameDeliveryStage.setWidth("350px");
		cmbItemNameDeliveryStage.setHeight("-1px");
		cmbItemNameDeliveryStage.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);

		// lblItemCode
		lblItemCode = new Label();
		lblItemCode.setImmediate(false);
		lblItemCode.setWidth("-1px");
		lblItemCode.setHeight("-1px");
		lblItemCode.setValue("Item Code :");

		// txtItemCodeR
		txtItemCodeR = new TextRead();
		txtItemCodeR.setImmediate(false);
		txtItemCodeR.setWidth("100px");
		txtItemCodeR.setHeight("22px");

		// lblUnit
		lblUnit = new Label();
		lblUnit.setImmediate(false);
		lblUnit.setWidth("-1px");
		lblUnit.setHeight("-1px");
		lblUnit.setValue("Unit :");

		cmbUnit = new ComboBox();
		cmbUnit.setImmediate(true);
		cmbUnit.setNullSelectionAllowed(false);
		cmbUnit.setNewItemsAllowed(false);
		cmbUnit.setWidth("100px");
		cmbUnit.setHeight("-1px");
		cmbUnit.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);

		for(int i=0;i<unit1.length;i++)
		{
			cmbUnit.addItem(unit1[i]);	
		}

		// lblQuantity
		lblQuantity = new Label();
		lblQuantity.setImmediate(false);
		lblQuantity.setWidth("-1px");
		lblQuantity.setHeight("-1px");
		lblQuantity.setValue("Quantity :");


		// amtQuantity
		amtQuantity = new AmountField();
		amtQuantity.setImmediate(true);
		amtQuantity.setWidth("102px");
		amtQuantity.setHeight("22px");


		// lblRate
		lblRate = new Label();
		lblRate.setImmediate(false);
		lblRate.setWidth("-1px");
		lblRate.setHeight("-1px");
		lblRate.setValue("Rate :");

		//mainLayout.addComponent(lblRate,"top:238.0px;right:380.0px;");

		// txtRate
		txtRate = new AmountField();
		txtRate.setImmediate(true);
		txtRate.setWidth("102px");
		txtRate.setHeight("22px");


		// lblAmount
		lblAmount = new Label();
		lblAmount.setImmediate(false);
		lblAmount.setWidth("-1px");
		lblAmount.setHeight("-1px");
		lblAmount.setValue("Amount :");


		// amtAmount
		amtAmount = new TextRead(1);
		amtAmount.setImmediate(true);
		amtAmount.setWidth("102px");
		amtAmount.setHeight("22px");
		amtAmount.setStyleName("Amount");


		lblline = new Label();
		lblline.setImmediate(false);
		lblline.setWidth("-1");
		lblline.setHeight("-1");
		lblline.setValue("________________________________________________________________________");

		// adding components to mainLayout

		mainLayout.addComponent(lblOpeningYear, "top:28.0px;right:380.0px;");
		mainLayout.addComponent(dOpeningYear, "top:30.0px;left:194.0px;");

		mainLayout.addComponent(lblOwnerNameParty, "top:58.0px;right:380.0px;");
		mainLayout.addComponent(cmbOwnerNameParty, "top:60.0px;left:194.0px;");

		mainLayout.addComponent(lblSupplierNameSource, "top:88.0px;right:380.0px;");
		mainLayout.addComponent(cmbSupplierNameSource, "top:90.0px;left:194.0px;");

		mainLayout.addComponent(lblItemNameDeliveryStage, "top:118.0px;right:380.0px;");
		mainLayout.addComponent(cmbItemNameDeliveryStage, "top:120.0px;left:194.0px;");

		mainLayout.addComponent(lblItemNameReceivingStage, "top:148.0px;right:380.0px;");
		mainLayout.addComponent(cmbItemNameReceivingStage, "top:150.0px;left:194.0px;");

		mainLayout.addComponent(lblItemCode, "top:178.0px;right:380.0px;");
		mainLayout.addComponent(txtItemCodeR, "top:180.0px;left:195.0px;");


		mainLayout.addComponent(lblUnit, "top:208.0px;right:380.0px;");
		mainLayout.addComponent(cmbUnit, "top:210.0px;left:193.5px;");

		mainLayout.addComponent(lblQuantity,"top:238.0px;right:380.0px;");
		mainLayout.addComponent(amtQuantity,"top:240.0px;left:193.5px;");

		mainLayout.addComponent(lblRate, "top:268.0px;right:380.0px;");
		mainLayout.addComponent(txtRate, "top:270.0px;left:193.0px;");

		mainLayout.addComponent(lblAmount, "top:298.0px;right:380.0px;");
		mainLayout.addComponent(amtAmount, "top:300.0px;left:197.0px;");

		mainLayout.addComponent(lblline,"top:320.0px; left:18.0px;");

		return mainLayout;
	}

	private void buttonLayoutAdd()
	{
		btnLayout.addComponent(button);
		mainLayout.addComponent(btnLayout,"top:360px;left:15px;");

		/*fileAttUpload = new BtUpload("temp/attendanceFolder/c");
		fileAttUpload.setImmediate(true);
		mainLayout.addComponent(fileAttUpload, "top:360.0px; left:0.0px;");*/
	}

}
