package acc.appform.FinishedGoodsModule;

import com.common.share.CommonButton;
import com.common.share.FocusMoveByEnter;
import com.common.share.MessageBox;
import com.common.share.MessageBox.ButtonType;
import com.common.share.SessionBean;
import com.common.share.SessionFactoryUtil;
import com.common.share.TextRead;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Window;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.hibernate.Session;
import org.hibernate.Transaction;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Window.Notification;

public class ItemSubCategory extends Window 
{
	private AbsoluteLayout mainLayout;
	private Label lblSubCategoryID;
	private TextRead trSubcategoryId;
	private Label lblSubCategoryName;
	private TextField txtSubcategoryName;
	private Label lblCategoryName;
	private ComboBox cmbCategoryName ;
	private NativeButton nbCategory;
	private Label lblline;
	private Label SubGroupId=new Label();
	private Label GroupId=new Label();

	private Label lblExistSubCategoryName;

	CommonButton button = new CommonButton("New", "Save", "Edit", "", "Refresh", "Find", "", "","","Exit");

	private TextField txtSubCategoryID = new TextField();

	private SessionBean sessionBean;
	boolean isUpdate=false;
	boolean isFind=false;
	ArrayList<Component> allComp = new ArrayList<Component>();
	public ItemSubCategory(SessionBean sessionBean) 
	{
		buildMainLayout();
		this.sessionBean=sessionBean;
		this.setCaption("FINISH GOODS SUB CATEGORY :: " + sessionBean.getCompany());
		setContent(mainLayout);
		this.setResizable(false);
		btnIni(true);
		componentIni(true);
		cmbCategoryValueAdd();
		setEventAction();
		authencationCheck();
		button.btnNew.focus();
	}

	private void authencationCheck()
	{
		if(sessionBean.isSubmitable())
		{
			button.btnSave.setVisible(true);
		}
		else
		{
			button.btnSave.setVisible(false);
		}
		if(sessionBean.isUpdateable())
		{
			button.btnEdit.setVisible(true);
		}
		else
		{
			button.btnEdit.setVisible(false);
		}
		if(sessionBean.isDeleteable())
		{
			button.btnDelete.setVisible(true);
		}
		else
		{
			button.btnDelete.setVisible(false);
		}
	}

	private void focusEnter()
	{
		allComp.add(txtSubcategoryName);
		allComp.add(cmbCategoryName);

		allComp.add(button.btnNew);
		allComp.add(button.btnSave);
		allComp.add(button.btnEdit);
		allComp.add(button.btnRefresh);
		allComp.add(button.btnFind);
		allComp.add(button.btnExit);

		new FocusMoveByEnter(this,allComp);
	}

	public void setEventAction()
	{
		button.btnNew.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				isFind=true;
				focusEnter();
				txtSubcategoryName.focus();
				newButtonEvent();
			}
		});

		button.btnEdit.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				if(sessionBean.isUpdateable()){

					isFind=true;
					updateButtonEvent();
					focusEnter();
					txtSubcategoryName.focus();
				}else{
					getParent().showNotification("Warning,","You have not Proper Authentication to Edit.", Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

		button.btnSave.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				if(sessionBean.isUpdateable()){
					if(!txtSubcategoryName.getValue().toString().isEmpty()){
						saveButtonEvent();
					}else{
						getParent().showNotification("Warning,","Enter Sub Category Name",Notification.TYPE_WARNING_MESSAGE);
					}
				}else{
					getParent().showNotification("Warning,","You have not Proper Authentication to Save.", Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

		button.btnFind.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {

				isFind=true;
				findButtonEvent();
				isFind=false;
			}
		});

		button.btnRefresh.addListener(new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) {
				refreshButtonEvent();
				cmbCategoryValueAdd();
			}
		});

		button.btnExit.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				close();
			}
		});

		txtSubcategoryName.addListener(new ValueChangeListener()
		{
			public void valueChange(ValueChangeEvent event)
			{
				if(isFind)
				{
					if(!txtSubcategoryName.getValue().toString().isEmpty())
					{
						if(duplicateName())
						{
							lblExistSubCategoryName.setVisible(true);
							lblExistSubCategoryName.setValue("<b><Font Color='#CD0606'>! Already Exist</Font></b>");
							txtSubcategoryName.setValue("");
							txtSubcategoryName.focus();
						}
						else
						{	
							lblExistSubCategoryName.setVisible(false);
						}
					}
				}
			}
		});

		nbCategory.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				System.out.println("Category Form");
				gradeFormLink();				
			}
		});
	}


	private boolean duplicateName()
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			String query = " select vSubCategoryName from tbProductSubCategory where vSubCategoryName='"+txtSubcategoryName.getValue().toString().trim()+"' ";
			Iterator iter = session.createSQLQuery(query).list().iterator();

			if (iter.hasNext()) 
			{
				return true;
			}
		}
		catch (Exception ex) 
		{
			System.out.print(ex);
		}

		return false;
	}

	private void findButtonEvent() 
	{
		Window win = new ItemSubCategoryFind(sessionBean, txtSubCategoryID);
		win.addListener(new Window.CloseListener() 
		{
			public void windowClose(CloseEvent e) 
			{
				if (txtSubCategoryID.getValue().toString().length() > 0)
				{
					txtClear();
					findInitialise(txtSubCategoryID.getValue().toString());
					button.btnEdit.focus();
				}
			}
		});

		this.getParent().addWindow(win);
	}

	private void findInitialise(String txtSubCatogoryId) 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			List led = session.createSQLQuery("select iSubCategoryID,vSubCategoryName,iCategoryID,Group_Id,SubGroup_Id from tbProductSubCategory Where iSubCategoryID = '"+txtSubCatogoryId+"'").list();

			if (led.iterator().hasNext()) 
			{
				Object[] element = (Object[]) led.iterator().next();

				trSubcategoryId.setValue(element[0]);
				txtSubcategoryName.setValue(element[1]);
				cmbCategoryName.setValue(element[2]);
				GroupId.setValue(element[3]);
				SubGroupId.setValue(element[4]);
			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	public void gradeFormLink()
	{
		Window win = new ItemCategory(sessionBean);

		win.setStyleName("cwindow");
		win.setModal(true);
		win.addListener(new Window.CloseListener() 
		{
			public void windowClose(CloseEvent e) 
			{
				cmbCategoryData();
				System.out.println("Category Form");
			}
		});
		this.getParent().addWindow(win);
	}

	private void cmbCategoryData()
	{
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			Transaction tx = session.beginTransaction();
			String query = "Select iCategoryCode, vCategoryName from tbProductCategory";
			System.out.println(query);

			List list = session.createSQLQuery(query).list();

			for(Iterator iter = list.iterator(); iter.hasNext();)
			{
				Object[] element = (Object[]) iter.next();
				if (element[0] != null) {
					cmbCategoryName.addItem(element[0]);
					cmbCategoryName.setItemCaption(element[0], (String) element[1]);			
				}
			}
		}
		catch (Exception ex) {
			this.getParent().showNotification("Error",ex.toString(), Notification.TYPE_ERROR_MESSAGE);
		}
	}

	private void updateButtonEvent()
	{
		if(!txtSubcategoryName.getValue().toString().isEmpty())
		{
			isUpdate = true;
			btnIni(false);
			componentIni(false);
			trSubcategoryId.setEnabled(false);
		}
		else{
			this.getParent().showNotification("Update Failed","There are no data for update.",Notification.TYPE_WARNING_MESSAGE);
		}
	}

	private void refreshButtonEvent() 
	{
		isUpdate=false;
		componentIni(true);
		btnIni(true);
		txtClear();
	}

	public void updateData() 
	{
		Transaction tx = null;
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			//String updateQuery = "Update tbProductSubCategory set vSubCategoryName = 'cate', iCategoryID='12',vUserName ='nd', vUserIP='12326444', dtEntryTime= CURRENT_TIMESTAMP where iSubCategoryID = '1'";
			String updateQuery = "Update tbProductSubCategory set vSubCategoryName = '"+txtSubcategoryName.getValue().toString().trim()+"', iCategoryID='"+cmbCategoryName.getValue()+"',vUserName ='"+sessionBean.getUserName()+"', vUserIP='"+sessionBean.getUserIp()+"', dtEntryTime= CURRENT_TIMESTAMP where iSubCategoryID = '"+trSubcategoryId.getValue().toString().trim()+"'";
			session.createSQLQuery(updateQuery).executeUpdate();
			System.out.println("updateQuery : "+updateQuery);

			String UpdateLedger="UPDATE tbSub_Group set" +
					" Sub_Group_Name = '"+txtSubcategoryName.getValue()+"', " +
					" userId = '"+sessionBean.getUserId()+"', " +
					" userIp = '"+sessionBean.getUserIp()+"', " +
					" entryTime = CURRENT_TIMESTAMP " +
					" where Group_Id='"+GroupId.getValue()+"'"+
					" and Sub_Group_Id='"+SubGroupId.getValue()+"'";

			System.out.println("UpdateLedger: "+UpdateLedger);
			session.createSQLQuery(UpdateLedger).executeUpdate();
			tx.commit();
			this.getParent().showNotification("Update successfully.");
			cmbCategoryValueAdd();
		}catch(Exception exp){
			this.getParent().showNotification("Error",exp.toString(),Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}	
	}

	private void saveButtonEvent() 
	{
		if(cmbCategoryName.getValue()!=null)
		{
			if(isUpdate)
			{
				MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to update product information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
				mb.show(new MessageBox.EventListener()
				{
					public void buttonClicked(ButtonType buttonType)
					{
						if(buttonType == ButtonType.YES)
						{
							updateData();
							button.btnNew.focus();
							isUpdate=false;
							componentIni(true);
							txtClear();
							btnIni(true);
						}
					}
				});		
			}
			else
			{
				MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to Save information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
				mb.show(new MessageBox.EventListener()
				{
					public void buttonClicked(ButtonType buttonType)
					{
						if(buttonType == ButtonType.YES)
						{
							insertData();
							btnIni(true);
							cmbCategoryValueAdd();
							componentIni(true);
							txtClear();
							btnIni(true);
							button.btnNew.focus();
						}
					}
				});		
			}
		}
		else
		{
			this.getParent().showNotification("Warning :", "Please select Category Name", Notification.TYPE_WARNING_MESSAGE);
			cmbCategoryName.focus();
		}
	}

	private void insertData()
	{
		Transaction tx = null;
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			//String insertQuery = Insert Into tbProductSubCategory (iSubCategoryID,vSubCategoryName,iCategoryID,vUserName,vUserIP,dtEntryTime) values ('5','sub Category 1','22','esl12','10.201.0232.10',CURRENT_TIMESTAMP)
			String insertQuery = "Insert Into tbProductSubCategory (iSubCategoryID,vSubCategoryName,iCategoryID,Group_Id,SubGroup_Id,vUserName,vUserIP,dtEntryTime) values ('"+trSubcategoryId.getValue().toString().trim()+"','"+txtSubcategoryName.getValue().toString().trim()+"','"+cmbCategoryName.getValue()+"',(Select Group_Id From tbProductCategory where iCategoryCode='"+cmbCategoryName.getValue()+"'),('S'+ISNULL((SELECT cast((max(substring(Sub_Group_Id,2,len(Sub_Group_Id)-1))+1) as VARCHAR) FROM tbSub_Group),101)),'"+sessionBean.getUserName()+"','"+sessionBean.getUserIp()+"',CURRENT_TIMESTAMP)";
			System.out.println("insertQuery : "+insertQuery);
			session.createSQLQuery(insertQuery).executeUpdate();

			String sql = " INSERT INTO tbSub_Group(Sub_Group_Id,Sub_Group_Name,Group_Id,userId,userIp,entryTime)" +
					" VALUES('S'+ISNULL((SELECT cast((max(substring(Sub_Group_Id,2,len(Sub_Group_Id)-1))+1) " +
					" as VARCHAR) FROM tbSub_Group),101) ," +
					" '"+txtSubcategoryName.getValue()+"'," +
					" (Select Group_Id From tbProductCategory where" +
					" iCategoryCode='"+cmbCategoryName.getValue()+"'),'"+sessionBean.getUserId()+"'," +
					" '"+sessionBean.getUserIp()+"',CURRENT_TIMESTAMP)";
			session.createSQLQuery(sql).executeUpdate();
			tx.commit();

			this.getParent().showNotification("All information Save successfully.");
			btnIni(true);
		}
		catch(Exception exp)
		{
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	private void newButtonEvent() 
	{
		componentIni(false);
		btnIni(false);
		txtClear();
		newBtnData(1);
		cmbCategoryValueAdd();
		trSubcategoryId.setEnabled(false);	
	}

	public void cmbCategoryValueAdd()
	{
		cmbCategoryName.removeAllItems();
		Transaction tx = null;
		try{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			List list = session.createSQLQuery("select * from tbProductCategory").list();

			for(Iterator iter=list.iterator();iter.hasNext();)
			{
				Object[] element = (Object[]) iter.next();
				cmbCategoryName.addItem(element[1]);
				cmbCategoryName.setItemCaption(element[1], (String) element[2]);
			}
		}catch(Exception exp){
			this.getParent().showNotification("Error here",exp+"",Notification.TYPE_ERROR_MESSAGE);
		}
	}

	public void newBtnData(int flag)
	{
		if(txtSubcategoryName.getValue().toString().isEmpty() || flag==1)
		{
			Transaction tx = null;
			try{
				Session session = SessionFactoryUtil.getInstance().getCurrentSession();
				tx = session.beginTransaction();
				String sql = "Select isnull(max(iSubCategoryID)+1,1) as subcat from tbProductSubCategory";
				Iterator iter = session.createSQLQuery(sql).list().iterator();
				int num = 0;
				if (iter.hasNext()) {
					num = Integer.parseInt(iter.next().toString());
					trSubcategoryId.setValue(num);
				}
			}
			catch(Exception ex){
				this.getParent().showNotification("Error",ex+"",Notification.TYPE_ERROR_MESSAGE);
			}
		}
		else{
		}
	}

	public void txtClear()
	{
		trSubcategoryId.setValue("");
		txtSubcategoryName.setValue("");
		cmbCategoryName.setValue(null);
		lblExistSubCategoryName.setValue("");
	}

	private void componentIni(boolean b) 
	{
		lblSubCategoryID.setEnabled(!b);
		trSubcategoryId.setEnabled(!b);		

		lblSubCategoryName.setEnabled(!b);
		txtSubcategoryName.setEnabled(!b);

		lblCategoryName.setEnabled(!b);
		cmbCategoryName.setEnabled(!b);

		lblline.setEnabled(!b);

		nbCategory.setEnabled(!b);
	}

	private void btnIni(boolean t)
	{
		button.btnNew.setEnabled(t);
		button.btnEdit.setEnabled(t);
		button.btnSave.setEnabled(!t);
		button.btnRefresh.setEnabled(!t);
		button.btnDelete.setEnabled(t);
		button.btnFind.setEnabled(t);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() 
	{
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("530px");
		mainLayout.setHeight("250px");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("540px");
		setHeight("290px");

		// lblCategoryId
		lblSubCategoryID = new Label();
		lblSubCategoryID.setImmediate(false);
		lblSubCategoryID.setWidth("-1px");
		lblSubCategoryID.setHeight("-1px");
		lblSubCategoryID.setValue(" Sub Category ID:");
		mainLayout.addComponent(lblSubCategoryID, "top:37.0px;left:43.0px;");

		// categoryRead
		trSubcategoryId= new TextRead();
		trSubcategoryId.setImmediate(false);
		trSubcategoryId.setWidth("101px");
		trSubcategoryId.setHeight("24px");
		mainLayout.addComponent(trSubcategoryId, "top:34.0px;left:140.0px;");

		// labCategoryName
		lblSubCategoryName = new Label();
		lblSubCategoryName.setImmediate(false);
		lblSubCategoryName.setWidth("-1px");
		lblSubCategoryName.setHeight("-1px");
		lblSubCategoryName.setValue(" Sub Category Name :");
		mainLayout.addComponent(lblSubCategoryName, "top:60.0px;left:20.0px;");

		// txtCategoryname
		txtSubcategoryName = new TextField();
		txtSubcategoryName.setImmediate(false);
		txtSubcategoryName.setWidth("280px");
		txtSubcategoryName.setHeight("-1px");
		txtSubcategoryName.setSecret(false);
		mainLayout.addComponent(txtSubcategoryName, "top:60.0px;left:140.0px;");

		lblExistSubCategoryName = new Label();
		lblExistSubCategoryName.setWidth("-1px");
		lblExistSubCategoryName.setHeight("-1px");
		lblExistSubCategoryName.setImmediate(true);
		lblExistSubCategoryName.setContentMode(Label.CONTENT_XHTML);
		lblExistSubCategoryName.setVisible(false);
		lblExistSubCategoryName.setValue("");
		mainLayout.addComponent(lblExistSubCategoryName, " top:60.0px;left:450.0px;");

		lblCategoryName = new Label();
		lblCategoryName.setImmediate(false);
		lblCategoryName.setWidth("-1px");
		lblCategoryName.setHeight("-1px");
		lblCategoryName.setValue(" Category Name:");
		mainLayout.addComponent(lblCategoryName, "top:86.0px;left:45.0px;");

		cmbCategoryName= new ComboBox();
		cmbCategoryName.setImmediate(true);
		cmbCategoryName.setWidth("280px");
		cmbCategoryName.setNullSelectionAllowed(true);
		cmbCategoryName.setNewItemsAllowed(false);
		mainLayout.addComponent(cmbCategoryName, "top:86.0px;left:140.0px;");

		nbCategory = new NativeButton();
		nbCategory.setIcon(new ThemeResource("../icons/add.png"));
		nbCategory.setImmediate(true);
		nbCategory.setWidth("28px");
		nbCategory.setHeight("24px");
		mainLayout.addComponent(nbCategory,"top:86.0px;left:425.0px;");

		lblline= new Label();
		lblline.setImmediate(false);
		lblline.setWidth("-1px");
		lblline.setHeight("-1px");
		lblline.setValue("__________________________________________________________________________");
		mainLayout.addComponent(lblline, "top:140.0px;left:10.0px;");

		mainLayout.addComponent(button, "top:180.0px;left:12.0px;");

		return mainLayout;
	}
}
