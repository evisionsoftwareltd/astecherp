package acc.appform.FinishedGoodsModule;

import java.awt.Checkbox;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.Transaction;

import com.common.share.CommonButton;
import com.common.share.FocusMoveByEnter;
import com.common.share.ReportViewer;
import com.common.share.SessionBean;
import com.common.share.SessionFactoryUtil;
import com.sun.org.apache.xerces.internal.impl.xpath.XPath.Step;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.InlineDateField;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Window.Notification;

public class RptThirdPartyItemWiseStockLedger extends Window {

	private AbsoluteLayout mainLayout;

	private ComboBox  cmbPartyName;
	private CheckBox chkAllPartyName;
	private ComboBox cmbSourceName=new ComboBox();
	private CheckBox chkallSourceName=new CheckBox();
	private ComboBox cmbLabelName;
	private CheckBox chkAllLabelName;

	private Label lblFDate;
	private Label lblToDate;
	private Label lblLine;
	private PopupDateField fromDate=new PopupDateField();
	private PopupDateField toDate=new PopupDateField();

	private Label lblline;
	private NativeButton previewButton = new NativeButton("Preview");
	private NativeButton exitButton = new NativeButton("Exit");
	SessionBean sessionBean;
	private SimpleDateFormat dbformat=new SimpleDateFormat("yyyy-MM-dd");
	private CheckBox chkpdf,chkother;
	boolean type=true;

	public  RptThirdPartyItemWiseStockLedger(SessionBean sessionBean,String str) {
		this.sessionBean = sessionBean;
		buildMainLayout();
		setContent(mainLayout);
		this.setResizable(false);
		this.setCaption("THIRD PARTY ITEM WISE STOCK LEDGER ::"+ sessionBean.getCompany());
		cmbPartyName.focus();
		Component ob[]={cmbPartyName,cmbLabelName,previewButton};
		new FocusMoveByEnter(this, ob);
		partyDataLoad();
		allButtonAction();
		cmbSourceName.setEnabled(false);
		chkallSourceName.setEnabled(false);
		cmbLabelName.setEnabled(false);
		chkAllLabelName.setEnabled(false);
	}

	private AbsoluteLayout buildMainLayout() 
	{
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("560px");
		setHeight("320px");

		// cmbSection
		cmbPartyName = new ComboBox();
		cmbPartyName.setImmediate(true);
		cmbPartyName.setWidth("260px");
		cmbPartyName.setHeight("24px");
		cmbPartyName.setNullSelectionAllowed(false);
		cmbPartyName.setNewItemsAllowed(false);
		cmbPartyName.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);

		// chkAllPartyName
		chkAllPartyName = new CheckBox("");
		chkAllPartyName.setCaption("All");
		chkAllPartyName.setWidth("-1px");
		chkAllPartyName.setHeight("24px");
		chkAllPartyName.setImmediate(true);

		cmbSourceName = new ComboBox();
		cmbSourceName.setImmediate(true);
		cmbSourceName.setWidth("260px");
		cmbSourceName.setHeight("24px");
		cmbSourceName.setNullSelectionAllowed(false);
		cmbSourceName.setNewItemsAllowed(false);
		cmbSourceName.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);

		chkallSourceName = new CheckBox("");
		chkallSourceName.setCaption("All");
		chkallSourceName.setWidth("-1px");
		chkallSourceName.setHeight("24px");
		chkallSourceName.setImmediate(true);

		cmbLabelName = new ComboBox();
		cmbLabelName.setWidth("260px");
		cmbLabelName.setHeight("24px");
		cmbLabelName.setImmediate(true);
		cmbLabelName.setNewItemsAllowed(false);
		cmbLabelName.setNullSelectionAllowed(false);
		cmbLabelName.setFilteringMode(ComboBox.FILTERINGMODE_CONTAINS);

		chkAllLabelName=new CheckBox("");
		chkAllLabelName.setCaption("All");
		chkAllLabelName.setImmediate(true);
		chkAllLabelName.setWidth("-1px");
		chkAllLabelName.setHeight("24px");

		chkpdf=new CheckBox("PDF");
		chkpdf.setImmediate(true);
		chkpdf.setValue(true);
		chkpdf.setVisible(false);

		chkother=new CheckBox("Other");
		chkother.setImmediate(true);
		chkother.setVisible(false);

		Label lblfromdate=new Label("From Date");
		lblfromdate.setImmediate(false);

		fromDate=new PopupDateField();
		fromDate.setImmediate(true);
		fromDate.setWidth("110px");
		fromDate.setHeight("24px");
		fromDate.setResolution(fromDate.RESOLUTION_DAY);
		fromDate.setValue(new Date());
		fromDate.setDateFormat("dd-MM-yyyy");

		Label lbltodate=new Label("To Date");
		lbltodate.setImmediate(false);

		toDate=new PopupDateField();
		toDate.setImmediate(true);
		toDate.setWidth("110px");
		toDate.setHeight("24px");
		toDate.setResolution(fromDate.RESOLUTION_DAY);
		toDate.setValue(new Date());
		toDate.setDateFormat("dd-MM-yyyy");

		lblline = new Label();
		lblline.setImmediate(false);
		lblline.setWidth("-1px");
		lblline.setHeight("-1px");
		lblline.setContentMode(Label.CONTENT_XHTML);
		lblline.setValue("<font color='#e65100'>======================================================================================================================</font>");

		// previewButton
		previewButton.setWidth("95px");
		previewButton.setHeight("28px");
		previewButton.setIcon(new ThemeResource("../icons/print.png"));

		// exitButton
		exitButton.setWidth("70px");
		exitButton.setHeight("28px");
		exitButton.setIcon(new ThemeResource("../icons/exit1.png"));

		mainLayout.addComponent(new Label("Party Name"), "top:40.0px;left:40.0px;");
		mainLayout.addComponent( cmbPartyName, "top:38px;left:186.0px;");	
		mainLayout.addComponent(chkAllPartyName, "top:40.0px;left:448.0px;");

		mainLayout.addComponent(new Label("Source Name"), "top:70.0px;left:40.0px;");
		mainLayout.addComponent( cmbSourceName, "top:68.0px;left:186.0px;");
		mainLayout.addComponent(chkallSourceName, "top:70.0px;left:448.0px;");

		mainLayout.addComponent(new Label("Item Name"), "top:100.0px;left:40.0px;");
		mainLayout.addComponent( cmbLabelName, "top:98.0px;left:186.0px;");
		//mainLayout.addComponent(chkAllLabelName, "top:100.0px;left:448.0px;");

		mainLayout.addComponent(lbltodate, "top:130px; left:40px");
		mainLayout.addComponent( fromDate, "top:128.0px;left:186.0px;");


		mainLayout.addComponent(lblfromdate, "top:160px; left:40px");
		mainLayout.addComponent( toDate, "top:158.0px;left:186.0px;");

		mainLayout.addComponent(chkpdf, "top:120px; left:186.0px");
		mainLayout.addComponent(chkother, "top:120px; left:245px");

		mainLayout.addComponent(lblline, "top:180.0px;left:0.0px;");
		mainLayout.addComponent(previewButton,"top:200.opx; left:186.0px");
		mainLayout.addComponent(exitButton,"top:200.opx; left:280.0px");

		return mainLayout;
	}
	private void sourceLoad()
	{
		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();
		String partyid="%";
		if(cmbPartyName.getValue()!=null){
			partyid=cmbPartyName.getValue().toString();
		}
		String query = "SElect distinct vSource,(select vSourceName from tbSourceInfo where iSourceID like "
				+ "tb3rdPartylabelInformation.vSource) name from tb3rdPartylabelInformation "
				+ "where vPartyId like '"+partyid+"' order by name";
		System.out.println(query);
		cmbSourceName.removeAllItems();
		List list = session.createSQLQuery(query).list();		
		for(Iterator iter = list.iterator(); iter.hasNext();)
		{
			Object[] element = (Object[]) iter.next();
			cmbSourceName.addItem(element[0]);
			cmbSourceName.setItemCaption(element[0], element[1].toString());
		}
	}

	private void partyDataLoad()
	{
		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();
		String query = "SElect vPartyId,vPartyName from tb3rdPartylabelInformation order by vPartyName";
		System.out.println(query);
		cmbPartyName.removeAllItems();
		List list = session.createSQLQuery(query).list();		
		for(Iterator iter = list.iterator(); iter.hasNext();)
		{
			Object[] element = (Object[]) iter.next();
			cmbPartyName.addItem(element[0]);
			cmbPartyName.setItemCaption(element[0], element[1].toString());
		}
	}

	private void LabelDataload()
	{
		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();
		String strParty="";
		String sourceName="";
		if(chkAllPartyName.booleanValue())
		{
			strParty="%";
		}
		else
		{
			strParty=cmbPartyName.getValue().toString();
		}

		if(chkallSourceName.booleanValue())
		{
			sourceName="%";
		}
		else
		{
			sourceName=cmbSourceName.getValue().toString();	
		}
		String query= " SElect vLabelCode,vLabelName from tb3rdPartylabelInformation "
				+ "where vSource like '"+sourceName+"'  and vPartyId like '"+strParty+"' order by vLabelName";

		System.out.println(query);

		List list = session.createSQLQuery(query).list();
		cmbLabelName.removeAllItems();
		for(Iterator iter = list.iterator(); iter.hasNext();)
		{
			Object[] element = (Object[]) iter.next();
			cmbLabelName.addItem(element[0]);
			cmbLabelName.setItemCaption(element[0], element[1].toString());
		}
	}

	private void allButtonAction()
	{
		cmbPartyName.addListener(new ValueChangeListener()
		{
			public void valueChange(ValueChangeEvent event)
			{
				if(cmbPartyName.getValue()!=null)
				{
					sourceLoad();
					cmbSourceName.setEnabled(true);
					chkallSourceName.setEnabled(true);
					chkallSourceName.setValue(false);

					cmbLabelName.setEnabled(false);
					chkAllLabelName.setEnabled(false);

					cmbLabelName.setValue(null);
					chkAllLabelName.setValue(false);
				}
				else
				{
					if(!chkAllPartyName.booleanValue())
					{
						cmbSourceName.setEnabled(false);
						chkallSourceName.setEnabled(false);
						chkallSourceName.setValue(true);

						cmbLabelName.setEnabled(false);
						chkAllLabelName.setEnabled(false);
						cmbLabelName.setValue(null);	
					}
				}
			}
		});
		chkAllPartyName.addListener(new ValueChangeListener()
		{
			public void valueChange(ValueChangeEvent event) 
			{
				if(chkAllPartyName.booleanValue())
				{
					cmbPartyName.setValue(null);
					cmbPartyName.setEnabled(false); 		
					cmbSourceName.setEnabled(true);
					chkallSourceName.setEnabled(true);
					sourceLoad();
				}
				else
				{
					cmbPartyName.setEnabled(true);
					cmbSourceName.setEnabled(false);
					chkallSourceName.setEnabled(false);
					cmbSourceName.setValue(null);
					chkallSourceName.setValue(false);

					cmbLabelName.setEnabled(false);
					chkAllLabelName.setEnabled(false);
					cmbLabelName.setValue(null);
					chkAllLabelName.setValue(false);
				}
			}
		});

		cmbSourceName.addListener(new ValueChangeListener() 
		{
			public void valueChange(ValueChangeEvent event) 
			{
				if(cmbSourceName.getValue()!=null)
				{
					cmbLabelName.setEnabled(true);
					chkAllLabelName.setEnabled(true);
					LabelDataload();
				}
				else
				{
					cmbLabelName.setEnabled(false);
					cmbLabelName.setEnabled(false);
					chkAllLabelName.setEnabled(false);
				}
			}
		});

		chkallSourceName.addListener(new ValueChangeListener() {
			public void valueChange(ValueChangeEvent event) 
			{
				if(chkallSourceName.booleanValue())
				{
					cmbSourceName.setValue(null);
					cmbSourceName.setEnabled(false);
					cmbLabelName.setEnabled(true);
					chkAllLabelName.setEnabled(true);
					LabelDataload();
				}
				else{
					cmbSourceName.setValue(null);
					cmbSourceName.setEnabled(true);
					cmbLabelName.setEnabled(false);
					chkAllLabelName.setEnabled(false);
				}
			}
		});

		chkAllLabelName.addListener(new ValueChangeListener() {
			public void valueChange(ValueChangeEvent event) 
			{
				if(chkAllLabelName.booleanValue())
				{
					cmbLabelName.setValue(null);
					cmbLabelName.setEnabled(false);
				}
				else{
					cmbLabelName.setValue(null);
					cmbLabelName.setEnabled(true);
				}
			}
		});
		previewButton.addListener(new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) {
				if(cmbPartyName.getValue()!=null || chkAllPartyName.booleanValue()==true)
				{
					if(cmbSourceName.getValue()!=null || chkallSourceName.booleanValue()==true)
					{
						if(cmbLabelName.getValue()!=null || chkAllLabelName.booleanValue()==true)
						{
							reportShow();
						}
						else
						{
							showNotification("Select Label Name", Notification.TYPE_WARNING_MESSAGE);
						}
					}
					else
					{
						showNotification("Select Source Name", Notification.TYPE_WARNING_MESSAGE);
					}
				}
				else
				{
					getParent().showNotification("Select Party Name", Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

		exitButton.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				close();
			}
		});

		/*chkpdf.addListener(new ValueChangeListener()
		{
			public void valueChange(ValueChangeEvent event)
			{
				if(chkpdf.booleanValue())
				{
					chkother.setValue(false);
					type=true;
				}
				else
				{
					//chkother.setValue(true);
					type=false;
				}
			}
		});

		chkother.addListener(new ValueChangeListener()
		{
			public void valueChange(ValueChangeEvent event)
			{
				if(chkother.booleanValue())
				{
					chkpdf.setValue(false);
					type=false;
				}
				else
				{
					chkpdf.setValue(true);
					type=true;
				}
			}
		});*/

	}
	
	private Iterator<?> dbService(String sql){

		System.out.println(sql);
		Session session=null;
		Iterator<?> iter=null;
		try {
			session=SessionFactoryUtil.getInstance().openSession();
			iter=session.createSQLQuery(sql).list().iterator();
		} 
		catch (Exception e) {
			showNotification(null,""+e,Notification.TYPE_ERROR_MESSAGE);
		}
		finally{
			if(session!=null){
				session.close();
			}
		}
		return iter;
	}
	
	private String unit(String product)
	{
		String unit="";
		String sql = "select vUnit from tb3rdPartylabelInformation where vLabelCode like '"+product+"'";
		System.out.println(sql);

		Iterator<?> iter=dbService(sql);
		if(iter.hasNext())
		{
			unit=iter.next().toString();
		}
		return unit;
	}
	private void reportShow()
	{
		System.out.println("chkCmb");
		String query=null;
		String partyName="";
		String labelName="";
		String sourceName="";

		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();
		
		try{

			if(chkAllPartyName.booleanValue())
			{
				partyName ="%"; 
			}
			else
			{
				if(cmbPartyName.getValue()!=null){
					partyName = cmbPartyName.getValue().toString();
				}
			}
			///////////////////
			if(chkallSourceName.booleanValue())
			{
				sourceName ="%"; 
			}
			else
			{
				if(cmbSourceName.getValue()!=null){
					sourceName = cmbSourceName.getValue().toString();
				}
			}
			////////////////////
			if(chkAllLabelName.booleanValue())
			{
				labelName="%";
			}
			else
			{
				if(cmbLabelName.getValue()!=null){
					labelName=cmbLabelName.getValue().toString();
				}
			}
			////////////////////
			
			System.out.println("EndCmb");
			

			HashMap hm = new HashMap();
			hm.put("logo", sessionBean.getCompanyLogo());
			hm.put("company", sessionBean.getCompany());
			hm.put("address", sessionBean.getCompanyAddress());
			hm.put("phone", sessionBean.getCompanyContact());
			hm.put("username", sessionBean.getUserName()+"  "+sessionBean.getUserIp());
			hm.put("PartyName", cmbLabelName.getItemCaption(cmbLabelName.getValue()));
			hm.put("item", cmbLabelName.getItemCaption(cmbLabelName.getValue()));
			hm.put("unit",unit(cmbLabelName.getValue().toString()));
			hm.put("fromdate", new SimpleDateFormat("dd-MM-yy").format(fromDate.getValue()));
			hm.put("todate", new SimpleDateFormat("dd-MM-yy").format(toDate.getValue()));

			if(cmbLabelName.getValue()!=null)
			{
				String sql="select  * from funThirdPartyStockLedger ('"+dbformat.format(fromDate.getValue())+"','"+dbformat.format(toDate.getValue())+"','"+cmbLabelName.getValue()+"') ";
				
				System.out.println(sql);
				hm.put("sql", sql);
				List lst= session.createSQLQuery(sql).list();
				if(!lst.isEmpty())
				{
					System.out.println("Trying To Do");
					Window win = new ReportViewer(hm,"report/raw/RptThirdPartyItemWiseStockLedger.jasper",
							this.getWindow().getApplication().getContext().getBaseDirectory()+"".replace("\\","/")+"/VAADIN/rpttmp",
							this.getWindow().getApplication().getURL()+"VAADIN/rpttmp",false,
							this.getWindow().getApplication().getURL()+"VAADIN/applet",true);				
					win.setCaption("Project Report");
					this.getParent().getWindow().addWindow(win);	
				}		
				else
				{
					showNotification("Data does not exists on the given criteria.",Notification.TYPE_WARNING_MESSAGE);	
				}
			}
			else
			{			
				getParent().showNotification("Please select Item name!!!", Notification.TYPE_WARNING_MESSAGE);

			}
		}
		catch(Exception exp){
			this.getParent().showNotification("Error "+exp,Notification.TYPE_ERROR_MESSAGE);
		}

		/*try{
			System.out.println("chkCmb");
			String query=null;
			String partyName="";
			String labelName="";
			String sourceName="";

			if(chkAllPartyName.booleanValue())
			{
				partyName ="%"; 
			}
			else
			{
				if(cmbPartyName.getValue()!=null){
					partyName = cmbPartyName.getValue().toString();
				}
			}
			///////////////////
			if(chkallSourceName.booleanValue())
			{
				sourceName ="%"; 
			}
			else
			{
				if(cmbSourceName.getValue()!=null){
					sourceName = cmbSourceName.getValue().toString();
				}
			}
			////////////////////
			if(chkAllLabelName.booleanValue())
			{
				labelName="%";
			}
			else
			{
				if(cmbLabelName.getValue()!=null){
					labelName=cmbLabelName.getValue().toString();
				}
			}
			////////////////////
			System.out.println("EndCmb");

			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			Transaction tx = session.beginTransaction();

			HashMap hm = new HashMap();
			hm.put("sourceName", sourceName);
			hm.put("company", sessionBean.getCompany());
			hm.put("address", sessionBean.getCompanyAddress());
			hm.put("Phone", sessionBean.getCompanyContact());
			hm.put("username", sessionBean.getUserName()+"  "+sessionBean.getUserIp());
			hm.put("logo", sessionBean.getCompanyLogo());

			System.out.println("Logo Image: "+sessionBean.getCompanyLogo());

			query= "SElect (select vSourceName from tbSourceInfo where iSourceID like tb3rdPartylabelInformation.vSource) vSource,vPartyId,vPartyName,vLabelCode,vLabelName,vUnit,mMax,mRefill,mMin from tb3rdPartylabelInformation where vSource like '"+sourceName+"' and vPartyId like '"+partyName+"' and vLabelCode like '"+labelName+"'"
					+ "order by vSource,vPartyName,vLabelName";

			System.out.println(query);
			hm.put("sql", query);
			System.out.println("123");
			Window win = new ReportViewer(hm,"report/raw/rawProductInfo3rdRpt.jasper",
					this.getWindow().getApplication().getContext().getBaseDirectory()+"".replace("\\","/")+"/VAADIN/rpttmp",
					this.getWindow().getApplication().getURL()+"VAADIN/rpttmp",false,
					this.getWindow().getApplication().getURL()+"VAADIN/applet",type);

			System.out.println("789");
			win.setCaption("Project Report");
			this.getParent().getWindow().addWindow(win);
		}
		catch(Exception exp){
			this.getParent().showNotification("Error "+exp,Notification.TYPE_ERROR_MESSAGE);
		}*/
	}
}
